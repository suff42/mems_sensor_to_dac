
mems_sensor_to_dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005750  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000474  20000000  08005974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000774  20000474  08005de8  00020474  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000be8  08005de8  00020be8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ed6d  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002456  00000000  00000000  0002f211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000082f9  00000000  00000000  00031667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000009f0  00000000  00000000  00039960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000009c0  00000000  00000000  0003a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00015a87  00000000  00000000  0003ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000117ff  00000000  00000000  00050797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00083f54  00000000  00000000  00061f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000d2  00000000  00000000  000e5eea  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001da0  00000000  00000000  000e5fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000474 	.word	0x20000474
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080058d0 	.word	0x080058d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000478 	.word	0x20000478
 80001d4:	080058d0 	.word	0x080058d0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004d0:	b500      	push	{lr}
 80004d2:	b083      	sub	sp, #12
	iData[0] = reg;
 80004d4:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <write_register+0x20>)
 80004d6:	7010      	strb	r0, [r2, #0]
	iData[1] = data[0];
 80004d8:	780b      	ldrb	r3, [r1, #0]
 80004da:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004dc:	2364      	movs	r3, #100	; 0x64
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2302      	movs	r3, #2
 80004e2:	2194      	movs	r1, #148	; 0x94
 80004e4:	1d10      	adds	r0, r2, #4
 80004e6:	f001 fb6b 	bl	8001bc0 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ea:	b003      	add	sp, #12
 80004ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80004f0:	20000490 	.word	0x20000490

080004f4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	460d      	mov	r5, r1
	iData[0] = reg;
 80004fa:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <read_register+0x30>)
 80004fc:	4614      	mov	r4, r2
 80004fe:	f804 0b04 	strb.w	r0, [r4], #4
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000502:	2664      	movs	r6, #100	; 0x64
 8000504:	9600      	str	r6, [sp, #0]
 8000506:	2301      	movs	r3, #1
 8000508:	2194      	movs	r1, #148	; 0x94
 800050a:	4620      	mov	r0, r4
 800050c:	f001 fb58 	bl	8001bc0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000510:	9600      	str	r6, [sp, #0]
 8000512:	2301      	movs	r3, #1
 8000514:	462a      	mov	r2, r5
 8000516:	2194      	movs	r1, #148	; 0x94
 8000518:	4620      	mov	r0, r4
 800051a:	f001 fc0d 	bl	8001d38 <HAL_I2C_Master_Receive>
}
 800051e:	b002      	add	sp, #8
 8000520:	bd70      	pop	{r4, r5, r6, pc}
 8000522:	bf00      	nop
 8000524:	20000490 	.word	0x20000490

08000528 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000528:	b084      	sub	sp, #16
 800052a:	b570      	push	{r4, r5, r6, lr}
 800052c:	ac04      	add	r4, sp, #16
 800052e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000532:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000536:	4b44      	ldr	r3, [pc, #272]	; (8000648 <CS43_Init+0x120>)
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	69d3      	ldr	r3, [r2, #28]
 8000542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000546:	61d3      	str	r3, [r2, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	483f      	ldr	r0, [pc, #252]	; (800064c <CS43_Init+0x124>)
 800054e:	f001 f837 	bl	80015c0 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000552:	4c3f      	ldr	r4, [pc, #252]	; (8000650 <CS43_Init+0x128>)
 8000554:	2254      	movs	r2, #84	; 0x54
 8000556:	a904      	add	r1, sp, #16
 8000558:	1d20      	adds	r0, r4, #4
 800055a:	f004 fd39 	bl	8004fd0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800055e:	2301      	movs	r3, #1
 8000560:	7063      	strb	r3, [r4, #1]
	write_register(POWER_CONTROL1,iData);
 8000562:	4621      	mov	r1, r4
 8000564:	2002      	movs	r0, #2
 8000566:	f7ff ffb3 	bl	80004d0 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800056a:	4625      	mov	r5, r4
 800056c:	23af      	movs	r3, #175	; 0xaf
 800056e:	f805 3f01 	strb.w	r3, [r5, #1]!
	write_register(POWER_CONTROL2,&iData[1]);
 8000572:	4629      	mov	r1, r5
 8000574:	2004      	movs	r0, #4
 8000576:	f7ff ffab 	bl	80004d0 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	7063      	strb	r3, [r4, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 800057e:	4629      	mov	r1, r5
 8000580:	2005      	movs	r0, #5
 8000582:	f7ff ffa5 	bl	80004d0 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000586:	4621      	mov	r1, r4
 8000588:	2006      	movs	r0, #6
 800058a:	f7ff ffb3 	bl	80004f4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800058e:	7863      	ldrb	r3, [r4, #1]
 8000590:	f003 0320 	and.w	r3, r3, #32
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
	iData[1] &= ~(1 << 4);  // No DSP mode
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
	iData[1] |= (1 << 2);

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000594:	f043 0307 	orr.w	r3, r3, #7
 8000598:	7063      	strb	r3, [r4, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800059a:	4629      	mov	r1, r5
 800059c:	2006      	movs	r0, #6
 800059e:	f7ff ff97 	bl	80004d0 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80005a2:	4629      	mov	r1, r5
 80005a4:	2008      	movs	r0, #8
 80005a6:	f7ff ffa5 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80005aa:	7863      	ldrb	r3, [r4, #1]
 80005ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	7063      	strb	r3, [r4, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 80005b6:	4629      	mov	r1, r5
 80005b8:	2008      	movs	r0, #8
 80005ba:	f7ff ff89 	bl	80004d0 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80005be:	4629      	mov	r1, r5
 80005c0:	2009      	movs	r0, #9
 80005c2:	f7ff ff97 	bl	80004f4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80005c6:	7863      	ldrb	r3, [r4, #1]
 80005c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	7063      	strb	r3, [r4, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 80005d2:	4629      	mov	r1, r5
 80005d4:	2009      	movs	r0, #9
 80005d6:	f7ff ff7b 	bl	80004d0 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80005da:	4629      	mov	r1, r5
 80005dc:	200e      	movs	r0, #14
 80005de:	f7ff ff89 	bl	80004f4 <read_register>
	if(outputMode == MODE_ANALOG)
 80005e2:	2e01      	cmp	r6, #1
 80005e4:	d004      	beq.n	80005f0 <CS43_Init+0xc8>
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
	}
	else if(outputMode == MODE_I2S)
 80005e6:	b94e      	cbnz	r6, 80005fc <CS43_Init+0xd4>
	{
		iData[1] = 0x02;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <CS43_Init+0x128>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	705a      	strb	r2, [r3, #1]
 80005ee:	e005      	b.n	80005fc <CS43_Init+0xd4>
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80005f0:	7863      	ldrb	r3, [r4, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80005f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80005f6:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 80005fa:	7063      	strb	r3, [r4, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80005fc:	4d14      	ldr	r5, [pc, #80]	; (8000650 <CS43_Init+0x128>)
 80005fe:	1c6c      	adds	r4, r5, #1
 8000600:	4621      	mov	r1, r4
 8000602:	200e      	movs	r0, #14
 8000604:	f7ff ff64 	bl	80004d0 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000608:	4621      	mov	r1, r4
 800060a:	200f      	movs	r0, #15
 800060c:	f7ff ff72 	bl	80004f4 <read_register>
	iData[1] = 0x00;
 8000610:	2600      	movs	r6, #0
 8000612:	706e      	strb	r6, [r5, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000614:	4621      	mov	r1, r4
 8000616:	200f      	movs	r0, #15
 8000618:	f7ff ff5a 	bl	80004d0 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800061c:	706e      	strb	r6, [r5, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800061e:	4621      	mov	r1, r4
 8000620:	2014      	movs	r0, #20
 8000622:	f7ff ff55 	bl	80004d0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000626:	4621      	mov	r1, r4
 8000628:	2015      	movs	r0, #21
 800062a:	f7ff ff51 	bl	80004d0 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 800062e:	4621      	mov	r1, r4
 8000630:	201a      	movs	r0, #26
 8000632:	f7ff ff4d 	bl	80004d0 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000636:	4621      	mov	r1, r4
 8000638:	201b      	movs	r0, #27
 800063a:	f7ff ff49 	bl	80004d0 <write_register>
}
 800063e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000642:	b004      	add	sp, #16
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000880 	.word	0x20000880
 800064c:	40020c00 	.word	0x40020c00
 8000650:	20000490 	.word	0x20000490

08000654 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000654:	b508      	push	{r3, lr}
	switch (side)
 8000656:	2803      	cmp	r0, #3
 8000658:	d806      	bhi.n	8000668 <CS43_Enable_RightLeft+0x14>
 800065a:	e8df f000 	tbb	[pc, r0]
 800065e:	0f02      	.short	0x0f02
 8000660:	1713      	.short	0x1713
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <CS43_Enable_RightLeft+0x40>)
 8000664:	22f0      	movs	r2, #240	; 0xf0
 8000666:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
			break;
		default:
			break;
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000668:	490a      	ldr	r1, [pc, #40]	; (8000694 <CS43_Enable_RightLeft+0x40>)
 800066a:	784b      	ldrb	r3, [r1, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800066c:	f043 030f 	orr.w	r3, r3, #15
 8000670:	f801 3f01 	strb.w	r3, [r1, #1]!
	write_register(POWER_CONTROL2,&iData[1]);
 8000674:	2004      	movs	r0, #4
 8000676:	f7ff ff2b 	bl	80004d0 <write_register>
}
 800067a:	bd08      	pop	{r3, pc}
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <CS43_Enable_RightLeft+0x40>)
 800067e:	22b0      	movs	r2, #176	; 0xb0
 8000680:	705a      	strb	r2, [r3, #1]
			break;
 8000682:	e7f1      	b.n	8000668 <CS43_Enable_RightLeft+0x14>
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <CS43_Enable_RightLeft+0x40>)
 8000686:	22e0      	movs	r2, #224	; 0xe0
 8000688:	705a      	strb	r2, [r3, #1]
			break;
 800068a:	e7ed      	b.n	8000668 <CS43_Enable_RightLeft+0x14>
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <CS43_Enable_RightLeft+0x40>)
 800068e:	22a0      	movs	r2, #160	; 0xa0
 8000690:	705a      	strb	r2, [r3, #1]
			break;
 8000692:	e7e9      	b.n	8000668 <CS43_Enable_RightLeft+0x14>
 8000694:	20000490 	.word	0x20000490

08000698 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000698:	b538      	push	{r3, r4, r5, lr}
 800069a:	4604      	mov	r4, r0
	int8_t tempVol = volume - 50;
 800069c:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
 80006a0:	b2db      	uxtb	r3, r3
	tempVol = tempVol*(127/50);
 80006a2:	005b      	lsls	r3, r3, #1
	uint8_t myVolume =  (uint8_t )tempVol;
	iData[1] = myVolume;
 80006a4:	4d11      	ldr	r5, [pc, #68]	; (80006ec <CS43_SetVolume+0x54>)
 80006a6:	f805 3f01 	strb.w	r3, [r5, #1]!
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006aa:	4629      	mov	r1, r5
 80006ac:	2014      	movs	r0, #20
 80006ae:	f7ff ff0f 	bl	80004d0 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80006b2:	4629      	mov	r1, r5
 80006b4:	2015      	movs	r0, #21
 80006b6:	f7ff ff0b 	bl	80004d0 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 80006ba:	2c64      	cmp	r4, #100	; 0x64
 80006bc:	d814      	bhi.n	80006e8 <CS43_SetVolume+0x50>
 80006be:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <CS43_SetVolume+0x58>)
 80006c6:	fb84 2303 	smull	r2, r3, r4, r3
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	3b18      	subs	r3, #24
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4c06      	ldr	r4, [pc, #24]	; (80006ec <CS43_SetVolume+0x54>)
 80006d2:	f804 3f01 	strb.w	r3, [r4, #1]!

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80006d6:	4621      	mov	r1, r4
 80006d8:	2020      	movs	r0, #32
 80006da:	f7ff fef9 	bl	80004d0 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80006de:	4621      	mov	r1, r4
 80006e0:	2021      	movs	r0, #33	; 0x21
 80006e2:	f7ff fef5 	bl	80004d0 <write_register>
}
 80006e6:	bd38      	pop	{r3, r4, r5, pc}
	iData[1] = VOLUME_CONVERT_D(volume);
 80006e8:	2318      	movs	r3, #24
 80006ea:	e7f1      	b.n	80006d0 <CS43_SetVolume+0x38>
 80006ec:	20000490 	.word	0x20000490
 80006f0:	51eb851f 	.word	0x51eb851f

080006f4 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80006f4:	b538      	push	{r3, r4, r5, lr}
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80006f6:	4d19      	ldr	r5, [pc, #100]	; (800075c <CS43_Start+0x68>)
 80006f8:	462c      	mov	r4, r5
 80006fa:	2399      	movs	r3, #153	; 0x99
 80006fc:	f804 3f01 	strb.w	r3, [r4, #1]!
	write_register(CONFIG_00,&iData[1]);
 8000700:	4621      	mov	r1, r4
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff fee4 	bl	80004d0 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	706b      	strb	r3, [r5, #1]
	write_register(CONFIG_47,&iData[1]);
 800070c:	4621      	mov	r1, r4
 800070e:	2047      	movs	r0, #71	; 0x47
 8000710:	f7ff fede 	bl	80004d0 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000714:	4621      	mov	r1, r4
 8000716:	2032      	movs	r0, #50	; 0x32
 8000718:	f7ff feec 	bl	80004f4 <read_register>
	iData[1] |= 0x80;
 800071c:	786b      	ldrb	r3, [r5, #1]
 800071e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000722:	706b      	strb	r3, [r5, #1]
	write_register(CONFIG_32,&iData[1]);
 8000724:	4621      	mov	r1, r4
 8000726:	2032      	movs	r0, #50	; 0x32
 8000728:	f7ff fed2 	bl	80004d0 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800072c:	4621      	mov	r1, r4
 800072e:	2032      	movs	r0, #50	; 0x32
 8000730:	f7ff fee0 	bl	80004f4 <read_register>
	iData[1] &= ~(0x80);
 8000734:	786b      	ldrb	r3, [r5, #1]
 8000736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800073a:	706b      	strb	r3, [r5, #1]
	write_register(CONFIG_32,&iData[1]);
 800073c:	4621      	mov	r1, r4
 800073e:	2032      	movs	r0, #50	; 0x32
 8000740:	f7ff fec6 	bl	80004d0 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000744:	2000      	movs	r0, #0
 8000746:	7068      	strb	r0, [r5, #1]
	write_register(CONFIG_00,&iData[1]);
 8000748:	4621      	mov	r1, r4
 800074a:	f7ff fec1 	bl	80004d0 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800074e:	239e      	movs	r3, #158	; 0x9e
 8000750:	706b      	strb	r3, [r5, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 8000752:	4621      	mov	r1, r4
 8000754:	2002      	movs	r0, #2
 8000756:	f7ff febb 	bl	80004d0 <write_register>
}
 800075a:	bd38      	pop	{r3, r4, r5, pc}
 800075c:	20000490 	.word	0x20000490

08000760 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000764:	2400      	movs	r4, #0
 8000766:	9405      	str	r4, [sp, #20]
 8000768:	9406      	str	r4, [sp, #24]
 800076a:	9407      	str	r4, [sp, #28]
 800076c:	9408      	str	r4, [sp, #32]
 800076e:	9409      	str	r4, [sp, #36]	; 0x24

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000770:	9401      	str	r4, [sp, #4]
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_GPIO_Init+0x88>)
 8000774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000776:	f042 0204 	orr.w	r2, r2, #4
 800077a:	631a      	str	r2, [r3, #48]	; 0x30
 800077c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800077e:	f002 0204 	and.w	r2, r2, #4
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	9402      	str	r4, [sp, #8]
 8000788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078a:	f042 0201 	orr.w	r2, r2, #1
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
 8000790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000792:	f002 0201 	and.w	r2, r2, #1
 8000796:	9202      	str	r2, [sp, #8]
 8000798:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	9403      	str	r4, [sp, #12]
 800079c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079e:	f042 0202 	orr.w	r2, r2, #2
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
 80007a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a6:	f002 0202 	and.w	r2, r2, #2
 80007aa:	9203      	str	r2, [sp, #12]
 80007ac:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	9404      	str	r4, [sp, #16]
 80007b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b2:	f042 0208 	orr.w	r2, r2, #8
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	9304      	str	r3, [sp, #16]
 80007c0:	9b04      	ldr	r3, [sp, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80007c2:	4d0a      	ldr	r5, [pc, #40]	; (80007ec <MX_GPIO_Init+0x8c>)
 80007c4:	4622      	mov	r2, r4
 80007c6:	2110      	movs	r1, #16
 80007c8:	4628      	mov	r0, r5
 80007ca:	f000 fef9 	bl	80015c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007ce:	2310      	movs	r3, #16
 80007d0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007da:	a905      	add	r1, sp, #20
 80007dc:	4628      	mov	r0, r5
 80007de:	f000 fe1b 	bl	8001418 <HAL_GPIO_Init>

}
 80007e2:	b00b      	add	sp, #44	; 0x2c
 80007e4:	bd30      	pop	{r4, r5, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020c00 	.word	0x40020c00

080007f0 <MX_DMA_Init>:
static void MX_DMA_Init(void) {
 80007f0:	b510      	push	{r4, lr}
 80007f2:	b082      	sub	sp, #8
	__HAL_RCC_DMA1_CLK_ENABLE();
 80007f4:	2400      	movs	r4, #0
 80007f6:	9401      	str	r4, [sp, #4]
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_DMA_Init+0x40>)
 80007fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007fc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800080c:	4622      	mov	r2, r4
 800080e:	4621      	mov	r1, r4
 8000810:	200e      	movs	r0, #14
 8000812:	f000 fb8f 	bl	8000f34 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000816:	200e      	movs	r0, #14
 8000818:	f000 fbc0 	bl	8000f9c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800081c:	4622      	mov	r2, r4
 800081e:	4621      	mov	r1, r4
 8000820:	2010      	movs	r0, #16
 8000822:	f000 fb87 	bl	8000f34 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000826:	2010      	movs	r0, #16
 8000828:	f000 fbb8 	bl	8000f9c <HAL_NVIC_EnableIRQ>
}
 800082c:	b002      	add	sp, #8
 800082e:	bd10      	pop	{r4, pc}
 8000830:	40023800 	.word	0x40023800

08000834 <FifoWrite>:
	fifobuf[fifo_w_ptr] = data;
 8000834:	4a03      	ldr	r2, [pc, #12]	; (8000844 <FifoWrite+0x10>)
 8000836:	7813      	ldrb	r3, [r2, #0]
 8000838:	4903      	ldr	r1, [pc, #12]	; (8000848 <FifoWrite+0x14>)
 800083a:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
	fifo_w_ptr++;
 800083e:	3301      	adds	r3, #1
 8000840:	7013      	strb	r3, [r2, #0]
}
 8000842:	4770      	bx	lr
 8000844:	200004e8 	.word	0x200004e8
 8000848:	200008c8 	.word	0x200008c8

0800084c <FifoRead>:
	uint16_t val = fifobuf[fifo_r_ptr];
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <FifoRead+0x10>)
 800084e:	7853      	ldrb	r3, [r2, #1]
	fifo_r_ptr++;
 8000850:	1c59      	adds	r1, r3, #1
 8000852:	7051      	strb	r1, [r2, #1]
}
 8000854:	4a02      	ldr	r2, [pc, #8]	; (8000860 <FifoRead+0x14>)
 8000856:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800085a:	4770      	bx	lr
 800085c:	200004e8 	.word	0x200004e8
 8000860:	200008c8 	.word	0x200008c8

08000864 <HAL_I2S_TxHalfCpltCallback>:
	txstate = 1;
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <HAL_I2S_TxHalfCpltCallback+0x8>)
 8000866:	2201      	movs	r2, #1
 8000868:	709a      	strb	r2, [r3, #2]
}
 800086a:	4770      	bx	lr
 800086c:	200004e8 	.word	0x200004e8

08000870 <HAL_I2S_TxCpltCallback>:
	txstate = 2;
 8000870:	4b01      	ldr	r3, [pc, #4]	; (8000878 <HAL_I2S_TxCpltCallback+0x8>)
 8000872:	2202      	movs	r2, #2
 8000874:	709a      	strb	r2, [r3, #2]
}
 8000876:	4770      	bx	lr
 8000878:	200004e8 	.word	0x200004e8

0800087c <HAL_I2S_RxHalfCpltCallback>:
	rxstate = 1;
 800087c:	4b01      	ldr	r3, [pc, #4]	; (8000884 <HAL_I2S_RxHalfCpltCallback+0x8>)
 800087e:	2201      	movs	r2, #1
 8000880:	70da      	strb	r2, [r3, #3]
}
 8000882:	4770      	bx	lr
 8000884:	200004e8 	.word	0x200004e8

08000888 <HAL_I2S_RxCpltCallback>:
	rxstate = 2;
 8000888:	4b01      	ldr	r3, [pc, #4]	; (8000890 <HAL_I2S_RxCpltCallback+0x8>)
 800088a:	2202      	movs	r2, #2
 800088c:	70da      	strb	r2, [r3, #3]
}
 800088e:	4770      	bx	lr
 8000890:	200004e8 	.word	0x200004e8

08000894 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000896:	e7fe      	b.n	8000896 <Error_Handler+0x2>

08000898 <MX_I2S2_Init>:
static void MX_I2S2_Init(void) {
 8000898:	b508      	push	{r3, lr}
	hi2s2.Instance = SPI2;
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_I2S2_Init+0x34>)
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_I2S2_Init+0x38>)
 800089e:	6003      	str	r3, [r0, #0]
	hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 80008a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a4:	6043      	str	r3, [r0, #4]
	hi2s2.Init.Standard = I2S_STANDARD_MSB;	//NOTE:Change this if you hear noise
 80008a6:	2310      	movs	r3, #16
 80008a8:	6083      	str	r3, [r0, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80008aa:	2303      	movs	r3, #3
 80008ac:	60c3      	str	r3, [r0, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	6103      	str	r3, [r0, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008b2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008b6:	6142      	str	r2, [r0, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008b8:	6183      	str	r3, [r0, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008ba:	61c3      	str	r3, [r0, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008bc:	6203      	str	r3, [r0, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80008be:	f001 fbaf 	bl	8002020 <HAL_I2S_Init>
 80008c2:	b900      	cbnz	r0, 80008c6 <MX_I2S2_Init+0x2e>
}
 80008c4:	bd08      	pop	{r3, pc}
		Error_Handler();
 80008c6:	f7ff ffe5 	bl	8000894 <Error_Handler>
 80008ca:	bf00      	nop
 80008cc:	20000838 	.word	0x20000838
 80008d0:	40003800 	.word	0x40003800

080008d4 <MX_CRC_Init>:
static void MX_CRC_Init(void) {
 80008d4:	b508      	push	{r3, lr}
	hcrc.Instance = CRC;
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <MX_CRC_Init+0x20>)
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_CRC_Init+0x24>)
 80008da:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80008dc:	f000 fb82 	bl	8000fe4 <HAL_CRC_Init>
 80008e0:	b930      	cbnz	r0, 80008f0 <MX_CRC_Init+0x1c>
	__HAL_CRC_DR_RESET(&hcrc);
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <MX_CRC_Init+0x20>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	6893      	ldr	r3, [r2, #8]
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6093      	str	r3, [r2, #8]
}
 80008ee:	bd08      	pop	{r3, pc}
		Error_Handler();
 80008f0:	f7ff ffd0 	bl	8000894 <Error_Handler>
 80008f4:	2000054c 	.word	0x2000054c
 80008f8:	40023000 	.word	0x40023000

080008fc <MX_I2C1_Init>:
static void MX_I2C1_Init(void) {
 80008fc:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <MX_I2C1_Init+0x2c>)
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_I2C1_Init+0x30>)
 8000902:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_I2C1_Init+0x34>)
 8000906:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000908:	2300      	movs	r3, #0
 800090a:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800090c:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000912:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000916:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000918:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091a:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800091c:	f001 f872 	bl	8001a04 <HAL_I2C_Init>
 8000920:	b900      	cbnz	r0, 8000924 <MX_I2C1_Init+0x28>
}
 8000922:	bd08      	pop	{r3, pc}
		Error_Handler();
 8000924:	f7ff ffb6 	bl	8000894 <Error_Handler>
 8000928:	200004f8 	.word	0x200004f8
 800092c:	40005400 	.word	0x40005400
 8000930:	000186a0 	.word	0x000186a0

08000934 <MX_I2S3_Init>:
static void MX_I2S3_Init(void) {
 8000934:	b508      	push	{r3, lr}
	hi2s3.Instance = SPI3;
 8000936:	480b      	ldr	r0, [pc, #44]	; (8000964 <MX_I2S3_Init+0x30>)
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_I2S3_Init+0x34>)
 800093a:	6003      	str	r3, [r0, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	6042      	str	r2, [r0, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000942:	2300      	movs	r3, #0
 8000944:	6083      	str	r3, [r0, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000946:	2103      	movs	r1, #3
 8000948:	60c1      	str	r1, [r0, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800094a:	6102      	str	r2, [r0, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800094c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000950:	6142      	str	r2, [r0, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000952:	6183      	str	r3, [r0, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000954:	61c3      	str	r3, [r0, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000956:	6203      	str	r3, [r0, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8000958:	f001 fb62 	bl	8002020 <HAL_I2S_Init>
 800095c:	b900      	cbnz	r0, 8000960 <MX_I2S3_Init+0x2c>
}
 800095e:	bd08      	pop	{r3, pc}
		Error_Handler();
 8000960:	f7ff ff98 	bl	8000894 <Error_Handler>
 8000964:	20000880 	.word	0x20000880
 8000968:	40003c00 	.word	0x40003c00

0800096c <SystemClock_Config>:
void SystemClock_Config(void) {
 800096c:	b500      	push	{lr}
 800096e:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000970:	2230      	movs	r2, #48	; 0x30
 8000972:	2100      	movs	r1, #0
 8000974:	a80e      	add	r0, sp, #56	; 0x38
 8000976:	f004 fb39 	bl	8004fec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800097a:	2300      	movs	r3, #0
 800097c:	9309      	str	r3, [sp, #36]	; 0x24
 800097e:	930a      	str	r3, [sp, #40]	; 0x28
 8000980:	930b      	str	r3, [sp, #44]	; 0x2c
 8000982:	930c      	str	r3, [sp, #48]	; 0x30
 8000984:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000986:	9303      	str	r3, [sp, #12]
 8000988:	9304      	str	r3, [sp, #16]
 800098a:	9305      	str	r3, [sp, #20]
 800098c:	9306      	str	r3, [sp, #24]
 800098e:	9307      	str	r3, [sp, #28]
 8000990:	9308      	str	r3, [sp, #32]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	4a26      	ldr	r2, [pc, #152]	; (8000a30 <SystemClock_Config+0xc4>)
 8000996:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000998:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800099c:	6411      	str	r1, [r2, #64]	; 0x40
 800099e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009a0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80009a4:	9201      	str	r2, [sp, #4]
 80009a6:	9a01      	ldr	r2, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <SystemClock_Config+0xc8>)
 80009ac:	6811      	ldr	r1, [r2, #0]
 80009ae:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80009b2:	6011      	str	r1, [r2, #0]
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80009ba:	9202      	str	r2, [sp, #8]
 80009bc:	9a02      	ldr	r2, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009be:	2202      	movs	r2, #2
 80009c0:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c2:	2101      	movs	r1, #1
 80009c4:	9111      	str	r1, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c6:	2110      	movs	r1, #16
 80009c8:	9112      	str	r1, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	9214      	str	r2, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009cc:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 8;
 80009ce:	2308      	movs	r3, #8
 80009d0:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 192;
 80009d2:	22c0      	movs	r2, #192	; 0xc0
 80009d4:	9217      	str	r2, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009d6:	2204      	movs	r2, #4
 80009d8:	9218      	str	r2, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 8;
 80009da:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009dc:	a80e      	add	r0, sp, #56	; 0x38
 80009de:	f001 ff49 	bl	8002874 <HAL_RCC_OscConfig>
 80009e2:	b9f8      	cbnz	r0, 8000a24 <SystemClock_Config+0xb8>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f4:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fa:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80009fc:	2103      	movs	r1, #3
 80009fe:	a809      	add	r0, sp, #36	; 0x24
 8000a00:	f002 f994 	bl	8002d2c <HAL_RCC_ClockConfig>
 8000a04:	b980      	cbnz	r0, 8000a28 <SystemClock_Config+0xbc>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a06:	2301      	movs	r3, #1
 8000a08:	9303      	str	r3, [sp, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000a0a:	2332      	movs	r3, #50	; 0x32
 8000a0c:	9305      	str	r3, [sp, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	9304      	str	r3, [sp, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	9306      	str	r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000a16:	a803      	add	r0, sp, #12
 8000a18:	f002 fa4e 	bl	8002eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000a1c:	b930      	cbnz	r0, 8000a2c <SystemClock_Config+0xc0>
}
 8000a1e:	b01b      	add	sp, #108	; 0x6c
 8000a20:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8000a24:	f7ff ff36 	bl	8000894 <Error_Handler>
		Error_Handler();
 8000a28:	f7ff ff34 	bl	8000894 <Error_Handler>
		Error_Handler();
 8000a2c:	f7ff ff32 	bl	8000894 <Error_Handler>
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40007000 	.word	0x40007000

08000a38 <main>:
int main(void) {
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	b092      	sub	sp, #72	; 0x48
	HAL_Init();
 8000a3c:	f000 fa3c 	bl	8000eb8 <HAL_Init>
	SystemClock_Config();
 8000a40:	f7ff ff94 	bl	800096c <SystemClock_Config>
	MX_GPIO_Init();
 8000a44:	f7ff fe8c 	bl	8000760 <MX_GPIO_Init>
	MX_DMA_Init();
 8000a48:	f7ff fed2 	bl	80007f0 <MX_DMA_Init>
	MX_I2S2_Init();
 8000a4c:	f7ff ff24 	bl	8000898 <MX_I2S2_Init>
	MX_CRC_Init();
 8000a50:	f7ff ff40 	bl	80008d4 <MX_CRC_Init>
	MX_I2C1_Init();
 8000a54:	f7ff ff52 	bl	80008fc <MX_I2C1_Init>
	MX_I2S3_Init();
 8000a58:	f7ff ff6c 	bl	8000934 <MX_I2S3_Init>
	MX_PDM2PCM_Init();
 8000a5c:	f002 fb20 	bl	80030a0 <MX_PDM2PCM_Init>
	CS43_Init(hi2c1, MODE_I2S);
 8000a60:	4c43      	ldr	r4, [pc, #268]	; (8000b70 <main+0x138>)
 8000a62:	2300      	movs	r3, #0
 8000a64:	9311      	str	r3, [sp, #68]	; 0x44
 8000a66:	2244      	movs	r2, #68	; 0x44
 8000a68:	f104 0110 	add.w	r1, r4, #16
 8000a6c:	4668      	mov	r0, sp
 8000a6e:	f004 faaf 	bl	8004fd0 <memcpy>
 8000a72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a76:	f7ff fd57 	bl	8000528 <CS43_Init>
	CS43_SetVolume(60); //0 - 100,, 40
 8000a7a:	203c      	movs	r0, #60	; 0x3c
 8000a7c:	f7ff fe0c 	bl	8000698 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f7ff fde7 	bl	8000654 <CS43_Enable_RightLeft>
	CS43_Start();
 8000a86:	f7ff fe35 	bl	80006f4 <CS43_Start>
	HAL_I2S_Transmit_DMA(&hi2s3, &txBuf[0], 64);
 8000a8a:	2240      	movs	r2, #64	; 0x40
 8000a8c:	4939      	ldr	r1, [pc, #228]	; (8000b74 <main+0x13c>)
 8000a8e:	483a      	ldr	r0, [pc, #232]	; (8000b78 <main+0x140>)
 8000a90:	f001 fb94 	bl	80021bc <HAL_I2S_Transmit_DMA>
	HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0], 64);
 8000a94:	2240      	movs	r2, #64	; 0x40
 8000a96:	4939      	ldr	r1, [pc, #228]	; (8000b7c <main+0x144>)
 8000a98:	4839      	ldr	r0, [pc, #228]	; (8000b80 <main+0x148>)
 8000a9a:	f001 fbfd 	bl	8002298 <HAL_I2S_Receive_DMA>
 8000a9e:	e035      	b.n	8000b0c <main+0xd4>
			PDM_Filter(&pdmRxBuf[0], &MidBuffer[0], &PDM1_filter_handler);
 8000aa0:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <main+0x14c>)
 8000aa2:	4939      	ldr	r1, [pc, #228]	; (8000b88 <main+0x150>)
 8000aa4:	4835      	ldr	r0, [pc, #212]	; (8000b7c <main+0x144>)
 8000aa6:	f004 fa0f 	bl	8004ec8 <PDM_Filter>
			for (int i = 0; i < 16; i++) {
 8000aaa:	2400      	movs	r4, #0
 8000aac:	2c0f      	cmp	r4, #15
 8000aae:	dc06      	bgt.n	8000abe <main+0x86>
				FifoWrite(MidBuffer[i]);
 8000ab0:	4b35      	ldr	r3, [pc, #212]	; (8000b88 <main+0x150>)
 8000ab2:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8000ab6:	f7ff febd 	bl	8000834 <FifoWrite>
			for (int i = 0; i < 16; i++) {
 8000aba:	3401      	adds	r4, #1
 8000abc:	e7f6      	b.n	8000aac <main+0x74>
			if (fifo_w_ptr - fifo_r_ptr > 128)
 8000abe:	4a33      	ldr	r2, [pc, #204]	; (8000b8c <main+0x154>)
 8000ac0:	7813      	ldrb	r3, [r2, #0]
 8000ac2:	7852      	ldrb	r2, [r2, #1]
 8000ac4:	1a9b      	subs	r3, r3, r2
 8000ac6:	2b80      	cmp	r3, #128	; 0x80
 8000ac8:	dd02      	ble.n	8000ad0 <main+0x98>
				fifo_read_enabled = 1;
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <main+0x154>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	711a      	strb	r2, [r3, #4]
			rxstate = 0;
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <main+0x154>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	70da      	strb	r2, [r3, #3]
 8000ad6:	e01d      	b.n	8000b14 <main+0xdc>
			PDM_Filter(&pdmRxBuf[64], &MidBuffer[0], &PDM1_filter_handler);
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <main+0x14c>)
 8000ada:	492b      	ldr	r1, [pc, #172]	; (8000b88 <main+0x150>)
 8000adc:	482c      	ldr	r0, [pc, #176]	; (8000b90 <main+0x158>)
 8000ade:	f004 f9f3 	bl	8004ec8 <PDM_Filter>
			for (int i = 0; i < 16; i++) {
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2c0f      	cmp	r4, #15
 8000ae6:	dc06      	bgt.n	8000af6 <main+0xbe>
				FifoWrite(MidBuffer[i]);
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <main+0x150>)
 8000aea:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8000aee:	f7ff fea1 	bl	8000834 <FifoWrite>
			for (int i = 0; i < 16; i++) {
 8000af2:	3401      	adds	r4, #1
 8000af4:	e7f6      	b.n	8000ae4 <main+0xac>
			rxstate = 0;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <main+0x154>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	70da      	strb	r2, [r3, #3]
 8000afc:	e00e      	b.n	8000b1c <main+0xe4>
			txstate = 0;
 8000afe:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <main+0x154>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	709a      	strb	r2, [r3, #2]
		if (txstate == 2) {
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <main+0x154>)
 8000b06:	789b      	ldrb	r3, [r3, #2]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d01c      	beq.n	8000b46 <main+0x10e>
		if (rxstate == 1) {
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <main+0x154>)
 8000b0e:	78db      	ldrb	r3, [r3, #3]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d0c5      	beq.n	8000aa0 <main+0x68>
		if (rxstate == 2) {
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <main+0x154>)
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d0dd      	beq.n	8000ad8 <main+0xa0>
		if (txstate == 1) {
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <main+0x154>)
 8000b1e:	789b      	ldrb	r3, [r3, #2]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d1ef      	bne.n	8000b04 <main+0xcc>
			if (fifo_read_enabled == 1) {
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <main+0x154>)
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d1e8      	bne.n	8000afe <main+0xc6>
				for (int i = 0; i < 64; i = i + 4) {
 8000b2c:	2400      	movs	r4, #0
 8000b2e:	2c3f      	cmp	r4, #63	; 0x3f
 8000b30:	dce5      	bgt.n	8000afe <main+0xc6>
					uint16_t data = FifoRead();
 8000b32:	f7ff fe8b 	bl	800084c <FifoRead>
					txBuf[i] = data;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <main+0x13c>)
 8000b38:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
					txBuf[i + 2] = data;
 8000b3c:	1ca2      	adds	r2, r4, #2
 8000b3e:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
				for (int i = 0; i < 64; i = i + 4) {
 8000b42:	3404      	adds	r4, #4
 8000b44:	e7f3      	b.n	8000b2e <main+0xf6>
			if (fifo_read_enabled == 1) {
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <main+0x154>)
 8000b48:	791b      	ldrb	r3, [r3, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d003      	beq.n	8000b56 <main+0x11e>
			txstate = 0;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <main+0x154>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	709a      	strb	r2, [r3, #2]
 8000b54:	e7da      	b.n	8000b0c <main+0xd4>
				for (int i = 64; i < 128; i = i + 4) {
 8000b56:	2440      	movs	r4, #64	; 0x40
 8000b58:	2c7f      	cmp	r4, #127	; 0x7f
 8000b5a:	dcf8      	bgt.n	8000b4e <main+0x116>
					uint16_t data = FifoRead();
 8000b5c:	f7ff fe76 	bl	800084c <FifoRead>
					txBuf[i] = data;
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <main+0x13c>)
 8000b62:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
					txBuf[i + 2] = data;
 8000b66:	1ca2      	adds	r2, r4, #2
 8000b68:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
				for (int i = 64; i < 128; i = i + 4) {
 8000b6c:	3404      	adds	r4, #4
 8000b6e:	e7f3      	b.n	8000b58 <main+0x120>
 8000b70:	200004f8 	.word	0x200004f8
 8000b74:	200005b4 	.word	0x200005b4
 8000b78:	20000880 	.word	0x20000880
 8000b7c:	20000734 	.word	0x20000734
 8000b80:	20000838 	.word	0x20000838
 8000b84:	20000b9c 	.word	0x20000b9c
 8000b88:	20000714 	.word	0x20000714
 8000b8c:	200004e8 	.word	0x200004e8
 8000b90:	200007b4 	.word	0x200007b4

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b500      	push	{lr}
 8000b96:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	2100      	movs	r1, #0
 8000b9a:	9100      	str	r1, [sp, #0]
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x3c>)
 8000b9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ba4:	645a      	str	r2, [r3, #68]	; 0x44
 8000ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ba8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bac:	9200      	str	r2, [sp, #0]
 8000bae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	9101      	str	r1, [sp, #4]
 8000bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f000 f9a3 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	b003      	add	sp, #12
 8000bcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000bd4:	6802      	ldr	r2, [r0, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_CRC_MspInit+0x28>)
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d000      	beq.n	8000bde <HAL_CRC_MspInit+0xa>
 8000bdc:	4770      	bx	lr
{
 8000bde:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_CRC_MspInit+0x2c>)
 8000be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000be8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000bf8:	b002      	add	sp, #8
 8000bfa:	4770      	bx	lr
 8000bfc:	40023000 	.word	0x40023000
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c04:	b530      	push	{r4, r5, lr}
 8000c06:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9303      	str	r3, [sp, #12]
 8000c0c:	9304      	str	r3, [sp, #16]
 8000c0e:	9305      	str	r3, [sp, #20]
 8000c10:	9306      	str	r3, [sp, #24]
 8000c12:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000c14:	6802      	ldr	r2, [r0, #0]
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_I2C_MspInit+0x68>)
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d001      	beq.n	8000c20 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c1c:	b009      	add	sp, #36	; 0x24
 8000c1e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	2500      	movs	r5, #0
 8000c22:	9501      	str	r5, [sp, #4]
 8000c24:	4c12      	ldr	r4, [pc, #72]	; (8000c70 <HAL_I2C_MspInit+0x6c>)
 8000c26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6323      	str	r3, [r4, #48]	; 0x30
 8000c2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	9301      	str	r3, [sp, #4]
 8000c36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c38:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3e:	2312      	movs	r3, #18
 8000c40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	a903      	add	r1, sp, #12
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <HAL_I2C_MspInit+0x70>)
 8000c52:	f000 fbe1 	bl	8001418 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c56:	9502      	str	r5, [sp, #8]
 8000c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c5e:	6423      	str	r3, [r4, #64]	; 0x40
 8000c60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	9b02      	ldr	r3, [sp, #8]
}
 8000c6a:	e7d7      	b.n	8000c1c <HAL_I2C_MspInit+0x18>
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020400 	.word	0x40020400

08000c78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	b08d      	sub	sp, #52	; 0x34
 8000c7c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9307      	str	r3, [sp, #28]
 8000c82:	9308      	str	r3, [sp, #32]
 8000c84:	9309      	str	r3, [sp, #36]	; 0x24
 8000c86:	930a      	str	r3, [sp, #40]	; 0x28
 8000c88:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2s->Instance==SPI2)
 8000c8a:	6803      	ldr	r3, [r0, #0]
 8000c8c:	4a59      	ldr	r2, [pc, #356]	; (8000df4 <HAL_I2S_MspInit+0x17c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d004      	beq.n	8000c9c <HAL_I2S_MspInit+0x24>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hi2s->Instance==SPI3)
 8000c92:	4a59      	ldr	r2, [pc, #356]	; (8000df8 <HAL_I2S_MspInit+0x180>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d056      	beq.n	8000d46 <HAL_I2S_MspInit+0xce>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c98:	b00d      	add	sp, #52	; 0x34
 8000c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c9c:	2500      	movs	r5, #0
 8000c9e:	9501      	str	r5, [sp, #4]
 8000ca0:	4b56      	ldr	r3, [pc, #344]	; (8000dfc <HAL_I2S_MspInit+0x184>)
 8000ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8000caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cb0:	9201      	str	r2, [sp, #4]
 8000cb2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	9502      	str	r5, [sp, #8]
 8000cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb8:	f042 0204 	orr.w	r2, r2, #4
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc0:	f002 0204 	and.w	r2, r2, #4
 8000cc4:	9202      	str	r2, [sp, #8]
 8000cc6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	9503      	str	r5, [sp, #12]
 8000cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ccc:	f042 0202 	orr.w	r2, r2, #2
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	9303      	str	r3, [sp, #12]
 8000cda:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2702      	movs	r7, #2
 8000ce2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce8:	2605      	movs	r6, #5
 8000cea:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	a907      	add	r1, sp, #28
 8000cee:	4844      	ldr	r0, [pc, #272]	; (8000e00 <HAL_I2S_MspInit+0x188>)
 8000cf0:	f000 fb92 	bl	8001418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000cf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d00:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	a907      	add	r1, sp, #28
 8000d04:	483f      	ldr	r0, [pc, #252]	; (8000e04 <HAL_I2S_MspInit+0x18c>)
 8000d06:	f000 fb87 	bl	8001418 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000d0a:	483f      	ldr	r0, [pc, #252]	; (8000e08 <HAL_I2S_MspInit+0x190>)
 8000d0c:	4b3f      	ldr	r3, [pc, #252]	; (8000e0c <HAL_I2S_MspInit+0x194>)
 8000d0e:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000d10:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d12:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d14:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1a:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d20:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d26:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2c:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d2e:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d30:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000d32:	f000 f9e7 	bl	8001104 <HAL_DMA_Init>
 8000d36:	b918      	cbnz	r0, 8000d40 <HAL_I2S_MspInit+0xc8>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000d38:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <HAL_I2S_MspInit+0x190>)
 8000d3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000d3c:	639c      	str	r4, [r3, #56]	; 0x38
 8000d3e:	e7ab      	b.n	8000c98 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8000d40:	f7ff fda8 	bl	8000894 <Error_Handler>
 8000d44:	e7f8      	b.n	8000d38 <HAL_I2S_MspInit+0xc0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d46:	2500      	movs	r5, #0
 8000d48:	9504      	str	r5, [sp, #16]
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <HAL_I2S_MspInit+0x184>)
 8000d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d52:	641a      	str	r2, [r3, #64]	; 0x40
 8000d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d56:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000d5a:	9204      	str	r2, [sp, #16]
 8000d5c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	9505      	str	r5, [sp, #20]
 8000d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30
 8000d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d6a:	f002 0201 	and.w	r2, r2, #1
 8000d6e:	9205      	str	r2, [sp, #20]
 8000d70:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	9506      	str	r5, [sp, #24]
 8000d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d76:	f042 0204 	orr.w	r2, r2, #4
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	9306      	str	r3, [sp, #24]
 8000d84:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d86:	2310      	movs	r3, #16
 8000d88:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2702      	movs	r7, #2
 8000d8c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d92:	2606      	movs	r6, #6
 8000d94:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	a907      	add	r1, sp, #28
 8000d98:	481d      	ldr	r0, [pc, #116]	; (8000e10 <HAL_I2S_MspInit+0x198>)
 8000d9a:	f000 fb3d 	bl	8001418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000d9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000da2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000daa:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dac:	a907      	add	r1, sp, #28
 8000dae:	4814      	ldr	r0, [pc, #80]	; (8000e00 <HAL_I2S_MspInit+0x188>)
 8000db0:	f000 fb32 	bl	8001418 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000db4:	4817      	ldr	r0, [pc, #92]	; (8000e14 <HAL_I2S_MspInit+0x19c>)
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_I2S_MspInit+0x1a0>)
 8000db8:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000dba:	6045      	str	r5, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dbc:	2340      	movs	r3, #64	; 0x40
 8000dbe:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	60c5      	str	r5, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc6:	6103      	str	r3, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dcc:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd8:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dda:	6205      	str	r5, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ddc:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000dde:	f000 f991 	bl	8001104 <HAL_DMA_Init>
 8000de2:	b918      	cbnz	r0, 8000dec <HAL_I2S_MspInit+0x174>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_I2S_MspInit+0x19c>)
 8000de6:	63a3      	str	r3, [r4, #56]	; 0x38
 8000de8:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000dea:	e755      	b.n	8000c98 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8000dec:	f7ff fd52 	bl	8000894 <Error_Handler>
 8000df0:	e7f8      	b.n	8000de4 <HAL_I2S_MspInit+0x16c>
 8000df2:	bf00      	nop
 8000df4:	40003800 	.word	0x40003800
 8000df8:	40003c00 	.word	0x40003c00
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020800 	.word	0x40020800
 8000e04:	40020400 	.word	0x40020400
 8000e08:	20000554 	.word	0x20000554
 8000e0c:	40026058 	.word	0x40026058
 8000e10:	40020000 	.word	0x40020000
 8000e14:	200006b4 	.word	0x200006b4
 8000e18:	40026088 	.word	0x40026088

08000e1c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler>

08000e1e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler>

08000e20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler>

08000e22 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler>

08000e24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler>

08000e26 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	4770      	bx	lr

08000e28 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2e:	f000 f85d 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	bd08      	pop	{r3, pc}

08000e34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000e36:	4802      	ldr	r0, [pc, #8]	; (8000e40 <DMA1_Stream3_IRQHandler+0xc>)
 8000e38:	f000 fa00 	bl	800123c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e3c:	bd08      	pop	{r3, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000554 	.word	0x20000554

08000e44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000e46:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA1_Stream5_IRQHandler+0xc>)
 8000e48:	f000 f9f8 	bl	800123c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e4c:	bd08      	pop	{r3, pc}
 8000e4e:	bf00      	nop
 8000e50:	200006b4 	.word	0x200006b4

08000e54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <SystemInit+0x18>)
 8000e56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e66:	609a      	str	r2, [r3, #8]
#endif
}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b510      	push	{r4, lr}
 8000e72:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_InitTick+0x40>)
 8000e76:	7818      	ldrb	r0, [r3, #0]
 8000e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e80:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <HAL_InitTick+0x44>)
 8000e82:	6810      	ldr	r0, [r2, #0]
 8000e84:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e88:	f000 f896 	bl	8000fb8 <HAL_SYSTICK_Config>
 8000e8c:	b968      	cbnz	r0, 8000eaa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	2c0f      	cmp	r4, #15
 8000e90:	d901      	bls.n	8000e96 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000e92:	2001      	movs	r0, #1
 8000e94:	e00a      	b.n	8000eac <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e96:	2200      	movs	r2, #0
 8000e98:	4621      	mov	r1, r4
 8000e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9e:	f000 f849 	bl	8000f34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_InitTick+0x40>)
 8000ea4:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000eaa:	2001      	movs	r0, #1
}
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <HAL_Init>:
{
 8000eb8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x30>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ec2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ed2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f81b 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff ffc8 	bl	8000e70 <HAL_InitTick>
  HAL_MspInit();
 8000ee0:	f7ff fe58 	bl	8000b94 <HAL_MspInit>
}
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	bd08      	pop	{r3, pc}
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x10>)
 8000eee:	6811      	ldr	r1, [r2, #0]
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_IncTick+0x14>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	440b      	add	r3, r1
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000b90 	.word	0x20000b90
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f04:	4b01      	ldr	r3, [pc, #4]	; (8000f0c <HAL_GetTick+0x8>)
 8000f06:	6818      	ldr	r0, [r3, #0]
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000b90 	.word	0x20000b90

08000f10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f12:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	0200      	lsls	r0, r0, #8
 8000f1e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f22:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000f2c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f34:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_NVIC_SetPriority+0x60>)
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3e:	f1c3 0407 	rsb	r4, r3, #7
 8000f42:	2c04      	cmp	r4, #4
 8000f44:	bf28      	it	cs
 8000f46:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f48:	1d1d      	adds	r5, r3, #4
 8000f4a:	2d06      	cmp	r5, #6
 8000f4c:	d918      	bls.n	8000f80 <HAL_NVIC_SetPriority+0x4c>
 8000f4e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 35ff 	mov.w	r5, #4294967295
 8000f54:	fa05 f404 	lsl.w	r4, r5, r4
 8000f58:	ea21 0104 	bic.w	r1, r1, r4
 8000f5c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5e:	fa05 f303 	lsl.w	r3, r5, r3
 8000f62:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f66:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	db0b      	blt.n	8000f84 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	0109      	lsls	r1, r1, #4
 8000f6e:	b2c9      	uxtb	r1, r1
 8000f70:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f74:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f78:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f7c:	bc30      	pop	{r4, r5}
 8000f7e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f80:	2300      	movs	r3, #0
 8000f82:	e7e5      	b.n	8000f50 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	f000 000f 	and.w	r0, r0, #15
 8000f88:	0109      	lsls	r1, r1, #4
 8000f8a:	b2c9      	uxtb	r1, r1
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <HAL_NVIC_SetPriority+0x64>)
 8000f8e:	5419      	strb	r1, [r3, r0]
 8000f90:	e7f4      	b.n	8000f7c <HAL_NVIC_SetPriority+0x48>
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	e000ed14 	.word	0xe000ed14

08000f9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	db07      	blt.n	8000fb0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa0:	f000 021f 	and.w	r2, r0, #31
 8000fa4:	0940      	lsrs	r0, r0, #5
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	4a02      	ldr	r2, [pc, #8]	; (8000fb4 <HAL_NVIC_EnableIRQ+0x18>)
 8000fac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	3801      	subs	r0, #1
 8000fba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fbe:	d20a      	bcs.n	8000fd6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_SYSTICK_Config+0x24>)
 8000fc2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_SYSTICK_Config+0x28>)
 8000fc6:	21f0      	movs	r1, #240	; 0xf0
 8000fc8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	2000      	movs	r0, #0
 8000fce:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fe4:	b158      	cbz	r0, 8000ffe <HAL_CRC_Init+0x1a>
{
 8000fe6:	b510      	push	{r4, lr}
 8000fe8:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fea:	7943      	ldrb	r3, [r0, #5]
 8000fec:	b11b      	cbz	r3, 8000ff6 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8000ff2:	2000      	movs	r0, #0
}
 8000ff4:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000ff6:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8000ff8:	f7ff fdec 	bl	8000bd4 <HAL_CRC_MspInit>
 8000ffc:	e7f7      	b.n	8000fee <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
}
 8001000:	4770      	bx	lr

08001002 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001002:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001004:	6805      	ldr	r5, [r0, #0]
 8001006:	682c      	ldr	r4, [r5, #0]
 8001008:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800100c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800100e:	6804      	ldr	r4, [r0, #0]
 8001010:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001012:	6883      	ldr	r3, [r0, #8]
 8001014:	2b40      	cmp	r3, #64	; 0x40
 8001016:	d005      	beq.n	8001024 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001018:	6803      	ldr	r3, [r0, #0]
 800101a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800101c:	6803      	ldr	r3, [r0, #0]
 800101e:	60da      	str	r2, [r3, #12]
  }
}
 8001020:	bc30      	pop	{r4, r5}
 8001022:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001024:	6803      	ldr	r3, [r0, #0]
 8001026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001028:	6803      	ldr	r3, [r0, #0]
 800102a:	60d9      	str	r1, [r3, #12]
 800102c:	e7f8      	b.n	8001020 <DMA_SetConfig+0x1e>
	...

08001030 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001030:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001032:	6803      	ldr	r3, [r0, #0]
 8001034:	b2d9      	uxtb	r1, r3
 8001036:	3910      	subs	r1, #16
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <DMA_CalcBaseAndBitshift+0x3c>)
 800103a:	fba2 4201 	umull	r4, r2, r2, r1
 800103e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <DMA_CalcBaseAndBitshift+0x40>)
 8001042:	5ca2      	ldrb	r2, [r4, r2]
 8001044:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001046:	295f      	cmp	r1, #95	; 0x5f
 8001048:	d909      	bls.n	800105e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800104a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800104e:	f023 0303 	bic.w	r3, r3, #3
 8001052:	3304      	adds	r3, #4
 8001054:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001056:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800105c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800105e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	6583      	str	r3, [r0, #88]	; 0x58
 8001068:	e7f5      	b.n	8001056 <DMA_CalcBaseAndBitshift+0x26>
 800106a:	bf00      	nop
 800106c:	aaaaaaab 	.word	0xaaaaaaab
 8001070:	08005900 	.word	0x08005900

08001074 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001074:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001076:	6982      	ldr	r2, [r0, #24]
 8001078:	b992      	cbnz	r2, 80010a0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800107a:	2b01      	cmp	r3, #1
 800107c:	d00a      	beq.n	8001094 <DMA_CheckFifoParam+0x20>
 800107e:	2b02      	cmp	r3, #2
 8001080:	d002      	beq.n	8001088 <DMA_CheckFifoParam+0x14>
 8001082:	b10b      	cbz	r3, 8001088 <DMA_CheckFifoParam+0x14>
 8001084:	2000      	movs	r0, #0
 8001086:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001088:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800108a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800108e:	d128      	bne.n	80010e2 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001090:	2000      	movs	r0, #0
 8001092:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001094:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800109a:	d024      	beq.n	80010e6 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800109c:	2000      	movs	r0, #0
 800109e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80010a0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80010a4:	d009      	beq.n	80010ba <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d925      	bls.n	80010f6 <DMA_CheckFifoParam+0x82>
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d125      	bne.n	80010fa <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80010b4:	d123      	bne.n	80010fe <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80010b6:	2000      	movs	r0, #0
 80010b8:	4770      	bx	lr
    switch (tmp)
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d803      	bhi.n	80010c6 <DMA_CheckFifoParam+0x52>
 80010be:	e8df f003 	tbb	[pc, r3]
 80010c2:	0414      	.short	0x0414
 80010c4:	0a14      	.short	0x0a14
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80010c6:	2000      	movs	r0, #0
 80010c8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80010d0:	d10d      	bne.n	80010ee <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80010d2:	2000      	movs	r0, #0
 80010d4:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80010d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80010dc:	d009      	beq.n	80010f2 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2000      	movs	r0, #0
 80010e0:	4770      	bx	lr
        status = HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
 80010e4:	4770      	bx	lr
        status = HAL_ERROR;
 80010e6:	2001      	movs	r0, #1
 80010e8:	4770      	bx	lr
      status = HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
 80010ec:	4770      	bx	lr
        status = HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
 80010f0:	4770      	bx	lr
        status = HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
 80010f4:	4770      	bx	lr
      status = HAL_ERROR;
 80010f6:	2001      	movs	r0, #1
 80010f8:	4770      	bx	lr
    switch (tmp)
 80010fa:	2000      	movs	r0, #0
 80010fc:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80010fe:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001100:	4770      	bx	lr
	...

08001104 <HAL_DMA_Init>:
{
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff fefc 	bl	8000f04 <HAL_GetTick>
  if(hdma == NULL)
 800110c:	2c00      	cmp	r4, #0
 800110e:	d05b      	beq.n	80011c8 <HAL_DMA_Init+0xc4>
 8001110:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8001112:	2300      	movs	r3, #0
 8001114:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001118:	2302      	movs	r3, #2
 800111a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800111e:	6822      	ldr	r2, [r4, #0]
 8001120:	6813      	ldr	r3, [r2, #0]
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f012 0f01 	tst.w	r2, #1
 8001130:	d00a      	beq.n	8001148 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001132:	f7ff fee7 	bl	8000f04 <HAL_GetTick>
 8001136:	1b43      	subs	r3, r0, r5
 8001138:	2b05      	cmp	r3, #5
 800113a:	d9f5      	bls.n	8001128 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800113c:	2320      	movs	r3, #32
 800113e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001140:	2003      	movs	r0, #3
 8001142:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001146:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001148:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800114a:	4820      	ldr	r0, [pc, #128]	; (80011cc <HAL_DMA_Init+0xc8>)
 800114c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800114e:	6861      	ldr	r1, [r4, #4]
 8001150:	68a2      	ldr	r2, [r4, #8]
 8001152:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001154:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001156:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001158:	6921      	ldr	r1, [r4, #16]
 800115a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001160:	69a1      	ldr	r1, [r4, #24]
 8001162:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001164:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001166:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001168:	6a21      	ldr	r1, [r4, #32]
 800116a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800116c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800116e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001170:	2904      	cmp	r1, #4
 8001172:	d01e      	beq.n	80011b2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001174:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001176:	6826      	ldr	r6, [r4, #0]
 8001178:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800117a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800117e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001180:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001182:	2b04      	cmp	r3, #4
 8001184:	d107      	bne.n	8001196 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001188:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800118a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800118c:	b11b      	cbz	r3, 8001196 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800118e:	4620      	mov	r0, r4
 8001190:	f7ff ff70 	bl	8001074 <DMA_CheckFifoParam>
 8001194:	b990      	cbnz	r0, 80011bc <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001196:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff ff49 	bl	8001030 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800119e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011a0:	233f      	movs	r3, #63	; 0x3f
 80011a2:	4093      	lsls	r3, r2
 80011a4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011a6:	2000      	movs	r0, #0
 80011a8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80011b0:	e7c9      	b.n	8001146 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80011b6:	4301      	orrs	r1, r0
 80011b8:	430a      	orrs	r2, r1
 80011ba:	e7db      	b.n	8001174 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011bc:	2340      	movs	r3, #64	; 0x40
 80011be:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80011c0:	2001      	movs	r0, #1
 80011c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80011c6:	e7be      	b.n	8001146 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
 80011ca:	e7bc      	b.n	8001146 <HAL_DMA_Init+0x42>
 80011cc:	f010803f 	.word	0xf010803f

080011d0 <HAL_DMA_Start_IT>:
{
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80011d6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80011da:	2801      	cmp	r0, #1
 80011dc:	d02b      	beq.n	8001236 <HAL_DMA_Start_IT+0x66>
 80011de:	2001      	movs	r0, #1
 80011e0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80011e4:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 80011e8:	b2c0      	uxtb	r0, r0
 80011ea:	2801      	cmp	r0, #1
 80011ec:	d004      	beq.n	80011f8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80011ee:	2300      	movs	r3, #0
 80011f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80011f4:	2002      	movs	r0, #2
}
 80011f6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f8:	2002      	movs	r0, #2
 80011fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fe:	2000      	movs	r0, #0
 8001200:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001202:	4620      	mov	r0, r4
 8001204:	f7ff fefd 	bl	8001002 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001208:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800120a:	233f      	movs	r3, #63	; 0x3f
 800120c:	4093      	lsls	r3, r2
 800120e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001210:	6822      	ldr	r2, [r4, #0]
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f043 0316 	orr.w	r3, r3, #22
 8001218:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800121a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800121c:	b123      	cbz	r3, 8001228 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800121e:	6822      	ldr	r2, [r4, #0]
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001228:	6822      	ldr	r2, [r4, #0]
 800122a:	6813      	ldr	r3, [r2, #0]
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001232:	2000      	movs	r0, #0
 8001234:	e7df      	b.n	80011f6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001236:	2002      	movs	r0, #2
 8001238:	e7dd      	b.n	80011f6 <HAL_DMA_Start_IT+0x26>
	...

0800123c <HAL_DMA_IRQHandler>:
{
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	b083      	sub	sp, #12
 8001240:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <HAL_DMA_IRQHandler+0x1d4>)
 8001248:	681d      	ldr	r5, [r3, #0]
 800124a:	4b72      	ldr	r3, [pc, #456]	; (8001414 <HAL_DMA_IRQHandler+0x1d8>)
 800124c:	fba3 3505 	umull	r3, r5, r3, r5
 8001250:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001252:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001254:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001256:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001258:	2308      	movs	r3, #8
 800125a:	4093      	lsls	r3, r2
 800125c:	4233      	tst	r3, r6
 800125e:	d010      	beq.n	8001282 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001260:	6803      	ldr	r3, [r0, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f012 0f04 	tst.w	r2, #4
 8001268:	d00b      	beq.n	8001282 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	f022 0204 	bic.w	r2, r2, #4
 8001270:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001272:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001274:	2308      	movs	r3, #8
 8001276:	4093      	lsls	r3, r2
 8001278:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800127a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001282:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001284:	2301      	movs	r3, #1
 8001286:	4093      	lsls	r3, r2
 8001288:	4233      	tst	r3, r6
 800128a:	d009      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	6952      	ldr	r2, [r2, #20]
 8001290:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001294:	d004      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001296:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001298:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012a2:	2304      	movs	r3, #4
 80012a4:	4093      	lsls	r3, r2
 80012a6:	4233      	tst	r3, r6
 80012a8:	d009      	beq.n	80012be <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012aa:	6822      	ldr	r2, [r4, #0]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f012 0f02 	tst.w	r2, #2
 80012b2:	d004      	beq.n	80012be <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012b4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012c0:	2310      	movs	r3, #16
 80012c2:	4093      	lsls	r3, r2
 80012c4:	4233      	tst	r3, r6
 80012c6:	d024      	beq.n	8001312 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012c8:	6822      	ldr	r2, [r4, #0]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	f012 0f08 	tst.w	r2, #8
 80012d0:	d01f      	beq.n	8001312 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012d2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80012dc:	d00d      	beq.n	80012fa <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80012e4:	d104      	bne.n	80012f0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80012e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e8:	b19b      	cbz	r3, 8001312 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80012ea:	4620      	mov	r0, r4
 80012ec:	4798      	blx	r3
 80012ee:	e010      	b.n	8001312 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012f2:	b173      	cbz	r3, 8001312 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80012f4:	4620      	mov	r0, r4
 80012f6:	4798      	blx	r3
 80012f8:	e00b      	b.n	8001312 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001300:	d103      	bne.n	800130a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	f022 0208 	bic.w	r2, r2, #8
 8001308:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800130a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130c:	b10b      	cbz	r3, 8001312 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800130e:	4620      	mov	r0, r4
 8001310:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001312:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001314:	2320      	movs	r3, #32
 8001316:	4093      	lsls	r3, r2
 8001318:	4233      	tst	r3, r6
 800131a:	d055      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800131c:	6822      	ldr	r2, [r4, #0]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	f012 0f10 	tst.w	r2, #16
 8001324:	d050      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001326:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001328:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b05      	cmp	r3, #5
 8001330:	d00e      	beq.n	8001350 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800133a:	d033      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001342:	d12a      	bne.n	800139a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001344:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001346:	2b00      	cmp	r3, #0
 8001348:	d03e      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800134a:	4620      	mov	r0, r4
 800134c:	4798      	blx	r3
 800134e:	e03b      	b.n	80013c8 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	6813      	ldr	r3, [r2, #0]
 8001354:	f023 0316 	bic.w	r3, r3, #22
 8001358:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800135a:	6822      	ldr	r2, [r4, #0]
 800135c:	6953      	ldr	r3, [r2, #20]
 800135e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001362:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001366:	b1a3      	cbz	r3, 8001392 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001368:	6822      	ldr	r2, [r4, #0]
 800136a:	6813      	ldr	r3, [r2, #0]
 800136c:	f023 0308 	bic.w	r3, r3, #8
 8001370:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001372:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001374:	233f      	movs	r3, #63	; 0x3f
 8001376:	4093      	lsls	r3, r2
 8001378:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800137a:	2300      	movs	r3, #0
 800137c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001380:	2301      	movs	r3, #1
 8001382:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001386:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001388:	2b00      	cmp	r3, #0
 800138a:	d03f      	beq.n	800140c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800138c:	4620      	mov	r0, r4
 800138e:	4798      	blx	r3
        return;
 8001390:	e03c      	b.n	800140c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001392:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e7      	bne.n	8001368 <HAL_DMA_IRQHandler+0x12c>
 8001398:	e7eb      	b.n	8001372 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800139a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800139c:	b1a3      	cbz	r3, 80013c8 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800139e:	4620      	mov	r0, r4
 80013a0:	4798      	blx	r3
 80013a2:	e011      	b.n	80013c8 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80013aa:	d109      	bne.n	80013c0 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	f022 0210 	bic.w	r2, r2, #16
 80013b2:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80013b4:	2300      	movs	r3, #0
 80013b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80013c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013c2:	b10b      	cbz	r3, 80013c8 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80013c4:	4620      	mov	r0, r4
 80013c6:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013ca:	b1fb      	cbz	r3, 800140c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013ce:	f013 0f01 	tst.w	r3, #1
 80013d2:	d017      	beq.n	8001404 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80013d4:	2305      	movs	r3, #5
 80013d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013da:	6822      	ldr	r2, [r4, #0]
 80013dc:	6813      	ldr	r3, [r2, #0]
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80013e4:	9b01      	ldr	r3, [sp, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	42ab      	cmp	r3, r5
 80013ec:	d804      	bhi.n	80013f8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f013 0f01 	tst.w	r3, #1
 80013f6:	d1f5      	bne.n	80013e4 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80013f8:	2300      	movs	r3, #0
 80013fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80013fe:	2301      	movs	r3, #1
 8001400:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001404:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001406:	b10b      	cbz	r3, 800140c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001408:	4620      	mov	r0, r4
 800140a:	4798      	blx	r3
}
 800140c:	b003      	add	sp, #12
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	1b4e81b5 	.word	0x1b4e81b5

08001418 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001418:	2300      	movs	r3, #0
 800141a:	2b0f      	cmp	r3, #15
 800141c:	f200 80c7 	bhi.w	80015ae <HAL_GPIO_Init+0x196>
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	e039      	b.n	800149a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001426:	2204      	movs	r2, #4
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x14>
 800142a:	2200      	movs	r2, #0
 800142c:	40b2      	lsls	r2, r6
 800142e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001430:	3402      	adds	r4, #2
 8001432:	4e5f      	ldr	r6, [pc, #380]	; (80015b0 <HAL_GPIO_Init+0x198>)
 8001434:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001438:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <HAL_GPIO_Init+0x19c>)
 800143a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800143c:	43ea      	mvns	r2, r5
 800143e:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001442:	684f      	ldr	r7, [r1, #4]
 8001444:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001448:	d001      	beq.n	800144e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 800144a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 800144e:	4c59      	ldr	r4, [pc, #356]	; (80015b4 <HAL_GPIO_Init+0x19c>)
 8001450:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001452:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001454:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	684f      	ldr	r7, [r1, #4]
 800145a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800145e:	d001      	beq.n	8001464 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001460:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001464:	4c53      	ldr	r4, [pc, #332]	; (80015b4 <HAL_GPIO_Init+0x19c>)
 8001466:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001468:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800146a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800146e:	684f      	ldr	r7, [r1, #4]
 8001470:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001474:	d001      	beq.n	800147a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001476:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800147a:	4c4e      	ldr	r4, [pc, #312]	; (80015b4 <HAL_GPIO_Init+0x19c>)
 800147c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800147e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001480:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001482:	684e      	ldr	r6, [r1, #4]
 8001484:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001488:	d001      	beq.n	800148e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800148a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800148e:	4c49      	ldr	r4, [pc, #292]	; (80015b4 <HAL_GPIO_Init+0x19c>)
 8001490:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	3301      	adds	r3, #1
 8001494:	2b0f      	cmp	r3, #15
 8001496:	f200 8088 	bhi.w	80015aa <HAL_GPIO_Init+0x192>
    ioposition = 0x01U << position;
 800149a:	2201      	movs	r2, #1
 800149c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149e:	680c      	ldr	r4, [r1, #0]
 80014a0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80014a4:	ea32 0404 	bics.w	r4, r2, r4
 80014a8:	d1f3      	bne.n	8001492 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014aa:	684c      	ldr	r4, [r1, #4]
 80014ac:	1e66      	subs	r6, r4, #1
 80014ae:	2e01      	cmp	r6, #1
 80014b0:	d903      	bls.n	80014ba <HAL_GPIO_Init+0xa2>
 80014b2:	2c11      	cmp	r4, #17
 80014b4:	d001      	beq.n	80014ba <HAL_GPIO_Init+0xa2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b6:	2c12      	cmp	r4, #18
 80014b8:	d112      	bne.n	80014e0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->OSPEEDR; 
 80014ba:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014bc:	005f      	lsls	r7, r3, #1
 80014be:	2403      	movs	r4, #3
 80014c0:	40bc      	lsls	r4, r7
 80014c2:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c6:	68cc      	ldr	r4, [r1, #12]
 80014c8:	40bc      	lsls	r4, r7
 80014ca:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80014cc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80014ce:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d0:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014d4:	684c      	ldr	r4, [r1, #4]
 80014d6:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80014de:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80014e0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e2:	005e      	lsls	r6, r3, #1
 80014e4:	2403      	movs	r4, #3
 80014e6:	40b4      	lsls	r4, r6
 80014e8:	43e2      	mvns	r2, r4
 80014ea:	ea27 0704 	bic.w	r7, r7, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ee:	688c      	ldr	r4, [r1, #8]
 80014f0:	40b4      	lsls	r4, r6
 80014f2:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80014f4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f6:	684c      	ldr	r4, [r1, #4]
 80014f8:	2c02      	cmp	r4, #2
 80014fa:	d001      	beq.n	8001500 <HAL_GPIO_Init+0xe8>
 80014fc:	2c12      	cmp	r4, #18
 80014fe:	d113      	bne.n	8001528 <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3U];
 8001500:	08df      	lsrs	r7, r3, #3
 8001502:	3708      	adds	r7, #8
 8001504:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001508:	f003 0407 	and.w	r4, r3, #7
 800150c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001510:	240f      	movs	r4, #15
 8001512:	fa04 f40c 	lsl.w	r4, r4, ip
 8001516:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800151a:	690c      	ldr	r4, [r1, #16]
 800151c:	fa04 f40c 	lsl.w	r4, r4, ip
 8001520:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001524:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001528:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152a:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152c:	684a      	ldr	r2, [r1, #4]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	40b2      	lsls	r2, r6
 8001534:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001536:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001538:	684a      	ldr	r2, [r1, #4]
 800153a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800153e:	d0a8      	beq.n	8001492 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001540:	2200      	movs	r2, #0
 8001542:	9201      	str	r2, [sp, #4]
 8001544:	4a1c      	ldr	r2, [pc, #112]	; (80015b8 <HAL_GPIO_Init+0x1a0>)
 8001546:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001548:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800154c:	6454      	str	r4, [r2, #68]	; 0x44
 800154e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001550:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001554:	9201      	str	r2, [sp, #4]
 8001556:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001558:	089c      	lsrs	r4, r3, #2
 800155a:	1ca6      	adds	r6, r4, #2
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_GPIO_Init+0x198>)
 800155e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001562:	f003 0203 	and.w	r2, r3, #3
 8001566:	0096      	lsls	r6, r2, #2
 8001568:	220f      	movs	r2, #15
 800156a:	40b2      	lsls	r2, r6
 800156c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001570:	4a12      	ldr	r2, [pc, #72]	; (80015bc <HAL_GPIO_Init+0x1a4>)
 8001572:	4290      	cmp	r0, r2
 8001574:	f43f af59 	beq.w	800142a <HAL_GPIO_Init+0x12>
 8001578:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800157c:	4290      	cmp	r0, r2
 800157e:	d00e      	beq.n	800159e <HAL_GPIO_Init+0x186>
 8001580:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001584:	4290      	cmp	r0, r2
 8001586:	d00c      	beq.n	80015a2 <HAL_GPIO_Init+0x18a>
 8001588:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800158c:	4290      	cmp	r0, r2
 800158e:	d00a      	beq.n	80015a6 <HAL_GPIO_Init+0x18e>
 8001590:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001594:	4290      	cmp	r0, r2
 8001596:	f43f af46 	beq.w	8001426 <HAL_GPIO_Init+0xe>
 800159a:	2207      	movs	r2, #7
 800159c:	e746      	b.n	800142c <HAL_GPIO_Init+0x14>
 800159e:	2201      	movs	r2, #1
 80015a0:	e744      	b.n	800142c <HAL_GPIO_Init+0x14>
 80015a2:	2202      	movs	r2, #2
 80015a4:	e742      	b.n	800142c <HAL_GPIO_Init+0x14>
 80015a6:	2203      	movs	r2, #3
 80015a8:	e740      	b.n	800142c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80015aa:	b003      	add	sp, #12
 80015ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ae:	4770      	bx	lr
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40013c00 	.word	0x40013c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000

080015c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	b10a      	cbz	r2, 80015c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	6181      	str	r1, [r0, #24]
 80015c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c6:	0409      	lsls	r1, r1, #16
 80015c8:	6181      	str	r1, [r0, #24]
  }
}
 80015ca:	4770      	bx	lr

080015cc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015cc:	6803      	ldr	r3, [r0, #0]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80015d4:	d101      	bne.n	80015da <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80015d6:	2000      	movs	r0, #0
}
 80015d8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015de:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80015e4:	2220      	movs	r2, #32
 80015e6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80015f0:	f042 0204 	orr.w	r2, r2, #4
 80015f4:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80015f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80015fa:	2001      	movs	r0, #1
 80015fc:	4770      	bx	lr

080015fe <I2C_WaitOnFlagUntilTimeout>:
{
 80015fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001602:	4607      	mov	r7, r0
 8001604:	460d      	mov	r5, r1
 8001606:	4690      	mov	r8, r2
 8001608:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160a:	e022      	b.n	8001652 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800160c:	f7ff fc7a 	bl	8000f04 <HAL_GetTick>
 8001610:	9b06      	ldr	r3, [sp, #24]
 8001612:	1ac0      	subs	r0, r0, r3
 8001614:	42b0      	cmp	r0, r6
 8001616:	d800      	bhi.n	800161a <I2C_WaitOnFlagUntilTimeout+0x1c>
 8001618:	b9de      	cbnz	r6, 8001652 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800161a:	2300      	movs	r3, #0
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800161e:	2220      	movs	r2, #32
 8001620:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001624:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800162a:	f042 0220 	orr.w	r2, r2, #32
 800162e:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001630:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8001634:	2001      	movs	r0, #1
 8001636:	e01a      	b.n	800166e <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	699c      	ldr	r4, [r3, #24]
 800163c:	ea25 0404 	bic.w	r4, r5, r4
 8001640:	b2a4      	uxth	r4, r4
 8001642:	fab4 f484 	clz	r4, r4
 8001646:	0964      	lsrs	r4, r4, #5
 8001648:	45a0      	cmp	r8, r4
 800164a:	d10f      	bne.n	800166c <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 800164c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8001650:	d1dc      	bne.n	800160c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001652:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001656:	2b01      	cmp	r3, #1
 8001658:	d1ee      	bne.n	8001638 <I2C_WaitOnFlagUntilTimeout+0x3a>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	695c      	ldr	r4, [r3, #20]
 800165e:	ea25 0404 	bic.w	r4, r5, r4
 8001662:	b2a4      	uxth	r4, r4
 8001664:	fab4 f484 	clz	r4, r4
 8001668:	0964      	lsrs	r4, r4, #5
 800166a:	e7ed      	b.n	8001648 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 800166c:	2000      	movs	r0, #0
}
 800166e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001676:	4605      	mov	r5, r0
 8001678:	460e      	mov	r6, r1
 800167a:	4617      	mov	r7, r2
 800167c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800167e:	e03d      	b.n	80016fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001686:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800168e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001690:	2300      	movs	r3, #0
 8001692:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001694:	2220      	movs	r2, #32
 8001696:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800169a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800169e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80016a0:	f042 0204 	orr.w	r2, r2, #4
 80016a4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80016a6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80016aa:	2001      	movs	r0, #1
 80016ac:	e034      	b.n	8001718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ae:	f7ff fc29 	bl	8000f04 <HAL_GetTick>
 80016b2:	eba0 0008 	sub.w	r0, r0, r8
 80016b6:	42b8      	cmp	r0, r7
 80016b8:	d800      	bhi.n	80016bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80016ba:	b9ff      	cbnz	r7, 80016fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016bc:	2300      	movs	r3, #0
 80016be:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016c0:	2220      	movs	r2, #32
 80016c2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016c6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016ca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80016cc:	f042 0220 	orr.w	r2, r2, #32
 80016d0:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80016d2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
 80016d8:	e01e      	b.n	8001718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	699c      	ldr	r4, [r3, #24]
 80016de:	ea26 0404 	bic.w	r4, r6, r4
 80016e2:	b2a4      	uxth	r4, r4
 80016e4:	3c00      	subs	r4, #0
 80016e6:	bf18      	it	ne
 80016e8:	2401      	movne	r4, #1
 80016ea:	b1a4      	cbz	r4, 8001716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016ec:	682b      	ldr	r3, [r5, #0]
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80016f4:	d1c4      	bne.n	8001680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80016f6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80016fa:	d1d8      	bne.n	80016ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016fc:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8001700:	2b01      	cmp	r3, #1
 8001702:	d1ea      	bne.n	80016da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	695c      	ldr	r4, [r3, #20]
 8001708:	ea26 0404 	bic.w	r4, r6, r4
 800170c:	b2a4      	uxth	r4, r4
 800170e:	3c00      	subs	r4, #0
 8001710:	bf18      	it	ne
 8001712:	2401      	movne	r4, #1
 8001714:	e7e9      	b.n	80016ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8001716:	2000      	movs	r0, #0
}
 8001718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800171c <I2C_MasterRequestWrite>:
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b083      	sub	sp, #12
 8001720:	4604      	mov	r4, r0
 8001722:	460d      	mov	r5, r1
 8001724:	4616      	mov	r6, r2
 8001726:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001728:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800172a:	2b08      	cmp	r3, #8
 800172c:	d00d      	beq.n	800174a <I2C_MasterRequestWrite+0x2e>
 800172e:	2b01      	cmp	r3, #1
 8001730:	d00b      	beq.n	800174a <I2C_MasterRequestWrite+0x2e>
 8001732:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001736:	d008      	beq.n	800174a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001738:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800173a:	2b12      	cmp	r3, #18
 800173c:	d10a      	bne.n	8001754 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800173e:	6802      	ldr	r2, [r0, #0]
 8001740:	6813      	ldr	r3, [r2, #0]
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	e004      	b.n	8001754 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800174a:	6822      	ldr	r2, [r4, #0]
 800174c:	6813      	ldr	r3, [r2, #0]
 800174e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001752:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001754:	9700      	str	r7, [sp, #0]
 8001756:	4633      	mov	r3, r6
 8001758:	2200      	movs	r2, #0
 800175a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff ff4d 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001764:	b980      	cbnz	r0, 8001788 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001766:	6923      	ldr	r3, [r4, #16]
 8001768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800176c:	d116      	bne.n	800179c <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001774:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	4632      	mov	r2, r6
 800177a:	4913      	ldr	r1, [pc, #76]	; (80017c8 <I2C_MasterRequestWrite+0xac>)
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff ff78 	bl	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001782:	b9f8      	cbnz	r0, 80017c4 <I2C_MasterRequestWrite+0xa8>
}
 8001784:	b003      	add	sp, #12
 8001786:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001790:	d002      	beq.n	8001798 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001796:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8001798:	2003      	movs	r0, #3
 800179a:	e7f3      	b.n	8001784 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800179c:	11eb      	asrs	r3, r5, #7
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80017a8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017aa:	463b      	mov	r3, r7
 80017ac:	4632      	mov	r2, r6
 80017ae:	4907      	ldr	r1, [pc, #28]	; (80017cc <I2C_MasterRequestWrite+0xb0>)
 80017b0:	4620      	mov	r0, r4
 80017b2:	f7ff ff5e 	bl	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017b6:	b918      	cbnz	r0, 80017c0 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	b2ed      	uxtb	r5, r5
 80017bc:	611d      	str	r5, [r3, #16]
 80017be:	e7da      	b.n	8001776 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	e7df      	b.n	8001784 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
 80017c6:	e7dd      	b.n	8001784 <I2C_MasterRequestWrite+0x68>
 80017c8:	00010002 	.word	0x00010002
 80017cc:	00010008 	.word	0x00010008

080017d0 <I2C_MasterRequestRead>:
{
 80017d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	4604      	mov	r4, r0
 80017d8:	460d      	mov	r5, r1
 80017da:	4616      	mov	r6, r2
 80017dc:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017de:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017e0:	6801      	ldr	r1, [r0, #0]
 80017e2:	680b      	ldr	r3, [r1, #0]
 80017e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e8:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017ea:	2a08      	cmp	r2, #8
 80017ec:	d00d      	beq.n	800180a <I2C_MasterRequestRead+0x3a>
 80017ee:	2a01      	cmp	r2, #1
 80017f0:	d00b      	beq.n	800180a <I2C_MasterRequestRead+0x3a>
 80017f2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80017f6:	d008      	beq.n	800180a <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80017f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80017fa:	2b11      	cmp	r3, #17
 80017fc:	d10a      	bne.n	8001814 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017fe:	6802      	ldr	r2, [r0, #0]
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e004      	b.n	8001814 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800180a:	6822      	ldr	r2, [r4, #0]
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001814:	9700      	str	r7, [sp, #0]
 8001816:	4633      	mov	r3, r6
 8001818:	2200      	movs	r2, #0
 800181a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff feed 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001824:	b998      	cbnz	r0, 800184e <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001826:	6923      	ldr	r3, [r4, #16]
 8001828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800182c:	d119      	bne.n	8001862 <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	f045 0501 	orr.w	r5, r5, #1
 8001834:	b2ed      	uxtb	r5, r5
 8001836:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	4632      	mov	r2, r6
 800183c:	492a      	ldr	r1, [pc, #168]	; (80018e8 <I2C_MasterRequestRead+0x118>)
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff ff17 	bl	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001844:	2800      	cmp	r0, #0
 8001846:	d14c      	bne.n	80018e2 <I2C_MasterRequestRead+0x112>
}
 8001848:	b004      	add	sp, #16
 800184a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001856:	d002      	beq.n	800185e <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800185e:	2003      	movs	r0, #3
 8001860:	e7f2      	b.n	8001848 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001862:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001866:	f008 0806 	and.w	r8, r8, #6
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001870:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4632      	mov	r2, r6
 8001876:	491d      	ldr	r1, [pc, #116]	; (80018ec <I2C_MasterRequestRead+0x11c>)
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff fefa 	bl	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800187e:	b108      	cbz	r0, 8001884 <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 8001880:	2001      	movs	r0, #1
 8001882:	e7e1      	b.n	8001848 <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	b2ed      	uxtb	r5, r5
 8001888:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800188a:	463b      	mov	r3, r7
 800188c:	4632      	mov	r2, r6
 800188e:	4916      	ldr	r1, [pc, #88]	; (80018e8 <I2C_MasterRequestRead+0x118>)
 8001890:	4620      	mov	r0, r4
 8001892:	f7ff feee 	bl	8001672 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001896:	b108      	cbz	r0, 800189c <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 8001898:	2001      	movs	r0, #1
 800189a:	e7d5      	b.n	8001848 <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189c:	2200      	movs	r2, #0
 800189e:	9203      	str	r2, [sp, #12]
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	6959      	ldr	r1, [r3, #20]
 80018a4:	9103      	str	r1, [sp, #12]
 80018a6:	6999      	ldr	r1, [r3, #24]
 80018a8:	9103      	str	r1, [sp, #12]
 80018aa:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80018b2:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018b4:	9700      	str	r7, [sp, #0]
 80018b6:	4633      	mov	r3, r6
 80018b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff fe9e 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 80018c2:	b920      	cbnz	r0, 80018ce <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80018ca:	6113      	str	r3, [r2, #16]
 80018cc:	e7b4      	b.n	8001838 <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018d6:	d002      	beq.n	80018de <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018dc:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 80018de:	2003      	movs	r0, #3
 80018e0:	e7b2      	b.n	8001848 <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 80018e2:	2001      	movs	r0, #1
 80018e4:	e7b0      	b.n	8001848 <I2C_MasterRequestRead+0x78>
 80018e6:	bf00      	nop
 80018e8:	00010002 	.word	0x00010002
 80018ec:	00010008 	.word	0x00010008

080018f0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	4604      	mov	r4, r0
 80018f4:	460d      	mov	r5, r1
 80018f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001900:	d11c      	bne.n	800193c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff fe62 	bl	80015cc <I2C_IsAcknowledgeFailed>
 8001908:	b9d0      	cbnz	r0, 8001940 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800190a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800190e:	d0f3      	beq.n	80018f8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001910:	f7ff faf8 	bl	8000f04 <HAL_GetTick>
 8001914:	1b80      	subs	r0, r0, r6
 8001916:	42a8      	cmp	r0, r5
 8001918:	d801      	bhi.n	800191e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800191a:	2d00      	cmp	r5, #0
 800191c:	d1ec      	bne.n	80018f8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001922:	2220      	movs	r2, #32
 8001924:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001928:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800192c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800192e:	f042 0220 	orr.w	r2, r2, #32
 8001932:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001934:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001938:	2001      	movs	r0, #1
 800193a:	e000      	b.n	800193e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800193c:	2000      	movs	r0, #0
}
 800193e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
 8001942:	e7fc      	b.n	800193e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08001944 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001944:	b570      	push	{r4, r5, r6, lr}
 8001946:	4604      	mov	r4, r0
 8001948:	460d      	mov	r5, r1
 800194a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f013 0f04 	tst.w	r3, #4
 8001954:	d11c      	bne.n	8001990 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001956:	4620      	mov	r0, r4
 8001958:	f7ff fe38 	bl	80015cc <I2C_IsAcknowledgeFailed>
 800195c:	b9d0      	cbnz	r0, 8001994 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800195e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001962:	d0f3      	beq.n	800194c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001964:	f7ff face 	bl	8000f04 <HAL_GetTick>
 8001968:	1b80      	subs	r0, r0, r6
 800196a:	42a8      	cmp	r0, r5
 800196c:	d801      	bhi.n	8001972 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800196e:	2d00      	cmp	r5, #0
 8001970:	d1ec      	bne.n	800194c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001972:	2300      	movs	r3, #0
 8001974:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001976:	2220      	movs	r2, #32
 8001978:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800197c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001980:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001982:	f042 0220 	orr.w	r2, r2, #32
 8001986:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001988:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800198c:	2001      	movs	r0, #1
 800198e:	e000      	b.n	8001992 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001990:	2000      	movs	r0, #0
}
 8001992:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001994:	2001      	movs	r0, #1
 8001996:	e7fc      	b.n	8001992 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08001998 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001998:	b570      	push	{r4, r5, r6, lr}
 800199a:	4605      	mov	r5, r0
 800199c:	460c      	mov	r4, r1
 800199e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019a0:	682b      	ldr	r3, [r5, #0]
 80019a2:	6959      	ldr	r1, [r3, #20]
 80019a4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80019a8:	d129      	bne.n	80019fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019aa:	6959      	ldr	r1, [r3, #20]
 80019ac:	f011 0f10 	tst.w	r1, #16
 80019b0:	d115      	bne.n	80019de <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b2:	f7ff faa7 	bl	8000f04 <HAL_GetTick>
 80019b6:	1b80      	subs	r0, r0, r6
 80019b8:	42a0      	cmp	r0, r4
 80019ba:	d801      	bhi.n	80019c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80019bc:	2c00      	cmp	r4, #0
 80019be:	d1ef      	bne.n	80019a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019c4:	2220      	movs	r2, #32
 80019c6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ca:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019ce:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80019d0:	f042 0220 	orr.w	r2, r2, #32
 80019d4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80019d6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
}
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019de:	f06f 0210 	mvn.w	r2, #16
 80019e2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019e8:	2220      	movs	r2, #32
 80019ea:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ee:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80019f2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80019f4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80019f6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
 80019fc:	e7ee      	b.n	80019dc <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 80019fe:	2000      	movs	r0, #0
 8001a00:	e7ec      	b.n	80019dc <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08001a04 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001a04:	2800      	cmp	r0, #0
 8001a06:	f000 80cc 	beq.w	8001ba2 <HAL_I2C_Init+0x19e>
{
 8001a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d077      	beq.n	8001b06 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a16:	2324      	movs	r3, #36	; 0x24
 8001a18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a26:	6822      	ldr	r2, [r4, #0]
 8001a28:	6813      	ldr	r3, [r2, #0]
 8001a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a30:	6822      	ldr	r2, [r4, #0]
 8001a32:	6813      	ldr	r3, [r2, #0]
 8001a34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a38:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a3a:	f001 fa2d 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a3e:	6862      	ldr	r2, [r4, #4]
 8001a40:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <HAL_I2C_Init+0x1a8>)
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d864      	bhi.n	8001b10 <HAL_I2C_Init+0x10c>
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_I2C_Init+0x1ac>)
 8001a48:	4298      	cmp	r0, r3
 8001a4a:	bf8c      	ite	hi
 8001a4c:	2300      	movhi	r3, #0
 8001a4e:	2301      	movls	r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f040 80a8 	bne.w	8001ba6 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001a56:	4d57      	ldr	r5, [pc, #348]	; (8001bb4 <HAL_I2C_Init+0x1b0>)
 8001a58:	fba5 3500 	umull	r3, r5, r5, r0
 8001a5c:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5e:	6826      	ldr	r6, [r4, #0]
 8001a60:	6871      	ldr	r1, [r6, #4]
 8001a62:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001a66:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8001a6a:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a6c:	6821      	ldr	r1, [r4, #0]
 8001a6e:	6a0b      	ldr	r3, [r1, #32]
 8001a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a74:	6865      	ldr	r5, [r4, #4]
 8001a76:	4a4d      	ldr	r2, [pc, #308]	; (8001bac <HAL_I2C_Init+0x1a8>)
 8001a78:	4295      	cmp	r5, r2
 8001a7a:	d84f      	bhi.n	8001b1c <HAL_I2C_Init+0x118>
 8001a7c:	1c7a      	adds	r2, r7, #1
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a82:	6825      	ldr	r5, [r4, #0]
 8001a84:	69e9      	ldr	r1, [r5, #28]
 8001a86:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001a8a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001a8e:	6863      	ldr	r3, [r4, #4]
 8001a90:	4a46      	ldr	r2, [pc, #280]	; (8001bac <HAL_I2C_Init+0x1a8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d84c      	bhi.n	8001b30 <HAL_I2C_Init+0x12c>
 8001a96:	3801      	subs	r0, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a9e:	3001      	adds	r0, #1
 8001aa0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001aa4:	4218      	tst	r0, r3
 8001aa6:	d078      	beq.n	8001b9a <HAL_I2C_Init+0x196>
 8001aa8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001aac:	430b      	orrs	r3, r1
 8001aae:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ab0:	6821      	ldr	r1, [r4, #0]
 8001ab2:	680b      	ldr	r3, [r1, #0]
 8001ab4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ab8:	69e2      	ldr	r2, [r4, #28]
 8001aba:	6a20      	ldr	r0, [r4, #32]
 8001abc:	4302      	orrs	r2, r0
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ac2:	6821      	ldr	r1, [r4, #0]
 8001ac4:	688b      	ldr	r3, [r1, #8]
 8001ac6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ace:	6922      	ldr	r2, [r4, #16]
 8001ad0:	68e0      	ldr	r0, [r4, #12]
 8001ad2:	4302      	orrs	r2, r0
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ad8:	6821      	ldr	r1, [r4, #0]
 8001ada:	68cb      	ldr	r3, [r1, #12]
 8001adc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ae0:	6962      	ldr	r2, [r4, #20]
 8001ae2:	69a0      	ldr	r0, [r4, #24]
 8001ae4:	4302      	orrs	r2, r0
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001aea:	6822      	ldr	r2, [r4, #0]
 8001aec:	6813      	ldr	r3, [r2, #0]
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af4:	2000      	movs	r0, #0
 8001af6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	2320      	movs	r3, #32
 8001afa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001b06:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001b0a:	f7ff f87b 	bl	8000c04 <HAL_I2C_MspInit>
 8001b0e:	e782      	b.n	8001a16 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_I2C_Init+0x1b4>)
 8001b12:	4298      	cmp	r0, r3
 8001b14:	bf8c      	ite	hi
 8001b16:	2300      	movhi	r3, #0
 8001b18:	2301      	movls	r3, #1
 8001b1a:	e799      	b.n	8001a50 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b20:	fb02 f207 	mul.w	r2, r2, r7
 8001b24:	4d25      	ldr	r5, [pc, #148]	; (8001bbc <HAL_I2C_Init+0x1b8>)
 8001b26:	fba5 5202 	umull	r5, r2, r5, r2
 8001b2a:	0992      	lsrs	r2, r2, #6
 8001b2c:	3201      	adds	r2, #1
 8001b2e:	e7a6      	b.n	8001a7e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b30:	68a2      	ldr	r2, [r4, #8]
 8001b32:	b9ba      	cbnz	r2, 8001b64 <HAL_I2C_Init+0x160>
 8001b34:	1e46      	subs	r6, r0, #1
 8001b36:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001b3a:	fbb6 f6f7 	udiv	r6, r6, r7
 8001b3e:	3601      	adds	r6, #1
 8001b40:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001b44:	fab6 f686 	clz	r6, r6
 8001b48:	0976      	lsrs	r6, r6, #5
 8001b4a:	bb46      	cbnz	r6, 8001b9e <HAL_I2C_Init+0x19a>
 8001b4c:	b9c2      	cbnz	r2, 8001b80 <HAL_I2C_Init+0x17c>
 8001b4e:	1e42      	subs	r2, r0, #1
 8001b50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b58:	3201      	adds	r2, #1
 8001b5a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b5e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001b62:	e7a3      	b.n	8001aac <HAL_I2C_Init+0xa8>
 8001b64:	1e46      	subs	r6, r0, #1
 8001b66:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001b6a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001b6e:	fbb6 f6f7 	udiv	r6, r6, r7
 8001b72:	3601      	adds	r6, #1
 8001b74:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001b78:	fab6 f686 	clz	r6, r6
 8001b7c:	0976      	lsrs	r6, r6, #5
 8001b7e:	e7e4      	b.n	8001b4a <HAL_I2C_Init+0x146>
 8001b80:	1e42      	subs	r2, r0, #1
 8001b82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b8e:	3201      	adds	r2, #1
 8001b90:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001b94:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8001b98:	e788      	b.n	8001aac <HAL_I2C_Init+0xa8>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e786      	b.n	8001aac <HAL_I2C_Init+0xa8>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e784      	b.n	8001aac <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001ba2:	2001      	movs	r0, #1
}
 8001ba4:	4770      	bx	lr
    return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	e7ac      	b.n	8001b04 <HAL_I2C_Init+0x100>
 8001baa:	bf00      	nop
 8001bac:	000186a0 	.word	0x000186a0
 8001bb0:	001e847f 	.word	0x001e847f
 8001bb4:	431bde83 	.word	0x431bde83
 8001bb8:	003d08ff 	.word	0x003d08ff
 8001bbc:	10624dd3 	.word	0x10624dd3

08001bc0 <HAL_I2C_Master_Transmit>:
{
 8001bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	460f      	mov	r7, r1
 8001bca:	4691      	mov	r9, r2
 8001bcc:	4698      	mov	r8, r3
 8001bce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff f998 	bl	8000f04 <HAL_GetTick>
 8001bd4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001bda:	b2c0      	uxtb	r0, r0
 8001bdc:	2820      	cmp	r0, #32
 8001bde:	d004      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001be0:	2702      	movs	r7, #2
}
 8001be2:	4638      	mov	r0, r7
 8001be4:	b005      	add	sp, #20
 8001be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bea:	9500      	str	r5, [sp, #0]
 8001bec:	2319      	movs	r3, #25
 8001bee:	2201      	movs	r2, #1
 8001bf0:	494f      	ldr	r1, [pc, #316]	; (8001d30 <HAL_I2C_Master_Transmit+0x170>)
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff fd03 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	f040 8092 	bne.w	8001d22 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001bfe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	f000 808f 	beq.w	8001d26 <HAL_I2C_Master_Transmit+0x166>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f012 0f01 	tst.w	r2, #1
 8001c16:	d103      	bne.n	8001c20 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c20:	6822      	ldr	r2, [r4, #0]
 8001c22:	6813      	ldr	r3, [r2, #0]
 8001c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c28:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c2a:	2321      	movs	r3, #33	; 0x21
 8001c2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c30:	2310      	movs	r3, #16
 8001c32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001c3a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c3e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c44:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_I2C_Master_Transmit+0x174>)
 8001c48:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c4a:	462b      	mov	r3, r5
 8001c4c:	4632      	mov	r2, r6
 8001c4e:	4639      	mov	r1, r7
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff fd63 	bl	800171c <I2C_MasterRequestWrite>
 8001c56:	4607      	mov	r7, r0
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d166      	bne.n	8001d2a <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	9203      	str	r2, [sp, #12]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	9303      	str	r3, [sp, #12]
 8001c6a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001c6c:	e011      	b.n	8001c92 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d001      	beq.n	8001c78 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001c74:	2701      	movs	r7, #1
 8001c76:	e7b4      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e7f7      	b.n	8001c74 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c84:	462a      	mov	r2, r5
 8001c86:	4631      	mov	r1, r6
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f7ff fe5b 	bl	8001944 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d12e      	bne.n	8001cf0 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001c92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d036      	beq.n	8001d06 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c98:	462a      	mov	r2, r5
 8001c9a:	4631      	mov	r1, r6
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff fe27 	bl	80018f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	d1e3      	bne.n	8001c6e <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001cae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001cb0:	1c4b      	adds	r3, r1, #1
 8001cb2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001cb4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001cbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	6950      	ldr	r0, [r2, #20]
 8001cca:	f010 0f04 	tst.w	r0, #4
 8001cce:	d0d9      	beq.n	8001c84 <HAL_I2C_Master_Transmit+0xc4>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0d7      	beq.n	8001c84 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd4:	784b      	ldrb	r3, [r1, #1]
 8001cd6:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cda:	3301      	adds	r3, #1
 8001cdc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001cde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001ce8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cea:	3b01      	subs	r3, #1
 8001cec:	8523      	strh	r3, [r4, #40]	; 0x28
 8001cee:	e7c9      	b.n	8001c84 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8001cf6:	2701      	movs	r7, #1
 8001cf8:	e773      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfa:	6822      	ldr	r2, [r4, #0]
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e7f7      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	2320      	movs	r3, #32
 8001d12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001d1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001d20:	e75f      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001d22:	2702      	movs	r7, #2
 8001d24:	e75d      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8001d26:	2702      	movs	r7, #2
 8001d28:	e75b      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8001d2a:	2701      	movs	r7, #1
 8001d2c:	e759      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x22>
 8001d2e:	bf00      	nop
 8001d30:	00100002 	.word	0x00100002
 8001d34:	ffff0000 	.word	0xffff0000

08001d38 <HAL_I2C_Master_Receive>:
{
 8001d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d3c:	b087      	sub	sp, #28
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460f      	mov	r7, r1
 8001d42:	4691      	mov	r9, r2
 8001d44:	4698      	mov	r8, r3
 8001d46:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff f8dc 	bl	8000f04 <HAL_GetTick>
 8001d4c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8001d52:	b2c0      	uxtb	r0, r0
 8001d54:	2820      	cmp	r0, #32
 8001d56:	d004      	beq.n	8001d62 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 8001d58:	2702      	movs	r7, #2
}
 8001d5a:	4638      	mov	r0, r7
 8001d5c:	b007      	add	sp, #28
 8001d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d62:	9500      	str	r5, [sp, #0]
 8001d64:	2319      	movs	r3, #25
 8001d66:	2201      	movs	r2, #1
 8001d68:	499e      	ldr	r1, [pc, #632]	; (8001fe4 <HAL_I2C_Master_Receive+0x2ac>)
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff fc47 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	f040 8146 	bne.w	8002002 <HAL_I2C_Master_Receive+0x2ca>
    __HAL_LOCK(hi2c);
 8001d76:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	f000 8143 	beq.w	8002006 <HAL_I2C_Master_Receive+0x2ce>
 8001d80:	2301      	movs	r3, #1
 8001d82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f012 0f01 	tst.w	r2, #1
 8001d8e:	d103      	bne.n	8001d98 <HAL_I2C_Master_Receive+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d98:	6822      	ldr	r2, [r4, #0]
 8001d9a:	6813      	ldr	r3, [r2, #0]
 8001d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001da0:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001da2:	2322      	movs	r3, #34	; 0x22
 8001da4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001da8:	2310      	movs	r3, #16
 8001daa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001db2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dbc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dbe:	4b8a      	ldr	r3, [pc, #552]	; (8001fe8 <HAL_I2C_Master_Receive+0x2b0>)
 8001dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dc2:	462b      	mov	r3, r5
 8001dc4:	4632      	mov	r2, r6
 8001dc6:	4639      	mov	r1, r7
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff fd01 	bl	80017d0 <I2C_MasterRequestRead>
 8001dce:	4607      	mov	r7, r0
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	f040 811a 	bne.w	800200a <HAL_I2C_Master_Receive+0x2d2>
    if (hi2c->XferSize == 0U)
 8001dd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001dd8:	b95b      	cbnz	r3, 8001df2 <HAL_I2C_Master_Receive+0xba>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	9302      	str	r3, [sp, #8]
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	9202      	str	r2, [sp, #8]
 8001de2:	699a      	ldr	r2, [r3, #24]
 8001de4:	9202      	str	r2, [sp, #8]
 8001de6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e09d      	b.n	8001f2e <HAL_I2C_Master_Receive+0x1f6>
    else if (hi2c->XferSize == 1U)
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d00f      	beq.n	8001e16 <HAL_I2C_Master_Receive+0xde>
    else if (hi2c->XferSize == 2U)
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d01f      	beq.n	8001e3a <HAL_I2C_Master_Receive+0x102>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfa:	6822      	ldr	r2, [r4, #0]
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e02:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e04:	2300      	movs	r3, #0
 8001e06:	9305      	str	r3, [sp, #20]
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	9205      	str	r2, [sp, #20]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	9305      	str	r3, [sp, #20]
 8001e12:	9b05      	ldr	r3, [sp, #20]
 8001e14:	e08b      	b.n	8001f2e <HAL_I2C_Master_Receive+0x1f6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e20:	2300      	movs	r3, #0
 8001e22:	9303      	str	r3, [sp, #12]
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	9203      	str	r2, [sp, #12]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	9203      	str	r2, [sp, #12]
 8001e2e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e079      	b.n	8001f2e <HAL_I2C_Master_Receive+0x1f6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e3a:	6822      	ldr	r2, [r4, #0]
 8001e3c:	6813      	ldr	r3, [r2, #0]
 8001e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e42:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e44:	6822      	ldr	r2, [r4, #0]
 8001e46:	6813      	ldr	r3, [r2, #0]
 8001e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e4c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9304      	str	r3, [sp, #16]
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	9204      	str	r2, [sp, #16]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	9304      	str	r3, [sp, #16]
 8001e5c:	9b04      	ldr	r3, [sp, #16]
 8001e5e:	e066      	b.n	8001f2e <HAL_I2C_Master_Receive+0x1f6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e60:	462a      	mov	r2, r5
 8001e62:	4631      	mov	r1, r6
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7ff fd97 	bl	8001998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	f040 80cf 	bne.w	800200e <HAL_I2C_Master_Receive+0x2d6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e76:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001e7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e80:	3b01      	subs	r3, #1
 8001e82:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001e8e:	e04e      	b.n	8001f2e <HAL_I2C_Master_Receive+0x1f6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e90:	9500      	str	r5, [sp, #0]
 8001e92:	4633      	mov	r3, r6
 8001e94:	2200      	movs	r2, #0
 8001e96:	4955      	ldr	r1, [pc, #340]	; (8001fec <HAL_I2C_Master_Receive+0x2b4>)
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff fbb0 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	f040 80b7 	bne.w	8002012 <HAL_I2C_Master_Receive+0x2da>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eac:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eb4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001eb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001eb8:	1c53      	adds	r3, r2, #1
 8001eba:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ebc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ec2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ed8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001eda:	3b01      	subs	r3, #1
 8001edc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ede:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001ee8:	e021      	b.n	8001f2e <HAL_I2C_Master_Receive+0x1f6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eea:	6822      	ldr	r2, [r4, #0]
 8001eec:	6813      	ldr	r3, [r2, #0]
 8001eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001efa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001efc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001efe:	1c53      	adds	r3, r2, #1
 8001f00:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001f02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f04:	3b01      	subs	r3, #1
 8001f06:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001f1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f20:	3b01      	subs	r3, #1
 8001f22:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d05d      	beq.n	8001ff0 <HAL_I2C_Master_Receive+0x2b8>
      if (hi2c->XferSize <= 3U)
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d82b      	bhi.n	8001f90 <HAL_I2C_Master_Receive+0x258>
        if (hi2c->XferSize == 1U)
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d091      	beq.n	8001e60 <HAL_I2C_Master_Receive+0x128>
        else if (hi2c->XferSize == 2U)
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d0a7      	beq.n	8001e90 <HAL_I2C_Master_Receive+0x158>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f40:	9500      	str	r5, [sp, #0]
 8001f42:	4633      	mov	r3, r6
 8001f44:	2200      	movs	r2, #0
 8001f46:	4929      	ldr	r1, [pc, #164]	; (8001fec <HAL_I2C_Master_Receive+0x2b4>)
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff fb58 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d161      	bne.n	8002016 <HAL_I2C_Master_Receive+0x2de>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f52:	6822      	ldr	r2, [r4, #0]
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f5a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f62:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f66:	3301      	adds	r3, #1
 8001f68:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001f6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f7a:	9500      	str	r5, [sp, #0]
 8001f7c:	4633      	mov	r3, r6
 8001f7e:	2200      	movs	r2, #0
 8001f80:	491a      	ldr	r1, [pc, #104]	; (8001fec <HAL_I2C_Master_Receive+0x2b4>)
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff fb3b 	bl	80015fe <I2C_WaitOnFlagUntilTimeout>
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d0ae      	beq.n	8001eea <HAL_I2C_Master_Receive+0x1b2>
            return HAL_ERROR;
 8001f8c:	2701      	movs	r7, #1
 8001f8e:	e6e4      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f90:	462a      	mov	r2, r5
 8001f92:	4631      	mov	r1, r6
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff fcff 	bl	8001998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d13d      	bne.n	800201a <HAL_I2C_Master_Receive+0x2e2>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fa4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001fa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fa8:	1c53      	adds	r3, r2, #1
 8001faa:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001fac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001fb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	6959      	ldr	r1, [r3, #20]
 8001fc0:	f011 0f04 	tst.w	r1, #4
 8001fc4:	d0b3      	beq.n	8001f2e <HAL_I2C_Master_Receive+0x1f6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fcc:	3301      	adds	r3, #1
 8001fce:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001fd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001fd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001fe0:	e7a5      	b.n	8001f2e <HAL_I2C_Master_Receive+0x1f6>
 8001fe2:	bf00      	nop
 8001fe4:	00100002 	.word	0x00100002
 8001fe8:	ffff0000 	.word	0xffff0000
 8001fec:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001ffc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002000:	e6ab      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8002002:	2702      	movs	r7, #2
 8002004:	e6a9      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8002006:	2702      	movs	r7, #2
 8002008:	e6a7      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
      return HAL_ERROR;
 800200a:	2701      	movs	r7, #1
 800200c:	e6a5      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 800200e:	2701      	movs	r7, #1
 8002010:	e6a3      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8002012:	2701      	movs	r7, #1
 8002014:	e6a1      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
            return HAL_ERROR;
 8002016:	2701      	movs	r7, #1
 8002018:	e69f      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
          return HAL_ERROR;
 800201a:	2701      	movs	r7, #1
 800201c:	e69d      	b.n	8001d5a <HAL_I2C_Master_Receive+0x22>
 800201e:	bf00      	nop

08002020 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002020:	2800      	cmp	r0, #0
 8002022:	f000 80bf 	beq.w	80021a4 <HAL_I2S_Init+0x184>
{
 8002026:	b570      	push	{r4, r5, r6, lr}
 8002028:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800202a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800202e:	2b00      	cmp	r3, #0
 8002030:	d051      	beq.n	80020d6 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002032:	2202      	movs	r2, #2
 8002034:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002038:	6821      	ldr	r1, [r4, #0]
 800203a:	69cb      	ldr	r3, [r1, #28]
 800203c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002040:	f023 030f 	bic.w	r3, r3, #15
 8002044:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800204a:	6963      	ldr	r3, [r4, #20]
 800204c:	4293      	cmp	r3, r2
 800204e:	d063      	beq.n	8002118 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002050:	68e3      	ldr	r3, [r4, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d146      	bne.n	80020e4 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002056:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002058:	68a3      	ldr	r3, [r4, #8]
 800205a:	2b20      	cmp	r3, #32
 800205c:	d800      	bhi.n	8002060 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800205e:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002060:	2001      	movs	r0, #1
 8002062:	f000 ffe1 	bl	8003028 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002066:	6923      	ldr	r3, [r4, #16]
 8002068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206c:	d03c      	beq.n	80020e8 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800206e:	fbb0 f0f5 	udiv	r0, r0, r5
 8002072:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002076:	0043      	lsls	r3, r0, #1
 8002078:	6960      	ldr	r0, [r4, #20]
 800207a:	fbb3 f3f0 	udiv	r3, r3, r0
 800207e:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002080:	4a49      	ldr	r2, [pc, #292]	; (80021a8 <HAL_I2S_Init+0x188>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002086:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800208a:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 800208e:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002090:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002092:	1e9a      	subs	r2, r3, #2
 8002094:	2afd      	cmp	r2, #253	; 0xfd
 8002096:	d841      	bhi.n	800211c <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002098:	6922      	ldr	r2, [r4, #16]
 800209a:	430a      	orrs	r2, r1
 800209c:	6821      	ldr	r1, [r4, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80020a2:	6821      	ldr	r1, [r4, #0]
 80020a4:	69cb      	ldr	r3, [r1, #28]
 80020a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020aa:	f023 030f 	bic.w	r3, r3, #15
 80020ae:	6862      	ldr	r2, [r4, #4]
 80020b0:	68a0      	ldr	r0, [r4, #8]
 80020b2:	4302      	orrs	r2, r0
 80020b4:	68e0      	ldr	r0, [r4, #12]
 80020b6:	4302      	orrs	r2, r0
 80020b8:	69a0      	ldr	r0, [r4, #24]
 80020ba:	4302      	orrs	r2, r0
 80020bc:	4313      	orrs	r3, r2
 80020be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020c2:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80020c4:	6a23      	ldr	r3, [r4, #32]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d02e      	beq.n	8002128 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020ca:	2000      	movs	r0, #0
 80020cc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 80020d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_I2S_Init+0x18c>)
 80020dc:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80020de:	f7fe fdcb 	bl	8000c78 <HAL_I2S_MspInit>
 80020e2:	e7a6      	b.n	8002032 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 80020e4:	2520      	movs	r5, #32
 80020e6:	e7b7      	b.n	8002058 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80020e8:	68e3      	ldr	r3, [r4, #12]
 80020ea:	b153      	cbz	r3, 8002102 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020ec:	00ad      	lsls	r5, r5, #2
 80020ee:	fbb0 f0f5 	udiv	r0, r0, r5
 80020f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80020f6:	0043      	lsls	r3, r0, #1
 80020f8:	6960      	ldr	r0, [r4, #20]
 80020fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80020fe:	3305      	adds	r3, #5
 8002100:	e7be      	b.n	8002080 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002102:	00ed      	lsls	r5, r5, #3
 8002104:	fbb0 f0f5 	udiv	r0, r0, r5
 8002108:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800210c:	0043      	lsls	r3, r0, #1
 800210e:	6960      	ldr	r0, [r4, #20]
 8002110:	fbb3 f3f0 	udiv	r3, r3, r0
 8002114:	3305      	adds	r3, #5
 8002116:	e7b3      	b.n	8002080 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8002118:	2100      	movs	r1, #0
 800211a:	e7ba      	b.n	8002092 <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800211c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800211e:	f043 0310 	orr.w	r3, r3, #16
 8002122:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8002124:	2001      	movs	r0, #1
 8002126:	e7d5      	b.n	80020d4 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_I2S_Init+0x190>)
 800212a:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_I2S_Init+0x194>)
 8002130:	429a      	cmp	r2, r3
 8002132:	d01f      	beq.n	8002174 <HAL_I2S_Init+0x154>
 8002134:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002138:	69d3      	ldr	r3, [r2, #28]
 800213a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800213e:	f023 030f 	bic.w	r3, r3, #15
 8002142:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002144:	6822      	ldr	r2, [r4, #0]
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_I2S_Init+0x194>)
 8002148:	429a      	cmp	r2, r3
 800214a:	d015      	beq.n	8002178 <HAL_I2S_Init+0x158>
 800214c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002150:	2202      	movs	r2, #2
 8002152:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_I2S_Init+0x194>)
 8002158:	429a      	cmp	r2, r3
 800215a:	d010      	beq.n	800217e <HAL_I2S_Init+0x15e>
 800215c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8002160:	69ca      	ldr	r2, [r1, #28]
 8002162:	b292      	uxth	r2, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002164:	6863      	ldr	r3, [r4, #4]
 8002166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216a:	d00a      	beq.n	8002182 <HAL_I2S_Init+0x162>
 800216c:	b9c3      	cbnz	r3, 80021a0 <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 800216e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002172:	e008      	b.n	8002186 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002174:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <HAL_I2S_Init+0x198>)
 8002176:	e7df      	b.n	8002138 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002178:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800217c:	e7e8      	b.n	8002150 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800217e:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_I2S_Init+0x198>)
 8002180:	e7ee      	b.n	8002160 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8002182:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002186:	68a0      	ldr	r0, [r4, #8]
 8002188:	68e5      	ldr	r5, [r4, #12]
                                    (uint16_t)hi2s->Init.CPOL))));
 800218a:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800218c:	432b      	orrs	r3, r5
 800218e:	b29b      	uxth	r3, r3
 8002190:	4303      	orrs	r3, r0
 8002192:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002194:	4333      	orrs	r3, r6
 8002196:	4313      	orrs	r3, r2
 8002198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800219c:	61cb      	str	r3, [r1, #28]
 800219e:	e794      	b.n	80020ca <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 80021a0:	2600      	movs	r6, #0
 80021a2:	e7f0      	b.n	8002186 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 80021a4:	2001      	movs	r0, #1
}
 80021a6:	4770      	bx	lr
 80021a8:	cccccccd 	.word	0xcccccccd
 80021ac:	08002463 	.word	0x08002463
 80021b0:	0800269d 	.word	0x0800269d
 80021b4:	40003800 	.word	0x40003800
 80021b8:	40003400 	.word	0x40003400

080021bc <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80021bc:	2900      	cmp	r1, #0
 80021be:	d05e      	beq.n	800227e <HAL_I2S_Transmit_DMA+0xc2>
{
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	d05c      	beq.n	8002282 <HAL_I2S_Transmit_DMA+0xc6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80021c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d059      	beq.n	8002286 <HAL_I2S_Transmit_DMA+0xca>
 80021d2:	2301      	movs	r3, #1
 80021d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80021d8:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 80021dc:	b2ed      	uxtb	r5, r5
 80021de:	429d      	cmp	r5, r3
 80021e0:	d110      	bne.n	8002204 <HAL_I2S_Transmit_DMA+0x48>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80021ec:	6261      	str	r1, [r4, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d009      	beq.n	800220e <HAL_I2S_Transmit_DMA+0x52>
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d007      	beq.n	800220e <HAL_I2S_Transmit_DMA+0x52>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 80021fe:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002200:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002202:	e008      	b.n	8002216 <HAL_I2S_Transmit_DMA+0x5a>
    __HAL_UNLOCK(hi2s);
 8002204:	2300      	movs	r3, #0
 8002206:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 800220a:	2002      	movs	r0, #2
 800220c:	e03a      	b.n	8002284 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 800220e:	0052      	lsls	r2, r2, #1
 8002210:	b292      	uxth	r2, r2
 8002212:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002214:	8562      	strh	r2, [r4, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002218:	4a1c      	ldr	r2, [pc, #112]	; (800228c <HAL_I2S_Transmit_DMA+0xd0>)
 800221a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800221c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800221e:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_I2S_Transmit_DMA+0xd4>)
 8002220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_I2S_Transmit_DMA+0xd8>)
 8002226:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
 8002228:	6822      	ldr	r2, [r4, #0]
                                 hi2s->TxXferSize))
 800222a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800222c:	b29b      	uxth	r3, r3
 800222e:	320c      	adds	r2, #12
 8002230:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002232:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002234:	f7fe ffcc 	bl	80011d0 <HAL_DMA_Start_IT>
 8002238:	b9a8      	cbnz	r0, 8002266 <HAL_I2S_Transmit_DMA+0xaa>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002242:	d103      	bne.n	800224c <HAL_I2S_Transmit_DMA+0x90>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800224a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	f012 0f02 	tst.w	r2, #2
 8002254:	d103      	bne.n	800225e <HAL_I2S_Transmit_DMA+0xa2>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	f042 0202 	orr.w	r2, r2, #2
 800225c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800225e:	2300      	movs	r3, #0
 8002260:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 8002264:	e00e      	b.n	8002284 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002266:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800226e:	2301      	movs	r3, #1
 8002270:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8002274:	2300      	movs	r3, #0
 8002276:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800227a:	4628      	mov	r0, r5
 800227c:	e002      	b.n	8002284 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 800227e:	2001      	movs	r0, #1
}
 8002280:	4770      	bx	lr
    return  HAL_ERROR;
 8002282:	2001      	movs	r0, #1
}
 8002284:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hi2s);
 8002286:	2002      	movs	r0, #2
 8002288:	e7fc      	b.n	8002284 <HAL_I2S_Transmit_DMA+0xc8>
 800228a:	bf00      	nop
 800228c:	08002395 	.word	0x08002395
 8002290:	080023d7 	.word	0x080023d7
 8002294:	08002533 	.word	0x08002533

08002298 <HAL_I2S_Receive_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002298:	2900      	cmp	r1, #0
 800229a:	d06d      	beq.n	8002378 <HAL_I2S_Receive_DMA+0xe0>
{
 800229c:	b530      	push	{r4, r5, lr}
 800229e:	b083      	sub	sp, #12
 80022a0:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 80022a2:	2a00      	cmp	r2, #0
 80022a4:	d06a      	beq.n	800237c <HAL_I2S_Receive_DMA+0xe4>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80022a6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d068      	beq.n	8002382 <HAL_I2S_Receive_DMA+0xea>
 80022b0:	2301      	movs	r3, #1
 80022b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80022b6:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
 80022ba:	b2ed      	uxtb	r5, r5
 80022bc:	429d      	cmp	r5, r3
 80022be:	d110      	bne.n	80022e2 <HAL_I2S_Receive_DMA+0x4a>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80022c0:	2304      	movs	r3, #4
 80022c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80022ca:	62e1      	str	r1, [r4, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d009      	beq.n	80022ec <HAL_I2S_Receive_DMA+0x54>
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d007      	beq.n	80022ec <HAL_I2S_Receive_DMA+0x54>
    hi2s->RxXferSize = (Size << 1U);
    hi2s->RxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->RxXferSize = Size;
 80022dc:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80022de:	8662      	strh	r2, [r4, #50]	; 0x32
 80022e0:	e008      	b.n	80022f4 <HAL_I2S_Receive_DMA+0x5c>
    __HAL_UNLOCK(hi2s);
 80022e2:	2300      	movs	r3, #0
 80022e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_BUSY;
 80022e8:	2002      	movs	r0, #2
 80022ea:	e048      	b.n	800237e <HAL_I2S_Receive_DMA+0xe6>
    hi2s->RxXferSize = (Size << 1U);
 80022ec:	0052      	lsls	r2, r2, #1
 80022ee:	b292      	uxth	r2, r2
 80022f0:	8622      	strh	r2, [r4, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80022f2:	8662      	strh	r2, [r4, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80022f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022f6:	4a24      	ldr	r2, [pc, #144]	; (8002388 <HAL_I2S_Receive_DMA+0xf0>)
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80022fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022fc:	4a23      	ldr	r2, [pc, #140]	; (800238c <HAL_I2S_Receive_DMA+0xf4>)
 80022fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_I2S_Receive_DMA+0xf8>)
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002306:	6821      	ldr	r1, [r4, #0]
 8002308:	69cb      	ldr	r3, [r1, #28]
 800230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002312:	d01d      	beq.n	8002350 <HAL_I2S_Receive_DMA+0xb8>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
                                 hi2s->RxXferSize))
 8002314:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002316:	b29b      	uxth	r3, r3
 8002318:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800231a:	310c      	adds	r1, #12
 800231c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800231e:	f7fe ff57 	bl	80011d0 <HAL_DMA_Start_IT>
 8002322:	b9e8      	cbnz	r0, 8002360 <HAL_I2S_Receive_DMA+0xc8>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800232c:	d103      	bne.n	8002336 <HAL_I2S_Receive_DMA+0x9e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002334:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	f012 0f01 	tst.w	r2, #1
 800233e:	d103      	bne.n	8002348 <HAL_I2S_Receive_DMA+0xb0>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002348:	2300      	movs	r3, #0
 800234a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
 800234e:	e016      	b.n	800237e <HAL_I2S_Receive_DMA+0xe6>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002350:	2300      	movs	r3, #0
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	68cb      	ldr	r3, [r1, #12]
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	688b      	ldr	r3, [r1, #8]
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	9b01      	ldr	r3, [sp, #4]
 800235e:	e7d9      	b.n	8002314 <HAL_I2S_Receive_DMA+0x7c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002360:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002368:	2301      	movs	r3, #1
 800236a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 800236e:	2300      	movs	r3, #0
 8002370:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002374:	4628      	mov	r0, r5
 8002376:	e002      	b.n	800237e <HAL_I2S_Receive_DMA+0xe6>
    return  HAL_ERROR;
 8002378:	2001      	movs	r0, #1
}
 800237a:	4770      	bx	lr
    return  HAL_ERROR;
 800237c:	2001      	movs	r0, #1
}
 800237e:	b003      	add	sp, #12
 8002380:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hi2s);
 8002382:	2002      	movs	r0, #2
 8002384:	e7fb      	b.n	800237e <HAL_I2S_Receive_DMA+0xe6>
 8002386:	bf00      	nop
 8002388:	080023fb 	.word	0x080023fb
 800238c:	0800243d 	.word	0x0800243d
 8002390:	08002533 	.word	0x08002533

08002394 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002394:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002396:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002398:	f7fe fa64 	bl	8000864 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800239c:	bd08      	pop	{r3, pc}

0800239e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800239e:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80023a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80023a2:	6803      	ldr	r3, [r0, #0]
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80023a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023aa:	3302      	adds	r3, #2
 80023ac:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 80023ae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80023b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b103      	cbz	r3, 80023c0 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023be:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023c0:	6802      	ldr	r2, [r0, #0]
 80023c2:	6853      	ldr	r3, [r2, #4]
 80023c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023c8:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80023d0:	f7fe fa4e 	bl	8000870 <HAL_I2S_TxCpltCallback>
}
 80023d4:	e7f3      	b.n	80023be <I2S_Transmit_IT+0x20>

080023d6 <I2S_DMATxCplt>:
{
 80023d6:	b508      	push	{r3, lr}
 80023d8:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023da:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	b94b      	cbnz	r3, 80023f4 <I2S_DMATxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80023e0:	6802      	ldr	r2, [r0, #0]
 80023e2:	6853      	ldr	r3, [r2, #4]
 80023e4:	f023 0302 	bic.w	r3, r3, #2
 80023e8:	6053      	str	r3, [r2, #4]
    hi2s->TxXferCount = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 80023f4:	f7fe fa3c 	bl	8000870 <HAL_I2S_TxCpltCallback>
}
 80023f8:	bd08      	pop	{r3, pc}

080023fa <I2S_DMARxHalfCplt>:
{
 80023fa:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80023fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023fe:	f7fe fa3d 	bl	800087c <HAL_I2S_RxHalfCpltCallback>
}
 8002402:	bd08      	pop	{r3, pc}

08002404 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002404:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002406:	6803      	ldr	r3, [r0, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800240c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800240e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002410:	3302      	adds	r3, #2
 8002412:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002414:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29b      	uxth	r3, r3
 800241c:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800241e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002420:	b29b      	uxth	r3, r3
 8002422:	b103      	cbz	r3, 8002426 <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002424:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002426:	6802      	ldr	r2, [r0, #0]
 8002428:	6853      	ldr	r3, [r2, #4]
 800242a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800242e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002430:	2301      	movs	r3, #1
 8002432:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002436:	f7fe fa27 	bl	8000888 <HAL_I2S_RxCpltCallback>
}
 800243a:	e7f3      	b.n	8002424 <I2S_Receive_IT+0x20>

0800243c <I2S_DMARxCplt>:
{
 800243c:	b508      	push	{r3, lr}
 800243e:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002440:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	b94b      	cbnz	r3, 800245a <I2S_DMARxCplt+0x1e>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002446:	6802      	ldr	r2, [r0, #0]
 8002448:	6853      	ldr	r3, [r2, #4]
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6053      	str	r3, [r2, #4]
    hi2s->RxXferCount = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002454:	2301      	movs	r3, #1
 8002456:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 800245a:	f7fe fa15 	bl	8000888 <HAL_I2S_RxCpltCallback>
}
 800245e:	bd08      	pop	{r3, pc}

08002460 <HAL_I2S_ErrorCallback>:
}
 8002460:	4770      	bx	lr

08002462 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002462:	b510      	push	{r4, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002468:	6802      	ldr	r2, [r0, #0]
 800246a:	6893      	ldr	r3, [r2, #8]
 800246c:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800246e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b04      	cmp	r3, #4
 8002476:	d006      	beq.n	8002486 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002478:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b03      	cmp	r3, #3
 8002480:	d02c      	beq.n	80024dc <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002482:	b004      	add	sp, #16
 8002484:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002486:	9b03      	ldr	r3, [sp, #12]
 8002488:	f013 0f01 	tst.w	r3, #1
 800248c:	d003      	beq.n	8002496 <I2S_IRQHandler+0x34>
 800248e:	6853      	ldr	r3, [r2, #4]
 8002490:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002494:	d11f      	bne.n	80024d6 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002496:	9b03      	ldr	r3, [sp, #12]
 8002498:	f013 0f40 	tst.w	r3, #64	; 0x40
 800249c:	d0ec      	beq.n	8002478 <I2S_IRQHandler+0x16>
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	f012 0f20 	tst.w	r2, #32
 80024a6:	d0e7      	beq.n	8002478 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024ae:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	9201      	str	r2, [sp, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff ffc6 	bl	8002460 <HAL_I2S_ErrorCallback>
 80024d4:	e7d0      	b.n	8002478 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 80024d6:	f7ff ff95 	bl	8002404 <I2S_Receive_IT>
 80024da:	e7dc      	b.n	8002496 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024dc:	9b03      	ldr	r3, [sp, #12]
 80024de:	f013 0f02 	tst.w	r3, #2
 80024e2:	d004      	beq.n	80024ee <I2S_IRQHandler+0x8c>
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80024ec:	d11d      	bne.n	800252a <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024ee:	9b03      	ldr	r3, [sp, #12]
 80024f0:	f013 0f08 	tst.w	r3, #8
 80024f4:	d0c5      	beq.n	8002482 <I2S_IRQHandler+0x20>
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	f012 0f20 	tst.w	r2, #32
 80024fe:	d0c0      	beq.n	8002482 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002506:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002508:	2300      	movs	r3, #0
 800250a:	9302      	str	r3, [sp, #8]
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002514:	2301      	movs	r3, #1
 8002516:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800251a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff ff9c 	bl	8002460 <HAL_I2S_ErrorCallback>
}
 8002528:	e7ab      	b.n	8002482 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff ff37 	bl	800239e <I2S_Transmit_IT>
 8002530:	e7dd      	b.n	80024ee <I2S_IRQHandler+0x8c>

08002532 <I2S_DMAError>:
{
 8002532:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002534:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002536:	6802      	ldr	r2, [r0, #0]
 8002538:	6853      	ldr	r3, [r2, #4]
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002544:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8002546:	2301      	movs	r3, #1
 8002548:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800254c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800254e:	f043 0308 	orr.w	r3, r3, #8
 8002552:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8002554:	f7ff ff84 	bl	8002460 <HAL_I2S_ErrorCallback>
}
 8002558:	bd08      	pop	{r3, pc}

0800255a <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800255a:	4770      	bx	lr

0800255c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800255c:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800255e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002560:	1c9a      	adds	r2, r3, #2
 8002562:	6242      	str	r2, [r0, #36]	; 0x24
 8002564:	6802      	ldr	r2, [r0, #0]
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800256a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29b      	uxth	r3, r3
 8002572:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002574:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	b93b      	cbnz	r3, 800258a <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800257a:	6802      	ldr	r2, [r0, #0]
 800257c:	6853      	ldr	r3, [r2, #4]
 800257e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002582:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8002584:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002586:	b29b      	uxth	r3, r3
 8002588:	b103      	cbz	r3, 800258c <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800258a:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 800258c:	2301      	movs	r3, #1
 800258e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002592:	f7ff ffe2 	bl	800255a <HAL_I2SEx_TxRxCpltCallback>
}
 8002596:	e7f8      	b.n	800258a <I2SEx_TxISR_I2S+0x2e>

08002598 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002598:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <I2SEx_RxISR_I2SExt+0x5c>)
 800259e:	429a      	cmp	r2, r3
 80025a0:	d01c      	beq.n	80025dc <I2SEx_RxISR_I2SExt+0x44>
 80025a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80025aa:	1c99      	adds	r1, r3, #2
 80025ac:	62c1      	str	r1, [r0, #44]	; 0x2c
 80025ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80025b0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025ba:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b963      	cbnz	r3, 80025da <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c0:	6802      	ldr	r2, [r0, #0]
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <I2SEx_RxISR_I2SExt+0x5c>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d00c      	beq.n	80025e2 <I2SEx_RxISR_I2SExt+0x4a>
 80025c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80025cc:	6853      	ldr	r3, [r2, #4]
 80025ce:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80025d2:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80025d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	b12b      	cbz	r3, 80025e6 <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025da:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80025dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80025e0:	e7e1      	b.n	80025a6 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <I2SEx_RxISR_I2SExt+0x60>)
 80025e4:	e7f2      	b.n	80025cc <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025ec:	f7ff ffb5 	bl	800255a <HAL_I2SEx_TxRxCpltCallback>
}
 80025f0:	e7f3      	b.n	80025da <I2SEx_RxISR_I2SExt+0x42>
 80025f2:	bf00      	nop
 80025f4:	40003800 	.word	0x40003800
 80025f8:	40003400 	.word	0x40003400

080025fc <I2SEx_TxISR_I2SExt>:
{
 80025fc:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80025fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002600:	1c9a      	adds	r2, r3, #2
 8002602:	6242      	str	r2, [r0, #36]	; 0x24
 8002604:	881a      	ldrh	r2, [r3, #0]
 8002606:	6801      	ldr	r1, [r0, #0]
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <I2SEx_TxISR_I2SExt+0x5c>)
 800260a:	4299      	cmp	r1, r3
 800260c:	d018      	beq.n	8002640 <I2SEx_TxISR_I2SExt+0x44>
 800260e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002612:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002614:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800261e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	b963      	cbnz	r3, 800263e <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002624:	6802      	ldr	r2, [r0, #0]
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <I2SEx_TxISR_I2SExt+0x5c>)
 8002628:	429a      	cmp	r2, r3
 800262a:	d00c      	beq.n	8002646 <I2SEx_TxISR_I2SExt+0x4a>
 800262c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002630:	6853      	ldr	r3, [r2, #4]
 8002632:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002636:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8002638:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800263a:	b29b      	uxth	r3, r3
 800263c:	b12b      	cbz	r3, 800264a <I2SEx_TxISR_I2SExt+0x4e>
}
 800263e:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002640:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002644:	e7e5      	b.n	8002612 <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <I2SEx_TxISR_I2SExt+0x60>)
 8002648:	e7f2      	b.n	8002630 <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 800264a:	2301      	movs	r3, #1
 800264c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002650:	f7ff ff83 	bl	800255a <HAL_I2SEx_TxRxCpltCallback>
}
 8002654:	e7f3      	b.n	800263e <I2SEx_TxISR_I2SExt+0x42>
 8002656:	bf00      	nop
 8002658:	40003800 	.word	0x40003800
 800265c:	40003400 	.word	0x40003400

08002660 <I2SEx_RxISR_I2S>:
{
 8002660:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002662:	6803      	ldr	r3, [r0, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002668:	1c99      	adds	r1, r3, #2
 800266a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800266c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800266e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29b      	uxth	r3, r3
 8002676:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002678:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800267a:	b29b      	uxth	r3, r3
 800267c:	b93b      	cbnz	r3, 800268e <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800267e:	6802      	ldr	r2, [r0, #0]
 8002680:	6853      	ldr	r3, [r2, #4]
 8002682:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002686:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8002688:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	b103      	cbz	r3, 8002690 <I2SEx_RxISR_I2S+0x30>
}
 800268e:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8002690:	2301      	movs	r3, #1
 8002692:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002696:	f7ff ff60 	bl	800255a <HAL_I2SEx_TxRxCpltCallback>
}
 800269a:	e7f8      	b.n	800268e <I2SEx_RxISR_I2S+0x2e>

0800269c <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 800269c:	b510      	push	{r4, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80026a8:	4a70      	ldr	r2, [pc, #448]	; (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d06f      	beq.n	800278e <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80026ae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80026b2:	6891      	ldr	r1, [r2, #8]
 80026b4:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80026ba:	6853      	ldr	r3, [r2, #4]
 80026bc:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026be:	6863      	ldr	r3, [r4, #4]
 80026c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c4:	d001      	beq.n	80026ca <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d170      	bne.n	80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80026ca:	9b05      	ldr	r3, [sp, #20]
 80026cc:	f013 0f02 	tst.w	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80026d2:	9b03      	ldr	r3, [sp, #12]
 80026d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026d8:	d15c      	bne.n	8002794 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80026da:	9b04      	ldr	r3, [sp, #16]
 80026dc:	f013 0f01 	tst.w	r3, #1
 80026e0:	d003      	beq.n	80026ea <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 80026e2:	9b02      	ldr	r3, [sp, #8]
 80026e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026e8:	d158      	bne.n	800279c <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026ea:	9b04      	ldr	r3, [sp, #16]
 80026ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026f0:	d024      	beq.n	800273c <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 80026f2:	9b02      	ldr	r3, [sp, #8]
 80026f4:	f013 0f20 	tst.w	r3, #32
 80026f8:	d020      	beq.n	800273c <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026fa:	6822      	ldr	r2, [r4, #0]
 80026fc:	4b5b      	ldr	r3, [pc, #364]	; (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80026fe:	429a      	cmp	r2, r3
 8002700:	d050      	beq.n	80027a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 8002702:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002706:	6853      	ldr	r3, [r2, #4]
 8002708:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800270c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	6853      	ldr	r3, [r2, #4]
 8002712:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002716:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002718:	2300      	movs	r3, #0
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	9200      	str	r2, [sp, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8002728:	2301      	movs	r3, #1
 800272a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800272e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff fe92 	bl	8002460 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800273c:	9b05      	ldr	r3, [sp, #20]
 800273e:	f013 0f08 	tst.w	r3, #8
 8002742:	d022      	beq.n	800278a <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8002744:	9b03      	ldr	r3, [sp, #12]
 8002746:	f013 0f20 	tst.w	r3, #32
 800274a:	d01e      	beq.n	800278a <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800274c:	6822      	ldr	r2, [r4, #0]
 800274e:	6853      	ldr	r3, [r2, #4]
 8002750:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002754:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002756:	6822      	ldr	r2, [r4, #0]
 8002758:	4b44      	ldr	r3, [pc, #272]	; (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800275a:	429a      	cmp	r2, r3
 800275c:	d024      	beq.n	80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800275e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002762:	6853      	ldr	r3, [r2, #4]
 8002764:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002768:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800276a:	2300      	movs	r3, #0
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002776:	2301      	movs	r3, #1
 8002778:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800277c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff fe6b 	bl	8002460 <HAL_I2S_ErrorCallback>
}
 800278a:	b006      	add	sp, #24
 800278c:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800278e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002792:	e78e      	b.n	80026b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8002794:	4620      	mov	r0, r4
 8002796:	f7ff fee1 	bl	800255c <I2SEx_TxISR_I2S>
 800279a:	e79e      	b.n	80026da <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff fefb 	bl	8002598 <I2SEx_RxISR_I2SExt>
 80027a2:	e7a2      	b.n	80026ea <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027a4:	4a32      	ldr	r2, [pc, #200]	; (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80027a6:	e7ae      	b.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027a8:	4a31      	ldr	r2, [pc, #196]	; (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80027aa:	e7da      	b.n	8002762 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80027ac:	9b04      	ldr	r3, [sp, #16]
 80027ae:	f013 0f02 	tst.w	r3, #2
 80027b2:	d003      	beq.n	80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 80027b4:	9b02      	ldr	r3, [sp, #8]
 80027b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027ba:	d14a      	bne.n	8002852 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80027bc:	9b05      	ldr	r3, [sp, #20]
 80027be:	f013 0f01 	tst.w	r3, #1
 80027c2:	d003      	beq.n	80027cc <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80027c4:	9b03      	ldr	r3, [sp, #12]
 80027c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027ca:	d146      	bne.n	800285a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027cc:	9b05      	ldr	r3, [sp, #20]
 80027ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027d2:	d01c      	beq.n	800280e <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 80027d4:	9b03      	ldr	r3, [sp, #12]
 80027d6:	f013 0f20 	tst.w	r3, #32
 80027da:	d018      	beq.n	800280e <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	6853      	ldr	r3, [r2, #4]
 80027e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80027e4:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027e6:	6822      	ldr	r2, [r4, #0]
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d039      	beq.n	8002862 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 80027ee:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80027f2:	6853      	ldr	r3, [r2, #4]
 80027f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027f8:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002800:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002802:	f043 0302 	orr.w	r3, r3, #2
 8002806:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fe29 	bl	8002460 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800280e:	9b04      	ldr	r3, [sp, #16]
 8002810:	f013 0f08 	tst.w	r3, #8
 8002814:	d0b9      	beq.n	800278a <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8002816:	9b02      	ldr	r3, [sp, #8]
 8002818:	f013 0f20 	tst.w	r3, #32
 800281c:	d0b5      	beq.n	800278a <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002822:	429a      	cmp	r2, r3
 8002824:	d01f      	beq.n	8002866 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8002826:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800282a:	6853      	ldr	r3, [r2, #4]
 800282c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002830:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	6853      	ldr	r3, [r2, #4]
 8002836:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800283a:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800283c:	2301      	movs	r3, #1
 800283e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002842:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff fe08 	bl	8002460 <HAL_I2S_ErrorCallback>
}
 8002850:	e79b      	b.n	800278a <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fed2 	bl	80025fc <I2SEx_TxISR_I2SExt>
 8002858:	e7b0      	b.n	80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff ff00 	bl	8002660 <I2SEx_RxISR_I2S>
 8002860:	e7b4      	b.n	80027cc <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002862:	4a03      	ldr	r2, [pc, #12]	; (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002864:	e7c5      	b.n	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002866:	4a02      	ldr	r2, [pc, #8]	; (8002870 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002868:	e7df      	b.n	800282a <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 800286a:	bf00      	nop
 800286c:	40003800 	.word	0x40003800
 8002870:	40003400 	.word	0x40003400

08002874 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002874:	2800      	cmp	r0, #0
 8002876:	f000 81d9 	beq.w	8002c2c <HAL_RCC_OscConfig+0x3b8>
{
 800287a:	b570      	push	{r4, r5, r6, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002880:	6803      	ldr	r3, [r0, #0]
 8002882:	f013 0f01 	tst.w	r3, #1
 8002886:	d03b      	beq.n	8002900 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002888:	4ba6      	ldr	r3, [pc, #664]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b04      	cmp	r3, #4
 8002892:	d02c      	beq.n	80028ee <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002894:	4ba3      	ldr	r3, [pc, #652]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800289c:	2b08      	cmp	r3, #8
 800289e:	d021      	beq.n	80028e4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a0:	6863      	ldr	r3, [r4, #4]
 80028a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a6:	d04f      	beq.n	8002948 <HAL_RCC_OscConfig+0xd4>
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ac:	d052      	beq.n	8002954 <HAL_RCC_OscConfig+0xe0>
 80028ae:	4b9d      	ldr	r3, [pc, #628]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c0:	6863      	ldr	r3, [r4, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d050      	beq.n	8002968 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe fb1d 	bl	8000f04 <HAL_GetTick>
 80028ca:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028cc:	4b95      	ldr	r3, [pc, #596]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028d4:	d114      	bne.n	8002900 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d6:	f7fe fb15 	bl	8000f04 <HAL_GetTick>
 80028da:	1b40      	subs	r0, r0, r5
 80028dc:	2864      	cmp	r0, #100	; 0x64
 80028de:	d9f5      	bls.n	80028cc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80028e0:	2003      	movs	r0, #3
 80028e2:	e1aa      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e4:	4b8f      	ldr	r3, [pc, #572]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80028ec:	d0d8      	beq.n	80028a0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ee:	4b8d      	ldr	r3, [pc, #564]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028f6:	d003      	beq.n	8002900 <HAL_RCC_OscConfig+0x8c>
 80028f8:	6863      	ldr	r3, [r4, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8198 	beq.w	8002c30 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	f013 0f02 	tst.w	r3, #2
 8002906:	d054      	beq.n	80029b2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002908:	4b86      	ldr	r3, [pc, #536]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f013 0f0c 	tst.w	r3, #12
 8002910:	d03e      	beq.n	8002990 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b84      	ldr	r3, [pc, #528]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291a:	2b08      	cmp	r3, #8
 800291c:	d033      	beq.n	8002986 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d067      	beq.n	80029f4 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b80      	ldr	r3, [pc, #512]	; (8002b28 <HAL_RCC_OscConfig+0x2b4>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe faeb 	bl	8000f04 <HAL_GetTick>
 800292e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f013 0f02 	tst.w	r3, #2
 8002938:	d153      	bne.n	80029e2 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe fae3 	bl	8000f04 <HAL_GetTick>
 800293e:	1b40      	subs	r0, r0, r5
 8002940:	2802      	cmp	r0, #2
 8002942:	d9f5      	bls.n	8002930 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002944:	2003      	movs	r0, #3
 8002946:	e178      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002948:	4a76      	ldr	r2, [pc, #472]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 800294a:	6813      	ldr	r3, [r2, #0]
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e7b5      	b.n	80028c0 <HAL_RCC_OscConfig+0x4c>
 8002954:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e7ab      	b.n	80028c0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002968:	f7fe facc 	bl	8000f04 <HAL_GetTick>
 800296c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	4b6d      	ldr	r3, [pc, #436]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002976:	d0c3      	beq.n	8002900 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe fac4 	bl	8000f04 <HAL_GetTick>
 800297c:	1b40      	subs	r0, r0, r5
 800297e:	2864      	cmp	r0, #100	; 0x64
 8002980:	d9f5      	bls.n	800296e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002982:	2003      	movs	r0, #3
 8002984:	e159      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002986:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800298e:	d1c6      	bne.n	800291e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f013 0f02 	tst.w	r3, #2
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_OscConfig+0x12e>
 800299a:	68e3      	ldr	r3, [r4, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	f040 8149 	bne.w	8002c34 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a2:	4a60      	ldr	r2, [pc, #384]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80029a4:	6813      	ldr	r3, [r2, #0]
 80029a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029aa:	6921      	ldr	r1, [r4, #16]
 80029ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029b0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	f013 0f08 	tst.w	r3, #8
 80029b8:	d040      	beq.n	8002a3c <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ba:	6963      	ldr	r3, [r4, #20]
 80029bc:	b363      	cbz	r3, 8002a18 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029be:	4b5b      	ldr	r3, [pc, #364]	; (8002b2c <HAL_RCC_OscConfig+0x2b8>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe fa9e 	bl	8000f04 <HAL_GetTick>
 80029c8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4b56      	ldr	r3, [pc, #344]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	f013 0f02 	tst.w	r3, #2
 80029d2:	d133      	bne.n	8002a3c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fa96 	bl	8000f04 <HAL_GetTick>
 80029d8:	1b40      	subs	r0, r0, r5
 80029da:	2802      	cmp	r0, #2
 80029dc:	d9f5      	bls.n	80029ca <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 80029de:	2003      	movs	r0, #3
 80029e0:	e12b      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4a50      	ldr	r2, [pc, #320]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 80029e4:	6813      	ldr	r3, [r2, #0]
 80029e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029ea:	6921      	ldr	r1, [r4, #16]
 80029ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e7de      	b.n	80029b2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80029f4:	4b4c      	ldr	r3, [pc, #304]	; (8002b28 <HAL_RCC_OscConfig+0x2b4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029fa:	f7fe fa83 	bl	8000f04 <HAL_GetTick>
 80029fe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a00:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f013 0f02 	tst.w	r3, #2
 8002a08:	d0d3      	beq.n	80029b2 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7fe fa7b 	bl	8000f04 <HAL_GetTick>
 8002a0e:	1b40      	subs	r0, r0, r5
 8002a10:	2802      	cmp	r0, #2
 8002a12:	d9f5      	bls.n	8002a00 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8002a14:	2003      	movs	r0, #3
 8002a16:	e110      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a18:	4b44      	ldr	r3, [pc, #272]	; (8002b2c <HAL_RCC_OscConfig+0x2b8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fa71 	bl	8000f04 <HAL_GetTick>
 8002a22:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a28:	f013 0f02 	tst.w	r3, #2
 8002a2c:	d006      	beq.n	8002a3c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fa69 	bl	8000f04 <HAL_GetTick>
 8002a32:	1b40      	subs	r0, r0, r5
 8002a34:	2802      	cmp	r0, #2
 8002a36:	d9f5      	bls.n	8002a24 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8002a38:	2003      	movs	r0, #3
 8002a3a:	e0fe      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	f013 0f04 	tst.w	r3, #4
 8002a42:	d078      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a44:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a4c:	d10d      	bne.n	8002a6a <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a66:	2501      	movs	r5, #1
 8002a68:	e000      	b.n	8002a6c <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCC_OscConfig+0x2bc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a74:	d021      	beq.n	8002aba <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a76:	68a3      	ldr	r3, [r4, #8]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d032      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x26e>
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d036      	beq.n	8002aee <HAL_RCC_OscConfig+0x27a>
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002a82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	671a      	str	r2, [r3, #112]	; 0x70
 8002a8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a8c:	f022 0204 	bic.w	r2, r2, #4
 8002a90:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a92:	68a3      	ldr	r3, [r4, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d034      	beq.n	8002b02 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fa34 	bl	8000f04 <HAL_GetTick>
 8002a9c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	f013 0f02 	tst.w	r3, #2
 8002aa6:	d145      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fa2c 	bl	8000f04 <HAL_GetTick>
 8002aac:	1b80      	subs	r0, r0, r6
 8002aae:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ab2:	4298      	cmp	r0, r3
 8002ab4:	d9f3      	bls.n	8002a9e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002ab6:	2003      	movs	r0, #3
 8002ab8:	e0bf      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_RCC_OscConfig+0x2bc>)
 8002abc:	6813      	ldr	r3, [r2, #0]
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fa1e 	bl	8000f04 <HAL_GetTick>
 8002ac8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_OscConfig+0x2bc>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ad2:	d1d0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7fe fa16 	bl	8000f04 <HAL_GetTick>
 8002ad8:	1b80      	subs	r0, r0, r6
 8002ada:	2802      	cmp	r0, #2
 8002adc:	d9f5      	bls.n	8002aca <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002ade:	2003      	movs	r0, #3
 8002ae0:	e0ab      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002ae4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	e7d1      	b.n	8002a92 <HAL_RCC_OscConfig+0x21e>
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002af0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002af2:	f042 0204 	orr.w	r2, r2, #4
 8002af6:	671a      	str	r2, [r3, #112]	; 0x70
 8002af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	671a      	str	r2, [r3, #112]	; 0x70
 8002b00:	e7c7      	b.n	8002a92 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe f9ff 	bl	8000f04 <HAL_GetTick>
 8002b06:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_OscConfig+0x2b0>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f013 0f02 	tst.w	r3, #2
 8002b10:	d010      	beq.n	8002b34 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe f9f7 	bl	8000f04 <HAL_GetTick>
 8002b16:	1b80      	subs	r0, r0, r6
 8002b18:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b1c:	4298      	cmp	r0, r3
 8002b1e:	d9f3      	bls.n	8002b08 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8002b20:	2003      	movs	r0, #3
 8002b22:	e08a      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	42470000 	.word	0x42470000
 8002b2c:	42470e80 	.word	0x42470e80
 8002b30:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b34:	b9e5      	cbnz	r5, 8002b70 <HAL_RCC_OscConfig+0x2fc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b36:	69a3      	ldr	r3, [r4, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d07d      	beq.n	8002c38 <HAL_RCC_OscConfig+0x3c4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b3c:	4a46      	ldr	r2, [pc, #280]	; (8002c58 <HAL_RCC_OscConfig+0x3e4>)
 8002b3e:	6892      	ldr	r2, [r2, #8]
 8002b40:	f002 020c 	and.w	r2, r2, #12
 8002b44:	2a08      	cmp	r2, #8
 8002b46:	d051      	beq.n	8002bec <HAL_RCC_OscConfig+0x378>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d017      	beq.n	8002b7c <HAL_RCC_OscConfig+0x308>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <HAL_RCC_OscConfig+0x3e8>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b52:	f7fe f9d7 	bl	8000f04 <HAL_GetTick>
 8002b56:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b58:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_RCC_OscConfig+0x3e4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b60:	d042      	beq.n	8002be8 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe f9cf 	bl	8000f04 <HAL_GetTick>
 8002b66:	1b00      	subs	r0, r0, r4
 8002b68:	2802      	cmp	r0, #2
 8002b6a:	d9f5      	bls.n	8002b58 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8002b6c:	2003      	movs	r0, #3
 8002b6e:	e064      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4a39      	ldr	r2, [pc, #228]	; (8002c58 <HAL_RCC_OscConfig+0x3e4>)
 8002b72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	e7dc      	b.n	8002b36 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_RCC_OscConfig+0x3e8>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b82:	f7fe f9bf 	bl	8000f04 <HAL_GetTick>
 8002b86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b88:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_RCC_OscConfig+0x3e4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b90:	d006      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe f9b7 	bl	8000f04 <HAL_GetTick>
 8002b96:	1b40      	subs	r0, r0, r5
 8002b98:	2802      	cmp	r0, #2
 8002b9a:	d9f5      	bls.n	8002b88 <HAL_RCC_OscConfig+0x314>
            return HAL_TIMEOUT;
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	e04c      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ba0:	69e3      	ldr	r3, [r4, #28]
 8002ba2:	6a22      	ldr	r2, [r4, #32]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ba8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002bac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002bae:	0852      	lsrs	r2, r2, #1
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002bb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bb8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002bbc:	4a26      	ldr	r2, [pc, #152]	; (8002c58 <HAL_RCC_OscConfig+0x3e4>)
 8002bbe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <HAL_RCC_OscConfig+0x3e8>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f99d 	bl	8000f04 <HAL_GetTick>
 8002bca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_RCC_OscConfig+0x3e4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe f995 	bl	8000f04 <HAL_GetTick>
 8002bda:	1b00      	subs	r0, r0, r4
 8002bdc:	2802      	cmp	r0, #2
 8002bde:	d9f5      	bls.n	8002bcc <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8002be0:	2003      	movs	r0, #3
 8002be2:	e02a      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002be4:	2000      	movs	r0, #0
 8002be6:	e028      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
 8002be8:	2000      	movs	r0, #0
 8002bea:	e026      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d026      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3ca>
        pll_config = RCC->PLLCFGR;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCC_OscConfig+0x3e4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002bf8:	69e2      	ldr	r2, [r4, #28]
 8002bfa:	4291      	cmp	r1, r2
 8002bfc:	d121      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3ce>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c02:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c04:	428a      	cmp	r2, r1
 8002c06:	d11e      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3d2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c08:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002c0e:	401a      	ands	r2, r3
 8002c10:	428a      	cmp	r2, r1
 8002c12:	d11a      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3d6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c1a:	428a      	cmp	r2, r1
 8002c1c:	d117      	bne.n	8002c4e <HAL_RCC_OscConfig+0x3da>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c1e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002c22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d114      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3de>
  return HAL_OK;
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e006      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
    return HAL_ERROR;
 8002c2c:	2001      	movs	r0, #1
}
 8002c2e:	4770      	bx	lr
        return HAL_ERROR;
 8002c30:	2001      	movs	r0, #1
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
        return HAL_ERROR;
 8002c34:	2001      	movs	r0, #1
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
  return HAL_OK;
 8002c38:	2000      	movs	r0, #0
}
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002c3e:	2001      	movs	r0, #1
 8002c40:	e7fb      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
          return HAL_ERROR;
 8002c42:	2001      	movs	r0, #1
 8002c44:	e7f9      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
 8002c46:	2001      	movs	r0, #1
 8002c48:	e7f7      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	e7f5      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
 8002c4e:	2001      	movs	r0, #1
 8002c50:	e7f3      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
 8002c52:	2001      	movs	r0, #1
 8002c54:	e7f1      	b.n	8002c3a <HAL_RCC_OscConfig+0x3c6>
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	42470060 	.word	0x42470060

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c62:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d053      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0xb6>
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d153      	bne.n	8002d1a <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c80:	d028      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002c8a:	0158      	lsls	r0, r3, #5
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	1ac0      	subs	r0, r0, r3
 8002c90:	f161 0100 	sbc.w	r1, r1, #0
 8002c94:	018e      	lsls	r6, r1, #6
 8002c96:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8002c9a:	0187      	lsls	r7, r0, #6
 8002c9c:	1a3c      	subs	r4, r7, r0
 8002c9e:	eb66 0501 	sbc.w	r5, r6, r1
 8002ca2:	00e9      	lsls	r1, r5, #3
 8002ca4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002ca8:	00e0      	lsls	r0, r4, #3
 8002caa:	18c0      	adds	r0, r0, r3
 8002cac:	f141 0100 	adc.w	r1, r1, #0
 8002cb0:	024b      	lsls	r3, r1, #9
 8002cb2:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002cb6:	0244      	lsls	r4, r0, #9
 8002cb8:	4620      	mov	r0, r4
 8002cba:	4619      	mov	r1, r3
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f7fd fa8b 	bl	80001d8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002cce:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002cd2:	e023      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002cdc:	015c      	lsls	r4, r3, #5
 8002cde:	2500      	movs	r5, #0
 8002ce0:	1ae4      	subs	r4, r4, r3
 8002ce2:	f165 0500 	sbc.w	r5, r5, #0
 8002ce6:	01ae      	lsls	r6, r5, #6
 8002ce8:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002cec:	01a7      	lsls	r7, r4, #6
 8002cee:	1b38      	subs	r0, r7, r4
 8002cf0:	eb66 0105 	sbc.w	r1, r6, r5
 8002cf4:	00cc      	lsls	r4, r1, #3
 8002cf6:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002cfa:	00c5      	lsls	r5, r0, #3
 8002cfc:	18e8      	adds	r0, r5, r3
 8002cfe:	f144 0100 	adc.w	r1, r4, #0
 8002d02:	028b      	lsls	r3, r1, #10
 8002d04:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002d08:	0284      	lsls	r4, r0, #10
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f7fd fa62 	bl	80001d8 <__aeabi_uldivmod>
 8002d14:	e7d5      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8002d16:	4803      	ldr	r0, [pc, #12]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d18:	e000      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1a:	4803      	ldr	r0, [pc, #12]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	007a1200 	.word	0x007a1200
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	f000 809b 	beq.w	8002e68 <HAL_RCC_ClockConfig+0x13c>
{
 8002d32:	b570      	push	{r4, r5, r6, lr}
 8002d34:	460d      	mov	r5, r1
 8002d36:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <HAL_RCC_ClockConfig+0x14c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	428b      	cmp	r3, r1
 8002d42:	d208      	bcs.n	8002d56 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d44:	b2cb      	uxtb	r3, r1
 8002d46:	4a4c      	ldr	r2, [pc, #304]	; (8002e78 <HAL_RCC_ClockConfig+0x14c>)
 8002d48:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	428b      	cmp	r3, r1
 8002d52:	f040 808b 	bne.w	8002e6c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	f013 0f02 	tst.w	r3, #2
 8002d5c:	d017      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5e:	f013 0f04 	tst.w	r3, #4
 8002d62:	d004      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d64:	4a45      	ldr	r2, [pc, #276]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002d66:	6893      	ldr	r3, [r2, #8]
 8002d68:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d6c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	f013 0f08 	tst.w	r3, #8
 8002d74:	d004      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d76:	4a41      	ldr	r2, [pc, #260]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002d78:	6893      	ldr	r3, [r2, #8]
 8002d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4a3e      	ldr	r2, [pc, #248]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002d82:	6893      	ldr	r3, [r2, #8]
 8002d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d88:	68a1      	ldr	r1, [r4, #8]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	f013 0f01 	tst.w	r3, #1
 8002d94:	d032      	beq.n	8002dfc <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d96:	6863      	ldr	r3, [r4, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d021      	beq.n	8002de0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9c:	1e9a      	subs	r2, r3, #2
 8002d9e:	2a01      	cmp	r2, #1
 8002da0:	d925      	bls.n	8002dee <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f012 0f02 	tst.w	r2, #2
 8002daa:	d061      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dac:	4933      	ldr	r1, [pc, #204]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002dae:	688a      	ldr	r2, [r1, #8]
 8002db0:	f022 0203 	bic.w	r2, r2, #3
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002db8:	f7fe f8a4 	bl	8000f04 <HAL_GetTick>
 8002dbc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	6862      	ldr	r2, [r4, #4]
 8002dc8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002dcc:	d016      	beq.n	8002dfc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dce:	f7fe f899 	bl	8000f04 <HAL_GetTick>
 8002dd2:	1b80      	subs	r0, r0, r6
 8002dd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dd8:	4298      	cmp	r0, r3
 8002dda:	d9f0      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002ddc:	2003      	movs	r0, #3
 8002dde:	e042      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de0:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002de8:	d1e0      	bne.n	8002dac <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002dea:	2001      	movs	r0, #1
 8002dec:	e03b      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002df6:	d1d9      	bne.n	8002dac <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
 8002dfa:	e034      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_RCC_ClockConfig+0x14c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	42ab      	cmp	r3, r5
 8002e06:	d907      	bls.n	8002e18 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e08:	b2ea      	uxtb	r2, r5
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_RCC_ClockConfig+0x14c>)
 8002e0c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	42ab      	cmp	r3, r5
 8002e16:	d12d      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	f013 0f04 	tst.w	r3, #4
 8002e1e:	d006      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002e22:	6893      	ldr	r3, [r2, #8]
 8002e24:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e28:	68e1      	ldr	r1, [r4, #12]
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	f013 0f08 	tst.w	r3, #8
 8002e34:	d007      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e36:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002e38:	6893      	ldr	r3, [r2, #8]
 8002e3a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e3e:	6921      	ldr	r1, [r4, #16]
 8002e40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e44:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e46:	f7ff ff0b 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e52:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x154>)
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	40d8      	lsrs	r0, r3
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x158>)
 8002e5a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x15c>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	f7fe f806 	bl	8000e70 <HAL_InitTick>
  return HAL_OK;
 8002e64:	2000      	movs	r0, #0
}
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
}
 8002e6a:	4770      	bx	lr
      return HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	e7fa      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
 8002e72:	e7f8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002e74:	2001      	movs	r0, #1
 8002e76:	e7f6      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
 8002e78:	40023c00 	.word	0x40023c00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	080058e8 	.word	0x080058e8
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000008 	.word	0x20000008

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e8c:	4b01      	ldr	r3, [pc, #4]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000000 	.word	0x20000000

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e9a:	f7ff fff7 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002ea6:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ea8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002eaa:	40d8      	lsrs	r0, r3
 8002eac:	bd08      	pop	{r3, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	080058f8 	.word	0x080058f8

08002eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb8:	b530      	push	{r4, r5, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ebe:	6803      	ldr	r3, [r0, #0]
 8002ec0:	f013 0f05 	tst.w	r3, #5
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	f013 0f02 	tst.w	r3, #2
 8002ecc:	d138      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	f013 0f08 	tst.w	r3, #8
 8002ed4:	f000 809b 	beq.w	800300e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ed8:	7d22      	ldrb	r2, [r4, #20]
 8002eda:	4b4e      	ldr	r3, [pc, #312]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002edc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ede:	2000      	movs	r0, #0
}
 8002ee0:	b003      	add	sp, #12
 8002ee2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002eea:	f7fe f80b 	bl	8000f04 <HAL_GetTick>
 8002eee:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ef8:	d006      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002efa:	f7fe f803 	bl	8000f04 <HAL_GetTick>
 8002efe:	1b43      	subs	r3, r0, r5
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d9f5      	bls.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8002f04:	2003      	movs	r0, #3
 8002f06:	e7eb      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f08:	6863      	ldr	r3, [r4, #4]
 8002f0a:	68a2      	ldr	r2, [r4, #8]
 8002f0c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f10:	68e2      	ldr	r2, [r4, #12]
 8002f12:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002f16:	4a41      	ldr	r2, [pc, #260]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002f22:	f7fd ffef 	bl	8000f04 <HAL_GetTick>
 8002f26:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f28:	4b3c      	ldr	r3, [pc, #240]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002f30:	d1c9      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f32:	f7fd ffe7 	bl	8000f04 <HAL_GetTick>
 8002f36:	1b40      	subs	r0, r0, r5
 8002f38:	2802      	cmp	r0, #2
 8002f3a:	d9f5      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x70>
        return HAL_TIMEOUT;
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	e7cf      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	2300      	movs	r3, #0
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002f58:	4a31      	ldr	r2, [pc, #196]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f60:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f62:	f7fd ffcf 	bl	8000f04 <HAL_GetTick>
 8002f66:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f68:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f70:	d106      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f72:	f7fd ffc7 	bl	8000f04 <HAL_GetTick>
 8002f76:	1b43      	subs	r3, r0, r5
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d9f5      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        return HAL_TIMEOUT;
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	e7af      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f80:	4b26      	ldr	r3, [pc, #152]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f84:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f88:	d012      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8002f8a:	6922      	ldr	r2, [r4, #16]
 8002f8c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d00d      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f9c:	4921      	ldr	r1, [pc, #132]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8002fa6:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	f013 0f01 	tst.w	r3, #1
 8002fae:	d112      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb0:	6923      	ldr	r3, [r4, #16]
 8002fb2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002fb6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002fba:	d01d      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002fbc:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fbe:	6893      	ldr	r3, [r2, #8]
 8002fc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fc4:	6093      	str	r3, [r2, #8]
 8002fc6:	4915      	ldr	r1, [pc, #84]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002fca:	6922      	ldr	r2, [r4, #16]
 8002fcc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	670b      	str	r3, [r1, #112]	; 0x70
 8002fd4:	e77b      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8002fd6:	f7fd ff95 	bl	8000f04 <HAL_GetTick>
 8002fda:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f013 0f02 	tst.w	r3, #2
 8002fe4:	d1e4      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fd ff8d 	bl	8000f04 <HAL_GetTick>
 8002fea:	1b40      	subs	r0, r0, r5
 8002fec:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ff0:	4298      	cmp	r0, r3
 8002ff2:	d9f3      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x124>
            return HAL_TIMEOUT;
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	e773      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff8:	4908      	ldr	r1, [pc, #32]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ffa:	688a      	ldr	r2, [r1, #8]
 8002ffc:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003000:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]
 800300c:	e7db      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  return HAL_OK;
 800300e:	2000      	movs	r0, #0
 8003010:	e766      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003012:	bf00      	nop
 8003014:	424711e0 	.word	0x424711e0
 8003018:	42470068 	.word	0x42470068
 800301c:	40023800 	.word	0x40023800
 8003020:	40007000 	.word	0x40007000
 8003024:	42470e40 	.word	0x42470e40

08003028 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003028:	2801      	cmp	r0, #1
 800302a:	d001      	beq.n	8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 800302c:	2000      	movs	r0, #0
 800302e:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003032:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8003034:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8003038:	d003      	beq.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
 800303a:	2b01      	cmp	r3, #1
 800303c:	d125      	bne.n	800308a <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800303e:	4815      	ldr	r0, [pc, #84]	; (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8003040:	4770      	bx	lr
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800304a:	d015      	beq.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800304e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003056:	4810      	ldr	r0, [pc, #64]	; (8003098 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8003058:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800305c:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800305e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003062:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003066:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800306a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800306e:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8003072:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8003076:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 800307a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800307e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003082:	4806      	ldr	r0, [pc, #24]	; (800309c <HAL_RCCEx_GetPeriphCLKFreq+0x74>)
 8003084:	fbb0 f0f3 	udiv	r0, r0, r3
 8003088:	e7e8      	b.n	800305c <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800308a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	00bb8000 	.word	0x00bb8000
 8003098:	007a1200 	.word	0x007a1200
 800309c:	00f42400 	.word	0x00f42400

080030a0 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80030a0:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80030a2:	4c0b      	ldr	r4, [pc, #44]	; (80030d0 <MX_PDM2PCM_Init+0x30>)
 80030a4:	2500      	movs	r5, #0
 80030a6:	8025      	strh	r5, [r4, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	8063      	strh	r3, [r4, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80030ac:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <MX_PDM2PCM_Init+0x34>)
 80030ae:	6062      	str	r2, [r4, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80030b0:	8123      	strh	r3, [r4, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 80030b2:	8163      	strh	r3, [r4, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80030b4:	4620      	mov	r0, r4
 80030b6:	f001 fd8b 	bl	8004bd0 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80030ba:	4907      	ldr	r1, [pc, #28]	; (80030d8 <MX_PDM2PCM_Init+0x38>)
 80030bc:	2302      	movs	r3, #2
 80030be:	800b      	strh	r3, [r1, #0]
  PDM1_filter_config.output_samples_number = 16;
 80030c0:	2310      	movs	r3, #16
 80030c2:	804b      	strh	r3, [r1, #2]
  PDM1_filter_config.mic_gain = 0;
 80030c4:	808d      	strh	r5, [r1, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80030c6:	4620      	mov	r0, r4
 80030c8:	f001 fe0c 	bl	8004ce4 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80030cc:	bd38      	pop	{r3, r4, r5, pc}
 80030ce:	bf00      	nop
 80030d0:	20000b9c 	.word	0x20000b9c
 80030d4:	7d70a3d6 	.word	0x7d70a3d6
 80030d8:	20000b94 	.word	0x20000b94

080030dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003114 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030e2:	e003      	b.n	80030ec <LoopCopyDataInit>

080030e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030ea:	3104      	adds	r1, #4

080030ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030ec:	480b      	ldr	r0, [pc, #44]	; (800311c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030f4:	d3f6      	bcc.n	80030e4 <CopyDataInit>
  ldr  r2, =_sbss
 80030f6:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030f8:	e002      	b.n	8003100 <LoopFillZerobss>

080030fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030fc:	f842 3b04 	str.w	r3, [r2], #4

08003100 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003102:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003104:	d3f9      	bcc.n	80030fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003106:	f7fd fea5 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800310a:	f001 ff3d 	bl	8004f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310e:	f7fd fc93 	bl	8000a38 <main>
  bx  lr    
 8003112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003114:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003118:	08005974 	.word	0x08005974
  ldr  r0, =_sdata
 800311c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003120:	20000474 	.word	0x20000474
  ldr  r2, =_sbss
 8003124:	20000474 	.word	0x20000474
  ldr  r3, = _ebss
 8003128:	20000be8 	.word	0x20000be8

0800312c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800312c:	e7fe      	b.n	800312c <ADC_IRQHandler>
	...

08003130 <D16_GENERIC>:
 8003130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003134:	b089      	sub	sp, #36	; 0x24
 8003136:	68d4      	ldr	r4, [r2, #12]
 8003138:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800313a:	6993      	ldr	r3, [r2, #24]
 800313c:	9407      	str	r4, [sp, #28]
 800313e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003140:	9306      	str	r3, [sp, #24]
 8003142:	9402      	str	r4, [sp, #8]
 8003144:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003148:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800314c:	69d3      	ldr	r3, [r2, #28]
 800314e:	6896      	ldr	r6, [r2, #8]
 8003150:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003152:	9103      	str	r1, [sp, #12]
 8003154:	2d00      	cmp	r5, #0
 8003156:	d066      	beq.n	8003226 <D16_GENERIC+0xf6>
 8003158:	f004 0510 	and.w	r5, r4, #16
 800315c:	f004 0420 	and.w	r4, r4, #32
 8003160:	9504      	str	r5, [sp, #16]
 8003162:	4938      	ldr	r1, [pc, #224]	; (8003244 <D16_GENERIC+0x114>)
 8003164:	9405      	str	r4, [sp, #20]
 8003166:	f04f 0e00 	mov.w	lr, #0
 800316a:	4635      	mov	r5, r6
 800316c:	e04f      	b.n	800320e <D16_GENERIC+0xde>
 800316e:	5d87      	ldrb	r7, [r0, r6]
 8003170:	7804      	ldrb	r4, [r0, #0]
 8003172:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003176:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800317a:	b2e6      	uxtb	r6, r4
 800317c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003180:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003184:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8003188:	4433      	add	r3, r6
 800318a:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800318e:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8003192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003196:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800319a:	0aa3      	lsrs	r3, r4, #10
 800319c:	4c2a      	ldr	r4, [pc, #168]	; (8003248 <D16_GENERIC+0x118>)
 800319e:	fb26 5404 	smlad	r4, r6, r4, r5
 80031a2:	4d2a      	ldr	r5, [pc, #168]	; (800324c <D16_GENERIC+0x11c>)
 80031a4:	fb26 f505 	smuad	r5, r6, r5
 80031a8:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80031ac:	eb04 080a 	add.w	r8, r4, sl
 80031b0:	eba8 080b 	sub.w	r8, r8, fp
 80031b4:	4646      	mov	r6, r8
 80031b6:	17f7      	asrs	r7, r6, #31
 80031b8:	e9cd 6700 	strd	r6, r7, [sp]
 80031bc:	9e04      	ldr	r6, [sp, #16]
 80031be:	f10e 0c01 	add.w	ip, lr, #1
 80031c2:	b16e      	cbz	r6, 80031e0 <D16_GENERIC+0xb0>
 80031c4:	6a16      	ldr	r6, [r2, #32]
 80031c6:	9f01      	ldr	r7, [sp, #4]
 80031c8:	fba8 8906 	umull	r8, r9, r8, r6
 80031cc:	fb06 9907 	mla	r9, r6, r7, r9
 80031d0:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80031d4:	f149 0900 	adc.w	r9, r9, #0
 80031d8:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80031dc:	46a3      	mov	fp, r4
 80031de:	4654      	mov	r4, sl
 80031e0:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80031e2:	9f02      	ldr	r7, [sp, #8]
 80031e4:	0424      	lsls	r4, r4, #16
 80031e6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80031ea:	f04f 0900 	mov.w	r9, #0
 80031ee:	fb0e fe06 	mul.w	lr, lr, r6
 80031f2:	fbc7 8904 	smlal	r8, r9, r7, r4
 80031f6:	9e03      	ldr	r6, [sp, #12]
 80031f8:	464f      	mov	r7, r9
 80031fa:	10bc      	asrs	r4, r7, #2
 80031fc:	f304 040f 	ssat	r4, #16, r4
 8003200:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8003204:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003206:	fa1f fe8c 	uxth.w	lr, ip
 800320a:	4574      	cmp	r4, lr
 800320c:	d90a      	bls.n	8003224 <D16_GENERIC+0xf4>
 800320e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003210:	2c01      	cmp	r4, #1
 8003212:	b2e6      	uxtb	r6, r4
 8003214:	d1ab      	bne.n	800316e <D16_GENERIC+0x3e>
 8003216:	9e05      	ldr	r6, [sp, #20]
 8003218:	f850 4b02 	ldr.w	r4, [r0], #2
 800321c:	2e00      	cmp	r6, #0
 800321e:	d0ac      	beq.n	800317a <D16_GENERIC+0x4a>
 8003220:	ba64      	rev16	r4, r4
 8003222:	e7aa      	b.n	800317a <D16_GENERIC+0x4a>
 8003224:	462e      	mov	r6, r5
 8003226:	9907      	ldr	r1, [sp, #28]
 8003228:	61d3      	str	r3, [r2, #28]
 800322a:	9b06      	ldr	r3, [sp, #24]
 800322c:	6096      	str	r6, [r2, #8]
 800322e:	2000      	movs	r0, #0
 8003230:	60d1      	str	r1, [r2, #12]
 8003232:	f8c2 a010 	str.w	sl, [r2, #16]
 8003236:	f8c2 b014 	str.w	fp, [r2, #20]
 800323a:	6193      	str	r3, [r2, #24]
 800323c:	b009      	add	sp, #36	; 0x24
 800323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003242:	bf00      	nop
 8003244:	2000000c 	.word	0x2000000c
 8003248:	00030001 	.word	0x00030001
 800324c:	00010003 	.word	0x00010003

08003250 <D24_GENERIC>:
 8003250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003254:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8003256:	6993      	ldr	r3, [r2, #24]
 8003258:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800325a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800325e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8003262:	6894      	ldr	r4, [r2, #8]
 8003264:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003268:	b089      	sub	sp, #36	; 0x24
 800326a:	9307      	str	r3, [sp, #28]
 800326c:	9503      	str	r5, [sp, #12]
 800326e:	69d3      	ldr	r3, [r2, #28]
 8003270:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8003272:	9104      	str	r1, [sp, #16]
 8003274:	2e00      	cmp	r6, #0
 8003276:	f000 8096 	beq.w	80033a6 <D24_GENERIC+0x156>
 800327a:	f005 0610 	and.w	r6, r5, #16
 800327e:	f005 0520 	and.w	r5, r5, #32
 8003282:	4954      	ldr	r1, [pc, #336]	; (80033d4 <D24_GENERIC+0x184>)
 8003284:	9605      	str	r6, [sp, #20]
 8003286:	9506      	str	r5, [sp, #24]
 8003288:	f04f 0e00 	mov.w	lr, #0
 800328c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003290:	e06a      	b.n	8003368 <D24_GENERIC+0x118>
 8003292:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8003296:	f810 8007 	ldrb.w	r8, [r0, r7]
 800329a:	f890 c000 	ldrb.w	ip, [r0]
 800329e:	042d      	lsls	r5, r5, #16
 80032a0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80032a4:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80032a8:	44ac      	add	ip, r5
 80032aa:	4438      	add	r0, r7
 80032ac:	fa5f f68c 	uxtb.w	r6, ip
 80032b0:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80032b4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80032b8:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80032bc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80032c0:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80032c4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80032c8:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80032cc:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80032d0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80032d4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80032d8:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80032dc:	4d3e      	ldr	r5, [pc, #248]	; (80033d8 <D24_GENERIC+0x188>)
 80032de:	fb26 b705 	smlad	r7, r6, r5, fp
 80032e2:	4d3e      	ldr	r5, [pc, #248]	; (80033dc <D24_GENERIC+0x18c>)
 80032e4:	fb26 4b05 	smlad	fp, r6, r5, r4
 80032e8:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80032ec:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80032f0:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80032f4:	2401      	movs	r4, #1
 80032f6:	fb26 f604 	smuad	r6, r6, r4
 80032fa:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80032fe:	9f02      	ldr	r7, [sp, #8]
 8003300:	eb0e 0c04 	add.w	ip, lr, r4
 8003304:	eb08 0406 	add.w	r4, r8, r6
 8003308:	eb05 060a 	add.w	r6, r5, sl
 800330c:	1bf6      	subs	r6, r6, r7
 800330e:	4637      	mov	r7, r6
 8003310:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8003314:	e9cd 7800 	strd	r7, r8, [sp]
 8003318:	9f05      	ldr	r7, [sp, #20]
 800331a:	b177      	cbz	r7, 800333a <D24_GENERIC+0xea>
 800331c:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8003320:	9502      	str	r5, [sp, #8]
 8003322:	fba6 9a08 	umull	r9, sl, r6, r8
 8003326:	9e01      	ldr	r6, [sp, #4]
 8003328:	fb08 aa06 	mla	sl, r8, r6, sl
 800332c:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8003330:	f14a 0700 	adc.w	r7, sl, #0
 8003334:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8003338:	4655      	mov	r5, sl
 800333a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800333c:	9f03      	ldr	r7, [sp, #12]
 800333e:	03ad      	lsls	r5, r5, #14
 8003340:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003344:	f04f 0900 	mov.w	r9, #0
 8003348:	fb0e fe06 	mul.w	lr, lr, r6
 800334c:	fbc7 8905 	smlal	r8, r9, r7, r5
 8003350:	9e04      	ldr	r6, [sp, #16]
 8003352:	464f      	mov	r7, r9
 8003354:	10bd      	asrs	r5, r7, #2
 8003356:	f305 050f 	ssat	r5, #16, r5
 800335a:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800335e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003360:	fa1f fe8c 	uxth.w	lr, ip
 8003364:	4575      	cmp	r5, lr
 8003366:	d91c      	bls.n	80033a2 <D24_GENERIC+0x152>
 8003368:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800336a:	b2ef      	uxtb	r7, r5
 800336c:	2d01      	cmp	r5, #1
 800336e:	b23e      	sxth	r6, r7
 8003370:	d18f      	bne.n	8003292 <D24_GENERIC+0x42>
 8003372:	9d06      	ldr	r5, [sp, #24]
 8003374:	b15d      	cbz	r5, 800338e <D24_GENERIC+0x13e>
 8003376:	f01e 0f01 	tst.w	lr, #1
 800337a:	d122      	bne.n	80033c2 <D24_GENERIC+0x172>
 800337c:	7805      	ldrb	r5, [r0, #0]
 800337e:	78c7      	ldrb	r7, [r0, #3]
 8003380:	7846      	ldrb	r6, [r0, #1]
 8003382:	022d      	lsls	r5, r5, #8
 8003384:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003388:	44b4      	add	ip, r6
 800338a:	3002      	adds	r0, #2
 800338c:	e78e      	b.n	80032ac <D24_GENERIC+0x5c>
 800338e:	7846      	ldrb	r6, [r0, #1]
 8003390:	f890 c002 	ldrb.w	ip, [r0, #2]
 8003394:	f810 5b03 	ldrb.w	r5, [r0], #3
 8003398:	0236      	lsls	r6, r6, #8
 800339a:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800339e:	44ac      	add	ip, r5
 80033a0:	e784      	b.n	80032ac <D24_GENERIC+0x5c>
 80033a2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80033a6:	61d3      	str	r3, [r2, #28]
 80033a8:	9b07      	ldr	r3, [sp, #28]
 80033aa:	6094      	str	r4, [r2, #8]
 80033ac:	2000      	movs	r0, #0
 80033ae:	f8c2 b00c 	str.w	fp, [r2, #12]
 80033b2:	f8c2 a010 	str.w	sl, [r2, #16]
 80033b6:	f8c2 9014 	str.w	r9, [r2, #20]
 80033ba:	6193      	str	r3, [r2, #24]
 80033bc:	b009      	add	sp, #36	; 0x24
 80033be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c2:	78c5      	ldrb	r5, [r0, #3]
 80033c4:	7887      	ldrb	r7, [r0, #2]
 80033c6:	f810 6b04 	ldrb.w	r6, [r0], #4
 80033ca:	022d      	lsls	r5, r5, #8
 80033cc:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80033d0:	44b4      	add	ip, r6
 80033d2:	e76b      	b.n	80032ac <D24_GENERIC+0x5c>
 80033d4:	2000000c 	.word	0x2000000c
 80033d8:	00030001 	.word	0x00030001
 80033dc:	00060007 	.word	0x00060007

080033e0 <D32_GENERIC>:
 80033e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80033e6:	6993      	ldr	r3, [r2, #24]
 80033e8:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80033ea:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80033ee:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80033f2:	69d6      	ldr	r6, [r2, #28]
 80033f4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80033f8:	b089      	sub	sp, #36	; 0x24
 80033fa:	9307      	str	r3, [sp, #28]
 80033fc:	9403      	str	r4, [sp, #12]
 80033fe:	6893      	ldr	r3, [r2, #8]
 8003400:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003402:	9104      	str	r1, [sp, #16]
 8003404:	2d00      	cmp	r5, #0
 8003406:	f000 809f 	beq.w	8003548 <D32_GENERIC+0x168>
 800340a:	f004 0510 	and.w	r5, r4, #16
 800340e:	f004 0420 	and.w	r4, r4, #32
 8003412:	9505      	str	r5, [sp, #20]
 8003414:	4953      	ldr	r1, [pc, #332]	; (8003564 <D32_GENERIC+0x184>)
 8003416:	9406      	str	r4, [sp, #24]
 8003418:	f04f 0c00 	mov.w	ip, #0
 800341c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003420:	461d      	mov	r5, r3
 8003422:	4617      	mov	r7, r2
 8003424:	e077      	b.n	8003516 <D32_GENERIC+0x136>
 8003426:	f818 3003 	ldrb.w	r3, [r8, r3]
 800342a:	f810 800e 	ldrb.w	r8, [r0, lr]
 800342e:	f810 e002 	ldrb.w	lr, [r0, r2]
 8003432:	7800      	ldrb	r0, [r0, #0]
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800343a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800343e:	4403      	add	r3, r0
 8003440:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8003444:	b2dc      	uxtb	r4, r3
 8003446:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800344a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800344e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8003452:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003456:	0e1b      	lsrs	r3, r3, #24
 8003458:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800345c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8003460:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003464:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8003468:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800346c:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8003470:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8003474:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003478:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800347c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003480:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8003484:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003488:	4b37      	ldr	r3, [pc, #220]	; (8003568 <D32_GENERIC+0x188>)
 800348a:	fb22 b403 	smlad	r4, r2, r3, fp
 800348e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003492:	fb2e 4803 	smlad	r8, lr, r3, r4
 8003496:	4b35      	ldr	r3, [pc, #212]	; (800356c <D32_GENERIC+0x18c>)
 8003498:	fb22 5503 	smlad	r5, r2, r3, r5
 800349c:	4b34      	ldr	r3, [pc, #208]	; (8003570 <D32_GENERIC+0x190>)
 800349e:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80034a2:	2301      	movs	r3, #1
 80034a4:	fb22 f203 	smuad	r2, r2, r3
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <D32_GENERIC+0x194>)
 80034aa:	fb2e 2503 	smlad	r5, lr, r3, r2
 80034ae:	9b02      	ldr	r3, [sp, #8]
 80034b0:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80034b4:	eb04 080a 	add.w	r8, r4, sl
 80034b8:	eba8 0803 	sub.w	r8, r8, r3
 80034bc:	4642      	mov	r2, r8
 80034be:	17d3      	asrs	r3, r2, #31
 80034c0:	e9cd 2300 	strd	r2, r3, [sp]
 80034c4:	9b05      	ldr	r3, [sp, #20]
 80034c6:	f10c 0e01 	add.w	lr, ip, #1
 80034ca:	b16b      	cbz	r3, 80034e8 <D32_GENERIC+0x108>
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	9b01      	ldr	r3, [sp, #4]
 80034d0:	9402      	str	r4, [sp, #8]
 80034d2:	fba8 8902 	umull	r8, r9, r8, r2
 80034d6:	fb02 9903 	mla	r9, r2, r3, r9
 80034da:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80034de:	f149 0900 	adc.w	r9, r9, #0
 80034e2:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80034e6:	4654      	mov	r4, sl
 80034e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034ea:	9a04      	ldr	r2, [sp, #16]
 80034ec:	fb0c fc03 	mul.w	ip, ip, r3
 80034f0:	9b03      	ldr	r3, [sp, #12]
 80034f2:	0364      	lsls	r4, r4, #13
 80034f4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80034f8:	f04f 0900 	mov.w	r9, #0
 80034fc:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003500:	464b      	mov	r3, r9
 8003502:	109b      	asrs	r3, r3, #2
 8003504:	f303 030f 	ssat	r3, #16, r3
 8003508:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800350c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800350e:	fa1f fc8e 	uxth.w	ip, lr
 8003512:	4563      	cmp	r3, ip
 8003514:	d914      	bls.n	8003540 <D32_GENERIC+0x160>
 8003516:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8003518:	b2e2      	uxtb	r2, r4
 800351a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800351e:	eb00 080e 	add.w	r8, r0, lr
 8003522:	4253      	negs	r3, r2
 8003524:	2c01      	cmp	r4, #1
 8003526:	eb08 0403 	add.w	r4, r8, r3
 800352a:	f47f af7c 	bne.w	8003426 <D32_GENERIC+0x46>
 800352e:	1d02      	adds	r2, r0, #4
 8003530:	6803      	ldr	r3, [r0, #0]
 8003532:	9806      	ldr	r0, [sp, #24]
 8003534:	b110      	cbz	r0, 800353c <D32_GENERIC+0x15c>
 8003536:	ba5b      	rev16	r3, r3
 8003538:	4610      	mov	r0, r2
 800353a:	e783      	b.n	8003444 <D32_GENERIC+0x64>
 800353c:	4610      	mov	r0, r2
 800353e:	e781      	b.n	8003444 <D32_GENERIC+0x64>
 8003540:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003544:	462b      	mov	r3, r5
 8003546:	463a      	mov	r2, r7
 8003548:	6093      	str	r3, [r2, #8]
 800354a:	9b07      	ldr	r3, [sp, #28]
 800354c:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003550:	2000      	movs	r0, #0
 8003552:	61d6      	str	r6, [r2, #28]
 8003554:	f8c2 a010 	str.w	sl, [r2, #16]
 8003558:	f8c2 9014 	str.w	r9, [r2, #20]
 800355c:	6193      	str	r3, [r2, #24]
 800355e:	b009      	add	sp, #36	; 0x24
 8003560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003564:	2000000c 	.word	0x2000000c
 8003568:	00060003 	.word	0x00060003
 800356c:	000a000c 	.word	0x000a000c
 8003570:	000c000a 	.word	0x000c000a
 8003574:	00030006 	.word	0x00030006

08003578 <D48_GENERIC>:
 8003578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357c:	b089      	sub	sp, #36	; 0x24
 800357e:	6953      	ldr	r3, [r2, #20]
 8003580:	68d4      	ldr	r4, [r2, #12]
 8003582:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003584:	9302      	str	r3, [sp, #8]
 8003586:	9400      	str	r4, [sp, #0]
 8003588:	6993      	ldr	r3, [r2, #24]
 800358a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800358c:	9307      	str	r3, [sp, #28]
 800358e:	9403      	str	r4, [sp, #12]
 8003590:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003594:	69d6      	ldr	r6, [r2, #28]
 8003596:	6893      	ldr	r3, [r2, #8]
 8003598:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800359a:	9104      	str	r1, [sp, #16]
 800359c:	2d00      	cmp	r5, #0
 800359e:	f000 80c5 	beq.w	800372c <D48_GENERIC+0x1b4>
 80035a2:	f004 0510 	and.w	r5, r4, #16
 80035a6:	f004 0420 	and.w	r4, r4, #32
 80035aa:	4967      	ldr	r1, [pc, #412]	; (8003748 <D48_GENERIC+0x1d0>)
 80035ac:	9505      	str	r5, [sp, #20]
 80035ae:	9406      	str	r4, [sp, #24]
 80035b0:	f04f 0c00 	mov.w	ip, #0
 80035b4:	4657      	mov	r7, sl
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	e09c      	b.n	80036f4 <D48_GENERIC+0x17c>
 80035ba:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80035be:	f810 b009 	ldrb.w	fp, [r0, r9]
 80035c2:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80035c6:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80035ca:	7800      	ldrb	r0, [r0, #0]
 80035cc:	0424      	lsls	r4, r4, #16
 80035ce:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80035d2:	f818 4005 	ldrb.w	r4, [r8, r5]
 80035d6:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80035da:	44a8      	add	r8, r5
 80035dc:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80035e0:	eb0b 0500 	add.w	r5, fp, r0
 80035e4:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80035e8:	fa5f f885 	uxtb.w	r8, r5
 80035ec:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80035f0:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80035f4:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80035f8:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80035fc:	0e2d      	lsrs	r5, r5, #24
 80035fe:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8003602:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8003606:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800360a:	b2e6      	uxtb	r6, r4
 800360c:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8003610:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003614:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8003618:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800361c:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8003620:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8003624:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8003628:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800362c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003630:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003634:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8003638:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800363c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003640:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003644:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8003648:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800364c:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8003650:	4c3e      	ldr	r4, [pc, #248]	; (800374c <D48_GENERIC+0x1d4>)
 8003652:	9d00      	ldr	r5, [sp, #0]
 8003654:	fb2a 5404 	smlad	r4, sl, r4, r5
 8003658:	4d3d      	ldr	r5, [pc, #244]	; (8003750 <D48_GENERIC+0x1d8>)
 800365a:	fb28 4405 	smlad	r4, r8, r5, r4
 800365e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003662:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8003666:	4c3b      	ldr	r4, [pc, #236]	; (8003754 <D48_GENERIC+0x1dc>)
 8003668:	9b01      	ldr	r3, [sp, #4]
 800366a:	fb2a 3304 	smlad	r3, sl, r4, r3
 800366e:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8003672:	fb28 3304 	smlad	r3, r8, r4, r3
 8003676:	4c38      	ldr	r4, [pc, #224]	; (8003758 <D48_GENERIC+0x1e0>)
 8003678:	fb2e 3304 	smlad	r3, lr, r4, r3
 800367c:	2501      	movs	r5, #1
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	fb2a fa05 	smuad	sl, sl, r5
 8003684:	4b35      	ldr	r3, [pc, #212]	; (800375c <D48_GENERIC+0x1e4>)
 8003686:	fb28 a803 	smlad	r8, r8, r3, sl
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <D48_GENERIC+0x1e8>)
 800368c:	fb2e 8303 	smlad	r3, lr, r3, r8
 8003690:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	9b02      	ldr	r3, [sp, #8]
 8003698:	eb04 0807 	add.w	r8, r4, r7
 800369c:	eba8 0803 	sub.w	r8, r8, r3
 80036a0:	9b05      	ldr	r3, [sp, #20]
 80036a2:	4465      	add	r5, ip
 80036a4:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80036a8:	b163      	cbz	r3, 80036c4 <D48_GENERIC+0x14c>
 80036aa:	6a17      	ldr	r7, [r2, #32]
 80036ac:	9402      	str	r4, [sp, #8]
 80036ae:	fba8 8907 	umull	r8, r9, r8, r7
 80036b2:	fb07 990b 	mla	r9, r7, fp, r9
 80036b6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80036ba:	f149 0900 	adc.w	r9, r9, #0
 80036be:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80036c2:	463c      	mov	r4, r7
 80036c4:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80036c8:	9b03      	ldr	r3, [sp, #12]
 80036ca:	02e4      	lsls	r4, r4, #11
 80036cc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80036d0:	f04f 0900 	mov.w	r9, #0
 80036d4:	fb0c fc0e 	mul.w	ip, ip, lr
 80036d8:	fbc3 8904 	smlal	r8, r9, r3, r4
 80036dc:	9b04      	ldr	r3, [sp, #16]
 80036de:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80036e2:	f304 040f 	ssat	r4, #16, r4
 80036e6:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80036ea:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80036ec:	fa1f fc85 	uxth.w	ip, r5
 80036f0:	4564      	cmp	r4, ip
 80036f2:	d919      	bls.n	8003728 <D48_GENERIC+0x1b0>
 80036f4:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80036f6:	fa5f fe84 	uxtb.w	lr, r4
 80036fa:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80036fe:	f1ce 0500 	rsb	r5, lr, #0
 8003702:	eb00 0b09 	add.w	fp, r0, r9
 8003706:	eb0b 0a05 	add.w	sl, fp, r5
 800370a:	2c01      	cmp	r4, #1
 800370c:	eb0a 0809 	add.w	r8, sl, r9
 8003710:	f47f af53 	bne.w	80035ba <D48_GENERIC+0x42>
 8003714:	9b06      	ldr	r3, [sp, #24]
 8003716:	6805      	ldr	r5, [r0, #0]
 8003718:	6844      	ldr	r4, [r0, #4]
 800371a:	3006      	adds	r0, #6
 800371c:	2b00      	cmp	r3, #0
 800371e:	f43f af63 	beq.w	80035e8 <D48_GENERIC+0x70>
 8003722:	ba6d      	rev16	r5, r5
 8003724:	ba64      	rev16	r4, r4
 8003726:	e75f      	b.n	80035e8 <D48_GENERIC+0x70>
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	46ba      	mov	sl, r7
 800372c:	6093      	str	r3, [r2, #8]
 800372e:	9b00      	ldr	r3, [sp, #0]
 8003730:	60d3      	str	r3, [r2, #12]
 8003732:	9b02      	ldr	r3, [sp, #8]
 8003734:	6153      	str	r3, [r2, #20]
 8003736:	9b07      	ldr	r3, [sp, #28]
 8003738:	61d6      	str	r6, [r2, #28]
 800373a:	2000      	movs	r0, #0
 800373c:	f8c2 a010 	str.w	sl, [r2, #16]
 8003740:	6193      	str	r3, [r2, #24]
 8003742:	b009      	add	sp, #36	; 0x24
 8003744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003748:	2000000c 	.word	0x2000000c
 800374c:	000f000a 	.word	0x000f000a
 8003750:	00060003 	.word	0x00060003
 8003754:	00150019 	.word	0x00150019
 8003758:	00190015 	.word	0x00190015
 800375c:	00030006 	.word	0x00030006
 8003760:	000a000f 	.word	0x000a000f

08003764 <D64_GENERIC>:
 8003764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003768:	b089      	sub	sp, #36	; 0x24
 800376a:	6913      	ldr	r3, [r2, #16]
 800376c:	6895      	ldr	r5, [r2, #8]
 800376e:	9303      	str	r3, [sp, #12]
 8003770:	9501      	str	r5, [sp, #4]
 8003772:	6953      	ldr	r3, [r2, #20]
 8003774:	68d5      	ldr	r5, [r2, #12]
 8003776:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	9500      	str	r5, [sp, #0]
 800377c:	6993      	ldr	r3, [r2, #24]
 800377e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003780:	9307      	str	r3, [sp, #28]
 8003782:	9505      	str	r5, [sp, #20]
 8003784:	69d3      	ldr	r3, [r2, #28]
 8003786:	9106      	str	r1, [sp, #24]
 8003788:	2c00      	cmp	r4, #0
 800378a:	f000 80d9 	beq.w	8003940 <D64_GENERIC+0x1dc>
 800378e:	6a11      	ldr	r1, [r2, #32]
 8003790:	9102      	str	r1, [sp, #8]
 8003792:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8003980 <D64_GENERIC+0x21c>
 8003796:	f04f 0c00 	mov.w	ip, #0
 800379a:	4681      	mov	r9, r0
 800379c:	e0c1      	b.n	8003922 <D64_GENERIC+0x1be>
 800379e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80037a2:	4274      	negs	r4, r6
 80037a4:	eb09 0708 	add.w	r7, r9, r8
 80037a8:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80037ac:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80037b0:	5d38      	ldrb	r0, [r7, r4]
 80037b2:	5d29      	ldrb	r1, [r5, r4]
 80037b4:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80037b8:	f819 a008 	ldrb.w	sl, [r9, r8]
 80037bc:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80037c0:	f899 7000 	ldrb.w	r7, [r9]
 80037c4:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80037c8:	4425      	add	r5, r4
 80037ca:	0409      	lsls	r1, r1, #16
 80037cc:	0400      	lsls	r0, r0, #16
 80037ce:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80037d2:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80037d6:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80037da:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80037de:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80037e2:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80037e6:	4459      	add	r1, fp
 80037e8:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80037ec:	4438      	add	r0, r7
 80037ee:	b2c5      	uxtb	r5, r0
 80037f0:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80037f4:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80037f8:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80037fc:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8003800:	0e00      	lsrs	r0, r0, #24
 8003802:	eb03 0806 	add.w	r8, r3, r6
 8003806:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800380a:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800380e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003812:	b2c8      	uxtb	r0, r1
 8003814:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8003818:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800381c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8003820:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8003824:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003828:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800382c:	0e09      	lsrs	r1, r1, #24
 800382e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8003832:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003836:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800383a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800383e:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8003842:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8003846:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800384a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800384e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003852:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003856:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800385a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800385e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003862:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003866:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800386a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800386e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8003872:	0a8b      	lsrs	r3, r1, #10
 8003874:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003878:	4939      	ldr	r1, [pc, #228]	; (8003960 <D64_GENERIC+0x1fc>)
 800387a:	9c00      	ldr	r4, [sp, #0]
 800387c:	fb28 4101 	smlad	r1, r8, r1, r4
 8003880:	4c38      	ldr	r4, [pc, #224]	; (8003964 <D64_GENERIC+0x200>)
 8003882:	fb27 1104 	smlad	r1, r7, r4, r1
 8003886:	4c38      	ldr	r4, [pc, #224]	; (8003968 <D64_GENERIC+0x204>)
 8003888:	fb20 1104 	smlad	r1, r0, r4, r1
 800388c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8003890:	fb2a 1106 	smlad	r1, sl, r6, r1
 8003894:	4c35      	ldr	r4, [pc, #212]	; (800396c <D64_GENERIC+0x208>)
 8003896:	9d01      	ldr	r5, [sp, #4]
 8003898:	fb28 5404 	smlad	r4, r8, r4, r5
 800389c:	4d33      	ldr	r5, [pc, #204]	; (800396c <D64_GENERIC+0x208>)
 800389e:	fb2a 4415 	smladx	r4, sl, r5, r4
 80038a2:	4d33      	ldr	r5, [pc, #204]	; (8003970 <D64_GENERIC+0x20c>)
 80038a4:	fb27 4405 	smlad	r4, r7, r5, r4
 80038a8:	fb20 4415 	smladx	r4, r0, r5, r4
 80038ac:	2501      	movs	r5, #1
 80038ae:	9400      	str	r4, [sp, #0]
 80038b0:	fb28 f805 	smuad	r8, r8, r5
 80038b4:	4c2f      	ldr	r4, [pc, #188]	; (8003974 <D64_GENERIC+0x210>)
 80038b6:	fb27 8704 	smlad	r7, r7, r4, r8
 80038ba:	4c2f      	ldr	r4, [pc, #188]	; (8003978 <D64_GENERIC+0x214>)
 80038bc:	fb20 7004 	smlad	r0, r0, r4, r7
 80038c0:	4c2e      	ldr	r4, [pc, #184]	; (800397c <D64_GENERIC+0x218>)
 80038c2:	fb2a 0004 	smlad	r0, sl, r4, r0
 80038c6:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 80038ca:	9902      	ldr	r1, [sp, #8]
 80038cc:	9001      	str	r0, [sp, #4]
 80038ce:	b189      	cbz	r1, 80038f4 <D64_GENERIC+0x190>
 80038d0:	9803      	ldr	r0, [sp, #12]
 80038d2:	9c04      	ldr	r4, [sp, #16]
 80038d4:	9604      	str	r6, [sp, #16]
 80038d6:	4430      	add	r0, r6
 80038d8:	1b00      	subs	r0, r0, r4
 80038da:	17c5      	asrs	r5, r0, #31
 80038dc:	460f      	mov	r7, r1
 80038de:	fba0 0101 	umull	r0, r1, r0, r1
 80038e2:	fb07 1105 	mla	r1, r7, r5, r1
 80038e6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80038ea:	f141 0100 	adc.w	r1, r1, #0
 80038ee:	0049      	lsls	r1, r1, #1
 80038f0:	9103      	str	r1, [sp, #12]
 80038f2:	460e      	mov	r6, r1
 80038f4:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 80038f6:	9905      	ldr	r1, [sp, #20]
 80038f8:	9806      	ldr	r0, [sp, #24]
 80038fa:	02b6      	lsls	r6, r6, #10
 80038fc:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003900:	f04f 0800 	mov.w	r8, #0
 8003904:	fb0c f404 	mul.w	r4, ip, r4
 8003908:	fbc1 7806 	smlal	r7, r8, r1, r6
 800390c:	4641      	mov	r1, r8
 800390e:	1089      	asrs	r1, r1, #2
 8003910:	f301 010f 	ssat	r1, #16, r1
 8003914:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8003918:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800391a:	f10c 0c01 	add.w	ip, ip, #1
 800391e:	4561      	cmp	r1, ip
 8003920:	dd0e      	ble.n	8003940 <D64_GENERIC+0x1dc>
 8003922:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8003924:	2e01      	cmp	r6, #1
 8003926:	f47f af3a 	bne.w	800379e <D64_GENERIC+0x3a>
 800392a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800392c:	06b4      	lsls	r4, r6, #26
 800392e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8003932:	f109 0908 	add.w	r9, r9, #8
 8003936:	f57f af5a 	bpl.w	80037ee <D64_GENERIC+0x8a>
 800393a:	ba40      	rev16	r0, r0
 800393c:	ba49      	rev16	r1, r1
 800393e:	e756      	b.n	80037ee <D64_GENERIC+0x8a>
 8003940:	61d3      	str	r3, [r2, #28]
 8003942:	9b03      	ldr	r3, [sp, #12]
 8003944:	9901      	ldr	r1, [sp, #4]
 8003946:	6113      	str	r3, [r2, #16]
 8003948:	9b04      	ldr	r3, [sp, #16]
 800394a:	6091      	str	r1, [r2, #8]
 800394c:	6153      	str	r3, [r2, #20]
 800394e:	9900      	ldr	r1, [sp, #0]
 8003950:	9b07      	ldr	r3, [sp, #28]
 8003952:	60d1      	str	r1, [r2, #12]
 8003954:	2000      	movs	r0, #0
 8003956:	6193      	str	r3, [r2, #24]
 8003958:	b009      	add	sp, #36	; 0x24
 800395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800395e:	bf00      	nop
 8003960:	001c0015 	.word	0x001c0015
 8003964:	000f000a 	.word	0x000f000a
 8003968:	00060003 	.word	0x00060003
 800396c:	0024002a 	.word	0x0024002a
 8003970:	002e0030 	.word	0x002e0030
 8003974:	00030006 	.word	0x00030006
 8003978:	000a000f 	.word	0x000a000f
 800397c:	0015001c 	.word	0x0015001c
 8003980:	2000000c 	.word	0x2000000c

08003984 <D80_GENERIC>:
 8003984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003988:	b08b      	sub	sp, #44	; 0x2c
 800398a:	6914      	ldr	r4, [r2, #16]
 800398c:	9404      	str	r4, [sp, #16]
 800398e:	6954      	ldr	r4, [r2, #20]
 8003990:	9405      	str	r4, [sp, #20]
 8003992:	6994      	ldr	r4, [r2, #24]
 8003994:	9409      	str	r4, [sp, #36]	; 0x24
 8003996:	6894      	ldr	r4, [r2, #8]
 8003998:	9402      	str	r4, [sp, #8]
 800399a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800399c:	68d4      	ldr	r4, [r2, #12]
 800399e:	9401      	str	r4, [sp, #4]
 80039a0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80039a2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80039a6:	9406      	str	r4, [sp, #24]
 80039a8:	9107      	str	r1, [sp, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 810f 	beq.w	8003bce <D80_GENERIC+0x24a>
 80039b0:	6a13      	ldr	r3, [r2, #32]
 80039b2:	9308      	str	r3, [sp, #32]
 80039b4:	2300      	movs	r3, #0
 80039b6:	9200      	str	r2, [sp, #0]
 80039b8:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8003c20 <D80_GENERIC+0x29c>
 80039bc:	f8cd b00c 	str.w	fp, [sp, #12]
 80039c0:	461a      	mov	r2, r3
 80039c2:	e0ed      	b.n	8003ba0 <D80_GENERIC+0x21c>
 80039c4:	fa5f fc8c 	uxtb.w	ip, ip
 80039c8:	fa0f f48c 	sxth.w	r4, ip
 80039cc:	0066      	lsls	r6, r4, #1
 80039ce:	eb06 0804 	add.w	r8, r6, r4
 80039d2:	f1cc 0500 	rsb	r5, ip, #0
 80039d6:	eb00 0108 	add.w	r1, r0, r8
 80039da:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80039de:	194b      	adds	r3, r1, r5
 80039e0:	5d49      	ldrb	r1, [r1, r5]
 80039e2:	f810 a008 	ldrb.w	sl, [r0, r8]
 80039e6:	f813 b004 	ldrb.w	fp, [r3, r4]
 80039ea:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80039ee:	f890 8000 	ldrb.w	r8, [r0]
 80039f2:	eb03 0e04 	add.w	lr, r3, r4
 80039f6:	eb0e 0705 	add.w	r7, lr, r5
 80039fa:	0409      	lsls	r1, r1, #16
 80039fc:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8003a00:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8003a04:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8003a08:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8003a0c:	eb0a 0004 	add.w	r0, sl, r4
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	f81a a004 	ldrb.w	sl, [sl, r4]
 8003a16:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8003a1a:	5d44      	ldrb	r4, [r0, r5]
 8003a1c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8003a20:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8003a24:	4428      	add	r0, r5
 8003a26:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8003a2a:	4441      	add	r1, r8
 8003a2c:	4430      	add	r0, r6
 8003a2e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8003a32:	441f      	add	r7, r3
 8003a34:	b2cd      	uxtb	r5, r1
 8003a36:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003a3a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8003a3e:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8003a42:	9b03      	ldr	r3, [sp, #12]
 8003a44:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8003a48:	0e09      	lsrs	r1, r1, #24
 8003a4a:	4433      	add	r3, r6
 8003a4c:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8003a50:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8003a54:	b2fd      	uxtb	r5, r7
 8003a56:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8003a5a:	469b      	mov	fp, r3
 8003a5c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003a60:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8003a64:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8003a68:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8003a6c:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8003a70:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8003a74:	0e3b      	lsrs	r3, r7, #24
 8003a76:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8003a7a:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8003a7e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003a82:	fa5f fe84 	uxtb.w	lr, r4
 8003a86:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8003a8a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003a8e:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003a92:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8003a96:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8003a9a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8003a9e:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8003aa2:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8003aa6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aae:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8003ab2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003ab6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003aba:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003abe:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8003ac2:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8003ac6:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8003aca:	0aa3      	lsrs	r3, r4, #10
 8003acc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003ad0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003ad4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003ad8:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8003ae2:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8003ae6:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <D80_GENERIC+0x26c>)
 8003ae8:	9901      	ldr	r1, [sp, #4]
 8003aea:	fb2b 1303 	smlad	r3, fp, r3, r1
 8003aee:	4941      	ldr	r1, [pc, #260]	; (8003bf4 <D80_GENERIC+0x270>)
 8003af0:	fb28 3301 	smlad	r3, r8, r1, r3
 8003af4:	4940      	ldr	r1, [pc, #256]	; (8003bf8 <D80_GENERIC+0x274>)
 8003af6:	fb2c 3301 	smlad	r3, ip, r1, r3
 8003afa:	4940      	ldr	r1, [pc, #256]	; (8003bfc <D80_GENERIC+0x278>)
 8003afc:	fb27 3301 	smlad	r3, r7, r1, r3
 8003b00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003b04:	fb2e 3301 	smlad	r3, lr, r1, r3
 8003b08:	493d      	ldr	r1, [pc, #244]	; (8003c00 <D80_GENERIC+0x27c>)
 8003b0a:	9c02      	ldr	r4, [sp, #8]
 8003b0c:	fb2b 4401 	smlad	r4, fp, r1, r4
 8003b10:	493c      	ldr	r1, [pc, #240]	; (8003c04 <D80_GENERIC+0x280>)
 8003b12:	fb28 4401 	smlad	r4, r8, r1, r4
 8003b16:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8003b1a:	fb2c 4101 	smlad	r1, ip, r1, r4
 8003b1e:	4c3a      	ldr	r4, [pc, #232]	; (8003c08 <D80_GENERIC+0x284>)
 8003b20:	fb27 1104 	smlad	r1, r7, r4, r1
 8003b24:	4c39      	ldr	r4, [pc, #228]	; (8003c0c <D80_GENERIC+0x288>)
 8003b26:	fb2e 1104 	smlad	r1, lr, r4, r1
 8003b2a:	9101      	str	r1, [sp, #4]
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	fb2b fb01 	smuad	fp, fp, r1
 8003b32:	4937      	ldr	r1, [pc, #220]	; (8003c10 <D80_GENERIC+0x28c>)
 8003b34:	fb28 b801 	smlad	r8, r8, r1, fp
 8003b38:	4d36      	ldr	r5, [pc, #216]	; (8003c14 <D80_GENERIC+0x290>)
 8003b3a:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8003b3e:	4d36      	ldr	r5, [pc, #216]	; (8003c18 <D80_GENERIC+0x294>)
 8003b40:	fb27 c705 	smlad	r7, r7, r5, ip
 8003b44:	4d35      	ldr	r5, [pc, #212]	; (8003c1c <D80_GENERIC+0x298>)
 8003b46:	fb2e 7105 	smlad	r1, lr, r5, r7
 8003b4a:	9102      	str	r1, [sp, #8]
 8003b4c:	9908      	ldr	r1, [sp, #32]
 8003b4e:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8003b52:	b181      	cbz	r1, 8003b76 <D80_GENERIC+0x1f2>
 8003b54:	9c04      	ldr	r4, [sp, #16]
 8003b56:	9d05      	ldr	r5, [sp, #20]
 8003b58:	9305      	str	r3, [sp, #20]
 8003b5a:	441c      	add	r4, r3
 8003b5c:	1b64      	subs	r4, r4, r5
 8003b5e:	17e7      	asrs	r7, r4, #31
 8003b60:	fba4 4501 	umull	r4, r5, r4, r1
 8003b64:	fb01 5507 	mla	r5, r1, r7, r5
 8003b68:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8003b6c:	f145 0500 	adc.w	r5, r5, #0
 8003b70:	0069      	lsls	r1, r5, #1
 8003b72:	9104      	str	r1, [sp, #16]
 8003b74:	460b      	mov	r3, r1
 8003b76:	9e00      	ldr	r6, [sp, #0]
 8003b78:	9f06      	ldr	r7, [sp, #24]
 8003b7a:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8003b7c:	025b      	lsls	r3, r3, #9
 8003b7e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003b82:	2500      	movs	r5, #0
 8003b84:	fb02 f101 	mul.w	r1, r2, r1
 8003b88:	fbc7 4503 	smlal	r4, r5, r7, r3
 8003b8c:	9c07      	ldr	r4, [sp, #28]
 8003b8e:	10ab      	asrs	r3, r5, #2
 8003b90:	f303 030f 	ssat	r3, #16, r3
 8003b94:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8003b98:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8003b9a:	3201      	adds	r2, #1
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	dd13      	ble.n	8003bc8 <D80_GENERIC+0x244>
 8003ba0:	9b00      	ldr	r3, [sp, #0]
 8003ba2:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8003ba6:	f1bc 0f01 	cmp.w	ip, #1
 8003baa:	f47f af0b 	bne.w	80039c4 <D80_GENERIC+0x40>
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	6884      	ldr	r4, [r0, #8]
 8003bb2:	069b      	lsls	r3, r3, #26
 8003bb4:	e890 0082 	ldmia.w	r0, {r1, r7}
 8003bb8:	f100 000a 	add.w	r0, r0, #10
 8003bbc:	f57f af3a 	bpl.w	8003a34 <D80_GENERIC+0xb0>
 8003bc0:	ba49      	rev16	r1, r1
 8003bc2:	ba7f      	rev16	r7, r7
 8003bc4:	ba64      	rev16	r4, r4
 8003bc6:	e735      	b.n	8003a34 <D80_GENERIC+0xb0>
 8003bc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003bcc:	4632      	mov	r2, r6
 8003bce:	9b02      	ldr	r3, [sp, #8]
 8003bd0:	6093      	str	r3, [r2, #8]
 8003bd2:	9b01      	ldr	r3, [sp, #4]
 8003bd4:	60d3      	str	r3, [r2, #12]
 8003bd6:	9b04      	ldr	r3, [sp, #16]
 8003bd8:	6113      	str	r3, [r2, #16]
 8003bda:	9b05      	ldr	r3, [sp, #20]
 8003bdc:	6153      	str	r3, [r2, #20]
 8003bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be0:	f8c2 b01c 	str.w	fp, [r2, #28]
 8003be4:	2000      	movs	r0, #0
 8003be6:	6193      	str	r3, [r2, #24]
 8003be8:	b00b      	add	sp, #44	; 0x2c
 8003bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bee:	bf00      	nop
 8003bf0:	002d0024 	.word	0x002d0024
 8003bf4:	001c0015 	.word	0x001c0015
 8003bf8:	000f000a 	.word	0x000f000a
 8003bfc:	00060003 	.word	0x00060003
 8003c00:	0037003f 	.word	0x0037003f
 8003c04:	00450049 	.word	0x00450049
 8003c08:	00490045 	.word	0x00490045
 8003c0c:	003f0037 	.word	0x003f0037
 8003c10:	00030006 	.word	0x00030006
 8003c14:	000a000f 	.word	0x000a000f
 8003c18:	0015001c 	.word	0x0015001c
 8003c1c:	0024002d 	.word	0x0024002d
 8003c20:	2000000c 	.word	0x2000000c

08003c24 <D128_GENERIC>:
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	b093      	sub	sp, #76	; 0x4c
 8003c2a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003c2c:	9005      	str	r0, [sp, #20]
 8003c2e:	4610      	mov	r0, r2
 8003c30:	9201      	str	r2, [sp, #4]
 8003c32:	6912      	ldr	r2, [r2, #16]
 8003c34:	920c      	str	r2, [sp, #48]	; 0x30
 8003c36:	4602      	mov	r2, r0
 8003c38:	6940      	ldr	r0, [r0, #20]
 8003c3a:	900d      	str	r0, [sp, #52]	; 0x34
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4614      	mov	r4, r2
 8003c40:	6992      	ldr	r2, [r2, #24]
 8003c42:	9211      	str	r2, [sp, #68]	; 0x44
 8003c44:	69c2      	ldr	r2, [r0, #28]
 8003c46:	9202      	str	r2, [sp, #8]
 8003c48:	68e2      	ldr	r2, [r4, #12]
 8003c4a:	6880      	ldr	r0, [r0, #8]
 8003c4c:	9203      	str	r2, [sp, #12]
 8003c4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c50:	9004      	str	r0, [sp, #16]
 8003c52:	920e      	str	r2, [sp, #56]	; 0x38
 8003c54:	910f      	str	r1, [sp, #60]	; 0x3c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 819b 	beq.w	8003f92 <D128_GENERIC+0x36e>
 8003c5c:	6a23      	ldr	r3, [r4, #32]
 8003c5e:	9310      	str	r3, [sp, #64]	; 0x40
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800400c <D128_GENERIC+0x3e8>
 8003c66:	9306      	str	r3, [sp, #24]
 8003c68:	e17a      	b.n	8003f60 <D128_GENERIC+0x33c>
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	9d05      	ldr	r5, [sp, #20]
 8003c6e:	b214      	sxth	r4, r2
 8003c70:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8003c74:	4250      	negs	r0, r2
 8003c76:	eb05 010a 	add.w	r1, r5, sl
 8003c7a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003c7e:	eb01 0800 	add.w	r8, r1, r0
 8003c82:	eb0b 0c04 	add.w	ip, fp, r4
 8003c86:	eb08 070c 	add.w	r7, r8, ip
 8003c8a:	183b      	adds	r3, r7, r0
 8003c8c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8003c90:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8003c94:	eb0e 0604 	add.w	r6, lr, r4
 8003c98:	9307      	str	r3, [sp, #28]
 8003c9a:	1833      	adds	r3, r6, r0
 8003c9c:	9305      	str	r3, [sp, #20]
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8003ca4:	f8cd a020 	str.w	sl, [sp, #32]
 8003ca8:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8003cac:	f813 c002 	ldrb.w	ip, [r3, r2]
 8003cb0:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8003cb4:	5c3a      	ldrb	r2, [r7, r0]
 8003cb6:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8003cba:	781f      	ldrb	r7, [r3, #0]
 8003cbc:	9b07      	ldr	r3, [sp, #28]
 8003cbe:	9d05      	ldr	r5, [sp, #20]
 8003cc0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8003cc4:	5c09      	ldrb	r1, [r1, r0]
 8003cc6:	9709      	str	r7, [sp, #36]	; 0x24
 8003cc8:	9307      	str	r3, [sp, #28]
 8003cca:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8003cce:	5c33      	ldrb	r3, [r6, r0]
 8003cd0:	0412      	lsls	r2, r2, #16
 8003cd2:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8003cd6:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8003cda:	9d08      	ldr	r5, [sp, #32]
 8003cdc:	eb06 0a04 	add.w	sl, r6, r4
 8003ce0:	0409      	lsls	r1, r1, #16
 8003ce2:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8003ce6:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8003cea:	5d36      	ldrb	r6, [r6, r4]
 8003cec:	9c05      	ldr	r4, [sp, #20]
 8003cee:	042d      	lsls	r5, r5, #16
 8003cf0:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8003cf4:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8003cf8:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8003cfc:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8003d00:	eb0a 0c00 	add.w	ip, sl, r0
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003d0a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8003d0e:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8003d12:	9d07      	ldr	r5, [sp, #28]
 8003d14:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8003d18:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8003d1c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003d1e:	4458      	add	r0, fp
 8003d20:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8003d24:	9005      	str	r0, [sp, #20]
 8003d26:	4439      	add	r1, r7
 8003d28:	442a      	add	r2, r5
 8003d2a:	44b2      	add	sl, r6
 8003d2c:	1918      	adds	r0, r3, r4
 8003d2e:	b2cb      	uxtb	r3, r1
 8003d30:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8003d34:	9e02      	ldr	r6, [sp, #8]
 8003d36:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003d3a:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8003d3e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8003d42:	441e      	add	r6, r3
 8003d44:	0e09      	lsrs	r1, r1, #24
 8003d46:	4633      	mov	r3, r6
 8003d48:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8003d4c:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8003d50:	b2d4      	uxtb	r4, r2
 8003d52:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003d56:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003d5a:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8003d5e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8003d62:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8003d66:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8003d6a:	0e12      	lsrs	r2, r2, #24
 8003d6c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8003d70:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8003d74:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8003d78:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8003d7c:	9702      	str	r7, [sp, #8]
 8003d7e:	b2c2      	uxtb	r2, r0
 8003d80:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8003d84:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8003d88:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8003d8c:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8003d90:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8003d94:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8003d98:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8003d9c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8003da0:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8003da4:	0e00      	lsrs	r0, r0, #24
 8003da6:	fa5f f68a 	uxtb.w	r6, sl
 8003daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dae:	9309      	str	r3, [sp, #36]	; 0x24
 8003db0:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8003db4:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8003db8:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8003dbc:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8003dc0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003dc4:	950a      	str	r5, [sp, #40]	; 0x28
 8003dc6:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8003dca:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8003dce:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8003dd2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003dd6:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8003dda:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003dde:	920b      	str	r2, [sp, #44]	; 0x2c
 8003de0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8003de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003de6:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8003dea:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003dee:	9307      	str	r3, [sp, #28]
 8003df0:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003df4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8003df8:	9b02      	ldr	r3, [sp, #8]
 8003dfa:	f8cd c008 	str.w	ip, [sp, #8]
 8003dfe:	4694      	mov	ip, r2
 8003e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e02:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8003e06:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8003e0a:	9a02      	ldr	r2, [sp, #8]
 8003e0c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003e10:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8003e14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003e18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e1a:	f8cd a020 	str.w	sl, [sp, #32]
 8003e1e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003e22:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003e26:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003e2a:	9b07      	ldr	r3, [sp, #28]
 8003e2c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003e30:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8003e34:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8003e38:	9a08      	ldr	r2, [sp, #32]
 8003e3a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e42:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8003e46:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003e4a:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8003e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003e52:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003e56:	0a96      	lsrs	r6, r2, #10
 8003e58:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003e5c:	9602      	str	r6, [sp, #8]
 8003e5e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003e62:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8003e66:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8003e6a:	4e53      	ldr	r6, [pc, #332]	; (8003fb8 <D128_GENERIC+0x394>)
 8003e6c:	9f03      	ldr	r7, [sp, #12]
 8003e6e:	fb2c 7606 	smlad	r6, ip, r6, r7
 8003e72:	4f52      	ldr	r7, [pc, #328]	; (8003fbc <D128_GENERIC+0x398>)
 8003e74:	fb2a 6607 	smlad	r6, sl, r7, r6
 8003e78:	4f51      	ldr	r7, [pc, #324]	; (8003fc0 <D128_GENERIC+0x39c>)
 8003e7a:	fb21 6607 	smlad	r6, r1, r7, r6
 8003e7e:	4f51      	ldr	r7, [pc, #324]	; (8003fc4 <D128_GENERIC+0x3a0>)
 8003e80:	fb24 6607 	smlad	r6, r4, r7, r6
 8003e84:	4f50      	ldr	r7, [pc, #320]	; (8003fc8 <D128_GENERIC+0x3a4>)
 8003e86:	fb28 6607 	smlad	r6, r8, r7, r6
 8003e8a:	4f50      	ldr	r7, [pc, #320]	; (8003fcc <D128_GENERIC+0x3a8>)
 8003e8c:	fb20 6607 	smlad	r6, r0, r7, r6
 8003e90:	4f4f      	ldr	r7, [pc, #316]	; (8003fd0 <D128_GENERIC+0x3ac>)
 8003e92:	fb23 6607 	smlad	r6, r3, r7, r6
 8003e96:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8003e9a:	fb25 6607 	smlad	r6, r5, r7, r6
 8003e9e:	4f4d      	ldr	r7, [pc, #308]	; (8003fd4 <D128_GENERIC+0x3b0>)
 8003ea0:	9a04      	ldr	r2, [sp, #16]
 8003ea2:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8003ea6:	4a4c      	ldr	r2, [pc, #304]	; (8003fd8 <D128_GENERIC+0x3b4>)
 8003ea8:	fb2a ee02 	smlad	lr, sl, r2, lr
 8003eac:	4f4b      	ldr	r7, [pc, #300]	; (8003fdc <D128_GENERIC+0x3b8>)
 8003eae:	fb21 ee07 	smlad	lr, r1, r7, lr
 8003eb2:	4f4b      	ldr	r7, [pc, #300]	; (8003fe0 <D128_GENERIC+0x3bc>)
 8003eb4:	fb24 ee07 	smlad	lr, r4, r7, lr
 8003eb8:	4f4a      	ldr	r7, [pc, #296]	; (8003fe4 <D128_GENERIC+0x3c0>)
 8003eba:	fb28 ee07 	smlad	lr, r8, r7, lr
 8003ebe:	4f4a      	ldr	r7, [pc, #296]	; (8003fe8 <D128_GENERIC+0x3c4>)
 8003ec0:	fb20 ee07 	smlad	lr, r0, r7, lr
 8003ec4:	4f49      	ldr	r7, [pc, #292]	; (8003fec <D128_GENERIC+0x3c8>)
 8003ec6:	fb23 e707 	smlad	r7, r3, r7, lr
 8003eca:	f8df e144 	ldr.w	lr, [pc, #324]	; 8004010 <D128_GENERIC+0x3ec>
 8003ece:	fb25 720e 	smlad	r2, r5, lr, r7
 8003ed2:	f04f 0b01 	mov.w	fp, #1
 8003ed6:	9203      	str	r2, [sp, #12]
 8003ed8:	fb2c fb0b 	smuad	fp, ip, fp
 8003edc:	4f44      	ldr	r7, [pc, #272]	; (8003ff0 <D128_GENERIC+0x3cc>)
 8003ede:	fb2a ba07 	smlad	sl, sl, r7, fp
 8003ee2:	4f44      	ldr	r7, [pc, #272]	; (8003ff4 <D128_GENERIC+0x3d0>)
 8003ee4:	fb21 aa07 	smlad	sl, r1, r7, sl
 8003ee8:	4f43      	ldr	r7, [pc, #268]	; (8003ff8 <D128_GENERIC+0x3d4>)
 8003eea:	fb24 aa07 	smlad	sl, r4, r7, sl
 8003eee:	4f43      	ldr	r7, [pc, #268]	; (8003ffc <D128_GENERIC+0x3d8>)
 8003ef0:	fb28 a707 	smlad	r7, r8, r7, sl
 8003ef4:	4a42      	ldr	r2, [pc, #264]	; (8004000 <D128_GENERIC+0x3dc>)
 8003ef6:	fb20 7702 	smlad	r7, r0, r2, r7
 8003efa:	4a42      	ldr	r2, [pc, #264]	; (8004004 <D128_GENERIC+0x3e0>)
 8003efc:	fb23 7702 	smlad	r7, r3, r2, r7
 8003f00:	4b41      	ldr	r3, [pc, #260]	; (8004008 <D128_GENERIC+0x3e4>)
 8003f02:	fb25 7303 	smlad	r3, r5, r3, r7
 8003f06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f08:	9304      	str	r3, [sp, #16]
 8003f0a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8003f0e:	b185      	cbz	r5, 8003f32 <D128_GENERIC+0x30e>
 8003f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f14:	960d      	str	r6, [sp, #52]	; 0x34
 8003f16:	4432      	add	r2, r6
 8003f18:	1a52      	subs	r2, r2, r1
 8003f1a:	17d1      	asrs	r1, r2, #31
 8003f1c:	fba2 2305 	umull	r2, r3, r2, r5
 8003f20:	fb05 3301 	mla	r3, r5, r1, r3
 8003f24:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8003f28:	f143 0300 	adc.w	r3, r3, #0
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f30:	461e      	mov	r6, r3
 8003f32:	9801      	ldr	r0, [sp, #4]
 8003f34:	9c06      	ldr	r4, [sp, #24]
 8003f36:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8003f38:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003f3a:	01f6      	lsls	r6, r6, #7
 8003f3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f40:	2300      	movs	r3, #0
 8003f42:	fbc5 2306 	smlal	r2, r3, r5, r6
 8003f46:	fb04 f101 	mul.w	r1, r4, r1
 8003f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f4c:	109b      	asrs	r3, r3, #2
 8003f4e:	f303 030f 	ssat	r3, #16, r3
 8003f52:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8003f56:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003f58:	1c62      	adds	r2, r4, #1
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	9206      	str	r2, [sp, #24]
 8003f5e:	dd18      	ble.n	8003f92 <D128_GENERIC+0x36e>
 8003f60:	9b01      	ldr	r3, [sp, #4]
 8003f62:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003f64:	2a01      	cmp	r2, #1
 8003f66:	f47f ae80 	bne.w	8003c6a <D128_GENERIC+0x46>
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	9d05      	ldr	r5, [sp, #20]
 8003f6e:	069b      	lsls	r3, r3, #26
 8003f70:	6829      	ldr	r1, [r5, #0]
 8003f72:	686a      	ldr	r2, [r5, #4]
 8003f74:	68a8      	ldr	r0, [r5, #8]
 8003f76:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8003f7a:	f105 0410 	add.w	r4, r5, #16
 8003f7e:	d506      	bpl.n	8003f8e <D128_GENERIC+0x36a>
 8003f80:	ba49      	rev16	r1, r1
 8003f82:	ba52      	rev16	r2, r2
 8003f84:	ba40      	rev16	r0, r0
 8003f86:	fa9a fa9a 	rev16.w	sl, sl
 8003f8a:	9405      	str	r4, [sp, #20]
 8003f8c:	e6cf      	b.n	8003d2e <D128_GENERIC+0x10a>
 8003f8e:	9405      	str	r4, [sp, #20]
 8003f90:	e6cd      	b.n	8003d2e <D128_GENERIC+0x10a>
 8003f92:	9a01      	ldr	r2, [sp, #4]
 8003f94:	9904      	ldr	r1, [sp, #16]
 8003f96:	6091      	str	r1, [r2, #8]
 8003f98:	9903      	ldr	r1, [sp, #12]
 8003f9a:	60d1      	str	r1, [r2, #12]
 8003f9c:	9b02      	ldr	r3, [sp, #8]
 8003f9e:	61d3      	str	r3, [r2, #28]
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fa6:	610a      	str	r2, [r1, #16]
 8003fa8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003faa:	6159      	str	r1, [r3, #20]
 8003fac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8003fae:	6199      	str	r1, [r3, #24]
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	b013      	add	sp, #76	; 0x4c
 8003fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb8:	00780069 	.word	0x00780069
 8003fbc:	005b004e 	.word	0x005b004e
 8003fc0:	00420037 	.word	0x00420037
 8003fc4:	002d0024 	.word	0x002d0024
 8003fc8:	001c0015 	.word	0x001c0015
 8003fcc:	000f000a 	.word	0x000f000a
 8003fd0:	00060003 	.word	0x00060003
 8003fd4:	00880096 	.word	0x00880096
 8003fd8:	00a200ac 	.word	0x00a200ac
 8003fdc:	00b400ba 	.word	0x00b400ba
 8003fe0:	00be00c0 	.word	0x00be00c0
 8003fe4:	00c000be 	.word	0x00c000be
 8003fe8:	00ba00b4 	.word	0x00ba00b4
 8003fec:	00ac00a2 	.word	0x00ac00a2
 8003ff0:	00030006 	.word	0x00030006
 8003ff4:	000a000f 	.word	0x000a000f
 8003ff8:	0015001c 	.word	0x0015001c
 8003ffc:	0024002d 	.word	0x0024002d
 8004000:	00370042 	.word	0x00370042
 8004004:	004e005b 	.word	0x004e005b
 8004008:	00690078 	.word	0x00690078
 800400c:	2000000c 	.word	0x2000000c
 8004010:	00960088 	.word	0x00960088

08004014 <D16_1CH_HTONS_VOL_HP>:
 8004014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004018:	4691      	mov	r9, r2
 800401a:	b083      	sub	sp, #12
 800401c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800401e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004022:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4680      	mov	r8, r0
 800402a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800402e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8004032:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004036:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800403a:	9401      	str	r4, [sp, #4]
 800403c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8004040:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8004044:	2a00      	cmp	r2, #0
 8004046:	d04e      	beq.n	80040e6 <D16_1CH_HTONS_VOL_HP+0xd2>
 8004048:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 80040f4 <D16_1CH_HTONS_VOL_HP+0xe0>
 800404c:	1e8c      	subs	r4, r1, #2
 800404e:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 8004052:	f858 2b02 	ldr.w	r2, [r8], #2
 8004056:	ba52      	rev16	r2, r2
 8004058:	b2d6      	uxtb	r6, r2
 800405a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800405e:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 8004062:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8004066:	4413      	add	r3, r2
 8004068:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800406c:	f3c2 0109 	ubfx	r1, r2, #0, #10
 8004070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004074:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004078:	0a93      	lsrs	r3, r2, #10
 800407a:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <D16_1CH_HTONS_VOL_HP+0xd8>)
 800407c:	fb21 5202 	smlad	r2, r1, r2, r5
 8004080:	4d1b      	ldr	r5, [pc, #108]	; (80040f0 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8004082:	fb21 f505 	smuad	r5, r1, r5
 8004086:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800408a:	4410      	add	r0, r2
 800408c:	1bc0      	subs	r0, r0, r7
 800408e:	17c7      	asrs	r7, r0, #31
 8004090:	fba0 010e 	umull	r0, r1, r0, lr
 8004094:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004098:	fb0e 1107 	mla	r1, lr, r7, r1
 800409c:	f141 0100 	adc.w	r1, r1, #0
 80040a0:	0448      	lsls	r0, r1, #17
 80040a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80040a6:	2700      	movs	r7, #0
 80040a8:	fbc0 670a 	smlal	r6, r7, r0, sl
 80040ac:	45d8      	cmp	r8, fp
 80040ae:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80040b2:	ea4f 01a7 	mov.w	r1, r7, asr #2
 80040b6:	4617      	mov	r7, r2
 80040b8:	f301 010f 	ssat	r1, #16, r1
 80040bc:	f824 1f02 	strh.w	r1, [r4, #2]!
 80040c0:	d1c7      	bne.n	8004052 <D16_1CH_HTONS_VOL_HP+0x3e>
 80040c2:	9901      	ldr	r1, [sp, #4]
 80040c4:	f8c9 301c 	str.w	r3, [r9, #28]
 80040c8:	9b00      	ldr	r3, [sp, #0]
 80040ca:	f8c9 0010 	str.w	r0, [r9, #16]
 80040ce:	2000      	movs	r0, #0
 80040d0:	f8c9 5008 	str.w	r5, [r9, #8]
 80040d4:	f8c9 100c 	str.w	r1, [r9, #12]
 80040d8:	f8c9 2014 	str.w	r2, [r9, #20]
 80040dc:	f8c9 3018 	str.w	r3, [r9, #24]
 80040e0:	b003      	add	sp, #12
 80040e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e6:	463a      	mov	r2, r7
 80040e8:	4621      	mov	r1, r4
 80040ea:	e7eb      	b.n	80040c4 <D16_1CH_HTONS_VOL_HP+0xb0>
 80040ec:	00030001 	.word	0x00030001
 80040f0:	00010003 	.word	0x00010003
 80040f4:	2000000c 	.word	0x2000000c

080040f8 <D24_1CH_HTONS_VOL_HP>:
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fc:	b089      	sub	sp, #36	; 0x24
 80040fe:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004100:	6996      	ldr	r6, [r2, #24]
 8004102:	9304      	str	r3, [sp, #16]
 8004104:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8004106:	9207      	str	r2, [sp, #28]
 8004108:	6915      	ldr	r5, [r2, #16]
 800410a:	6954      	ldr	r4, [r2, #20]
 800410c:	9606      	str	r6, [sp, #24]
 800410e:	6893      	ldr	r3, [r2, #8]
 8004110:	69d6      	ldr	r6, [r2, #28]
 8004112:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8004116:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800411a:	9a04      	ldr	r2, [sp, #16]
 800411c:	9705      	str	r7, [sp, #20]
 800411e:	2a00      	cmp	r2, #0
 8004120:	d07e      	beq.n	8004220 <D24_1CH_HTONS_VOL_HP+0x128>
 8004122:	f1a1 0b02 	sub.w	fp, r1, #2
 8004126:	2700      	movs	r7, #0
 8004128:	46a8      	mov	r8, r5
 800412a:	f8cd b004 	str.w	fp, [sp, #4]
 800412e:	4655      	mov	r5, sl
 8004130:	46e3      	mov	fp, ip
 8004132:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800422c <D24_1CH_HTONS_VOL_HP+0x134>
 8004136:	46ba      	mov	sl, r7
 8004138:	469c      	mov	ip, r3
 800413a:	e055      	b.n	80041e8 <D24_1CH_HTONS_VOL_HP+0xf0>
 800413c:	7802      	ldrb	r2, [r0, #0]
 800413e:	78c3      	ldrb	r3, [r0, #3]
 8004140:	7841      	ldrb	r1, [r0, #1]
 8004142:	0212      	lsls	r2, r2, #8
 8004144:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8004148:	440b      	add	r3, r1
 800414a:	3002      	adds	r0, #2
 800414c:	b2d9      	uxtb	r1, r3
 800414e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004152:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8004156:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004160:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004164:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8004168:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800416c:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8004170:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004174:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800417a:	fb23 b102 	smlad	r1, r3, r2, fp
 800417e:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <D24_1CH_HTONS_VOL_HP+0x130>)
 8004180:	fb23 cb02 	smlad	fp, r3, r2, ip
 8004184:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8004188:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800418c:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8004190:	2201      	movs	r2, #1
 8004192:	fb23 f702 	smuad	r7, r3, r2
 8004196:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800419a:	eb01 0208 	add.w	r2, r1, r8
 800419e:	1b12      	subs	r2, r2, r4
 80041a0:	17d4      	asrs	r4, r2, #31
 80041a2:	fba2 2305 	umull	r2, r3, r2, r5
 80041a6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80041aa:	fb05 3304 	mla	r3, r5, r4, r3
 80041ae:	f143 0300 	adc.w	r3, r3, #0
 80041b2:	9c05      	ldr	r4, [sp, #20]
 80041b4:	03da      	lsls	r2, r3, #15
 80041b6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80041ba:	f04f 0900 	mov.w	r9, #0
 80041be:	fbc4 8902 	smlal	r8, r9, r4, r2
 80041c2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80041c6:	9a01      	ldr	r2, [sp, #4]
 80041c8:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	109b      	asrs	r3, r3, #2
 80041d0:	f303 030f 	ssat	r3, #16, r3
 80041d4:	f822 3f02 	strh.w	r3, [r2, #2]!
 80041d8:	9b04      	ldr	r3, [sp, #16]
 80041da:	9201      	str	r2, [sp, #4]
 80041dc:	f10a 0a01 	add.w	sl, sl, #1
 80041e0:	459a      	cmp	sl, r3
 80041e2:	44bc      	add	ip, r7
 80041e4:	460c      	mov	r4, r1
 80041e6:	d00b      	beq.n	8004200 <D24_1CH_HTONS_VOL_HP+0x108>
 80041e8:	f01a 0f01 	tst.w	sl, #1
 80041ec:	d0a6      	beq.n	800413c <D24_1CH_HTONS_VOL_HP+0x44>
 80041ee:	78c2      	ldrb	r2, [r0, #3]
 80041f0:	7883      	ldrb	r3, [r0, #2]
 80041f2:	f810 1b04 	ldrb.w	r1, [r0], #4
 80041f6:	0212      	lsls	r2, r2, #8
 80041f8:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80041fc:	440b      	add	r3, r1
 80041fe:	e7a5      	b.n	800414c <D24_1CH_HTONS_VOL_HP+0x54>
 8004200:	4663      	mov	r3, ip
 8004202:	4645      	mov	r5, r8
 8004204:	46dc      	mov	ip, fp
 8004206:	9807      	ldr	r0, [sp, #28]
 8004208:	6141      	str	r1, [r0, #20]
 800420a:	9906      	ldr	r1, [sp, #24]
 800420c:	6083      	str	r3, [r0, #8]
 800420e:	f8c0 c00c 	str.w	ip, [r0, #12]
 8004212:	61c6      	str	r6, [r0, #28]
 8004214:	6105      	str	r5, [r0, #16]
 8004216:	6181      	str	r1, [r0, #24]
 8004218:	2000      	movs	r0, #0
 800421a:	b009      	add	sp, #36	; 0x24
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004220:	4621      	mov	r1, r4
 8004222:	e7f0      	b.n	8004206 <D24_1CH_HTONS_VOL_HP+0x10e>
 8004224:	00030001 	.word	0x00030001
 8004228:	00060007 	.word	0x00060007
 800422c:	2000000c 	.word	0x2000000c

08004230 <D32_1CH_HTONS_VOL_HP>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	4692      	mov	sl, r2
 8004236:	b087      	sub	sp, #28
 8004238:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800423a:	f8da 3018 	ldr.w	r3, [sl, #24]
 800423e:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	f8da 4010 	ldr.w	r4, [sl, #16]
 8004248:	f8da 8014 	ldr.w	r8, [sl, #20]
 800424c:	f8da 601c 	ldr.w	r6, [sl, #28]
 8004250:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004254:	f8da e00c 	ldr.w	lr, [sl, #12]
 8004258:	9501      	str	r5, [sp, #4]
 800425a:	f8da c020 	ldr.w	ip, [sl, #32]
 800425e:	2a00      	cmp	r2, #0
 8004260:	d07b      	beq.n	800435a <D32_1CH_HTONS_VOL_HP+0x12a>
 8004262:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004266:	4f3e      	ldr	r7, [pc, #248]	; (8004360 <D32_1CH_HTONS_VOL_HP+0x130>)
 8004268:	f8cd c00c 	str.w	ip, [sp, #12]
 800426c:	9202      	str	r2, [sp, #8]
 800426e:	460d      	mov	r5, r1
 8004270:	46a1      	mov	r9, r4
 8004272:	4684      	mov	ip, r0
 8004274:	f8cd a014 	str.w	sl, [sp, #20]
 8004278:	f85c 1b04 	ldr.w	r1, [ip], #4
 800427c:	ba49      	rev16	r1, r1
 800427e:	b2c8      	uxtb	r0, r1
 8004280:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004284:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8004288:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800428c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004290:	0e09      	lsrs	r1, r1, #24
 8004292:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004296:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800429a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800429e:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80042a2:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 80042a6:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 80042aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80042ae:	f3c6 0109 	ubfx	r1, r6, #0, #10
 80042b2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80042b6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80042ba:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80042be:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80042c2:	4a28      	ldr	r2, [pc, #160]	; (8004364 <D32_1CH_HTONS_VOL_HP+0x134>)
 80042c4:	fb20 e202 	smlad	r2, r0, r2, lr
 80042c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80042cc:	fb2a 2101 	smlad	r1, sl, r1, r2
 80042d0:	4a25      	ldr	r2, [pc, #148]	; (8004368 <D32_1CH_HTONS_VOL_HP+0x138>)
 80042d2:	fb20 3302 	smlad	r3, r0, r2, r3
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <D32_1CH_HTONS_VOL_HP+0x13c>)
 80042d8:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80042dc:	2301      	movs	r3, #1
 80042de:	fb20 f003 	smuad	r0, r0, r3
 80042e2:	4b23      	ldr	r3, [pc, #140]	; (8004370 <D32_1CH_HTONS_VOL_HP+0x140>)
 80042e4:	fb2a 0303 	smlad	r3, sl, r3, r0
 80042e8:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 80042ec:	9c03      	ldr	r4, [sp, #12]
 80042ee:	eb02 0009 	add.w	r0, r2, r9
 80042f2:	eba0 0008 	sub.w	r0, r0, r8
 80042f6:	ea4f 7be0 	mov.w	fp, r0, asr #31
 80042fa:	fba0 0104 	umull	r0, r1, r0, r4
 80042fe:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004302:	fb04 110b 	mla	r1, r4, fp, r1
 8004306:	f141 0100 	adc.w	r1, r1, #0
 800430a:	9c01      	ldr	r4, [sp, #4]
 800430c:	0388      	lsls	r0, r1, #14
 800430e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004312:	f04f 0900 	mov.w	r9, #0
 8004316:	fbc0 8904 	smlal	r8, r9, r0, r4
 800431a:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800431e:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8004322:	f300 000f 	ssat	r0, #16, r0
 8004326:	9902      	ldr	r1, [sp, #8]
 8004328:	f825 0b02 	strh.w	r0, [r5], #2
 800432c:	428d      	cmp	r5, r1
 800432e:	4690      	mov	r8, r2
 8004330:	d1a2      	bne.n	8004278 <D32_1CH_HTONS_VOL_HP+0x48>
 8004332:	f8dd a014 	ldr.w	sl, [sp, #20]
 8004336:	464c      	mov	r4, r9
 8004338:	f8ca 3008 	str.w	r3, [sl, #8]
 800433c:	9b04      	ldr	r3, [sp, #16]
 800433e:	f8ca e00c 	str.w	lr, [sl, #12]
 8004342:	2000      	movs	r0, #0
 8004344:	f8ca 601c 	str.w	r6, [sl, #28]
 8004348:	f8ca 4010 	str.w	r4, [sl, #16]
 800434c:	f8ca 2014 	str.w	r2, [sl, #20]
 8004350:	f8ca 3018 	str.w	r3, [sl, #24]
 8004354:	b007      	add	sp, #28
 8004356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435a:	4642      	mov	r2, r8
 800435c:	e7ec      	b.n	8004338 <D32_1CH_HTONS_VOL_HP+0x108>
 800435e:	bf00      	nop
 8004360:	2000000c 	.word	0x2000000c
 8004364:	00060003 	.word	0x00060003
 8004368:	000a000c 	.word	0x000a000c
 800436c:	000c000a 	.word	0x000c000a
 8004370:	00030006 	.word	0x00030006

08004374 <D48_1CH_HTONS_VOL_HP>:
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	4613      	mov	r3, r2
 800437a:	461c      	mov	r4, r3
 800437c:	b087      	sub	sp, #28
 800437e:	4625      	mov	r5, r4
 8004380:	4626      	mov	r6, r4
 8004382:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8004384:	9205      	str	r2, [sp, #20]
 8004386:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004388:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800438c:	9501      	str	r5, [sp, #4]
 800438e:	4680      	mov	r8, r0
 8004390:	6a35      	ldr	r5, [r6, #32]
 8004392:	6918      	ldr	r0, [r3, #16]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	9304      	str	r3, [sp, #16]
 8004398:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	9502      	str	r5, [sp, #8]
 80043a0:	68e4      	ldr	r4, [r4, #12]
 80043a2:	2a00      	cmp	r2, #0
 80043a4:	f000 808c 	beq.w	80044c0 <D48_1CH_HTONS_VOL_HP+0x14c>
 80043a8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80043ac:	4d45      	ldr	r5, [pc, #276]	; (80044c4 <D48_1CH_HTONS_VOL_HP+0x150>)
 80043ae:	9203      	str	r2, [sp, #12]
 80043b0:	468c      	mov	ip, r1
 80043b2:	e898 0044 	ldmia.w	r8, {r2, r6}
 80043b6:	f108 0806 	add.w	r8, r8, #6
 80043ba:	ba52      	rev16	r2, r2
 80043bc:	ba76      	rev16	r6, r6
 80043be:	b2d7      	uxtb	r7, r2
 80043c0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80043c4:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80043c8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80043cc:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80043d0:	0e12      	lsrs	r2, r2, #24
 80043d2:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80043d6:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80043da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80043de:	fa5f fb86 	uxtb.w	fp, r6
 80043e2:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80043e6:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80043ea:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 80043ee:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80043f2:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80043f6:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80043fa:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80043fe:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8004402:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004406:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800440a:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800440e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004412:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004416:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800441a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800441e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8004422:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8004426:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <D48_1CH_HTONS_VOL_HP+0x154>)
 8004428:	fb2a 4202 	smlad	r2, sl, r2, r4
 800442c:	4927      	ldr	r1, [pc, #156]	; (80044cc <D48_1CH_HTONS_VOL_HP+0x158>)
 800442e:	fb27 2201 	smlad	r2, r7, r1, r2
 8004432:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004436:	fb26 2201 	smlad	r2, r6, r1, r2
 800443a:	4925      	ldr	r1, [pc, #148]	; (80044d0 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800443c:	fb2a 3401 	smlad	r4, sl, r1, r3
 8004440:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8004444:	fb27 4403 	smlad	r4, r7, r3, r4
 8004448:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <D48_1CH_HTONS_VOL_HP+0x160>)
 800444a:	fb26 4403 	smlad	r4, r6, r3, r4
 800444e:	2101      	movs	r1, #1
 8004450:	fb2a fa01 	smuad	sl, sl, r1
 8004454:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <D48_1CH_HTONS_VOL_HP+0x164>)
 8004456:	fb27 a703 	smlad	r7, r7, r3, sl
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <D48_1CH_HTONS_VOL_HP+0x168>)
 800445c:	fb26 7303 	smlad	r3, r6, r3, r7
 8004460:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8004464:	9e02      	ldr	r6, [sp, #8]
 8004466:	9f01      	ldr	r7, [sp, #4]
 8004468:	4410      	add	r0, r2
 800446a:	eba0 0009 	sub.w	r0, r0, r9
 800446e:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8004472:	fba0 0106 	umull	r0, r1, r0, r6
 8004476:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800447a:	fb06 110a 	mla	r1, r6, sl, r1
 800447e:	f141 0100 	adc.w	r1, r1, #0
 8004482:	0308      	lsls	r0, r1, #12
 8004484:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8004488:	f04f 0a00 	mov.w	sl, #0
 800448c:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8004490:	4657      	mov	r7, sl
 8004492:	10b8      	asrs	r0, r7, #2
 8004494:	f300 000f 	ssat	r0, #16, r0
 8004498:	f82c 0b02 	strh.w	r0, [ip], #2
 800449c:	0048      	lsls	r0, r1, #1
 800449e:	9903      	ldr	r1, [sp, #12]
 80044a0:	458c      	cmp	ip, r1
 80044a2:	4691      	mov	r9, r2
 80044a4:	d185      	bne.n	80043b2 <D48_1CH_HTONS_VOL_HP+0x3e>
 80044a6:	9d05      	ldr	r5, [sp, #20]
 80044a8:	616a      	str	r2, [r5, #20]
 80044aa:	9a04      	ldr	r2, [sp, #16]
 80044ac:	6128      	str	r0, [r5, #16]
 80044ae:	2000      	movs	r0, #0
 80044b0:	60ab      	str	r3, [r5, #8]
 80044b2:	60ec      	str	r4, [r5, #12]
 80044b4:	f8c5 e01c 	str.w	lr, [r5, #28]
 80044b8:	61aa      	str	r2, [r5, #24]
 80044ba:	b007      	add	sp, #28
 80044bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c0:	464a      	mov	r2, r9
 80044c2:	e7f0      	b.n	80044a6 <D48_1CH_HTONS_VOL_HP+0x132>
 80044c4:	2000000c 	.word	0x2000000c
 80044c8:	000f000a 	.word	0x000f000a
 80044cc:	00060003 	.word	0x00060003
 80044d0:	00150019 	.word	0x00150019
 80044d4:	00190015 	.word	0x00190015
 80044d8:	00030006 	.word	0x00030006
 80044dc:	000a000f 	.word	0x000a000f

080044e0 <D64_1CH_HTONS_VOL_HP>:
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	b089      	sub	sp, #36	; 0x24
 80044e6:	4614      	mov	r4, r2
 80044e8:	9207      	str	r2, [sp, #28]
 80044ea:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80044ec:	f8d2 c010 	ldr.w	ip, [r2, #16]
 80044f0:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80044f4:	6992      	ldr	r2, [r2, #24]
 80044f6:	9206      	str	r2, [sp, #24]
 80044f8:	68e2      	ldr	r2, [r4, #12]
 80044fa:	9201      	str	r2, [sp, #4]
 80044fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044fe:	9203      	str	r2, [sp, #12]
 8004500:	6a22      	ldr	r2, [r4, #32]
 8004502:	69e5      	ldr	r5, [r4, #28]
 8004504:	68a6      	ldr	r6, [r4, #8]
 8004506:	9204      	str	r2, [sp, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80b0 	beq.w	800466e <D64_1CH_HTONS_VOL_HP+0x18e>
 800450e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004512:	4f58      	ldr	r7, [pc, #352]	; (8004674 <D64_1CH_HTONS_VOL_HP+0x194>)
 8004514:	9305      	str	r3, [sp, #20]
 8004516:	9102      	str	r1, [sp, #8]
 8004518:	f850 2b08 	ldr.w	r2, [r0], #8
 800451c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004520:	ba52      	rev16	r2, r2
 8004522:	fa93 f993 	rev16.w	r9, r3
 8004526:	b2d4      	uxtb	r4, r2
 8004528:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800452c:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8004530:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8004534:	9901      	ldr	r1, [sp, #4]
 8004536:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800453a:	0e12      	lsrs	r2, r2, #24
 800453c:	44ab      	add	fp, r5
 800453e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004542:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8004546:	fa5f f289 	uxtb.w	r2, r9
 800454a:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800454e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8004552:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8004556:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800455a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800455e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8004562:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8004566:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800456a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800456e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8004572:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8004576:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800457a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800457e:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8004582:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004586:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800458a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800458e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004592:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004596:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800459a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800459e:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 80045a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80045a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80045aa:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80045ae:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80045b2:	ea4f 2599 	mov.w	r5, r9, lsr #10
 80045b6:	4b30      	ldr	r3, [pc, #192]	; (8004678 <D64_1CH_HTONS_VOL_HP+0x198>)
 80045b8:	fb2b 1303 	smlad	r3, fp, r3, r1
 80045bc:	492f      	ldr	r1, [pc, #188]	; (800467c <D64_1CH_HTONS_VOL_HP+0x19c>)
 80045be:	fb24 3301 	smlad	r3, r4, r1, r3
 80045c2:	492f      	ldr	r1, [pc, #188]	; (8004680 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80045c4:	fb22 3301 	smlad	r3, r2, r1, r3
 80045c8:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80045cc:	fb2e 390a 	smlad	r9, lr, sl, r3
 80045d0:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80045d2:	fb2b 6603 	smlad	r6, fp, r3, r6
 80045d6:	fb2e 6613 	smladx	r6, lr, r3, r6
 80045da:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80045dc:	fb24 6603 	smlad	r6, r4, r3, r6
 80045e0:	fb22 6313 	smladx	r3, r2, r3, r6
 80045e4:	f04f 0a01 	mov.w	sl, #1
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	fb2b fb0a 	smuad	fp, fp, sl
 80045ee:	4b27      	ldr	r3, [pc, #156]	; (800468c <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80045f0:	fb24 ba03 	smlad	sl, r4, r3, fp
 80045f4:	4b26      	ldr	r3, [pc, #152]	; (8004690 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80045f6:	fb22 a203 	smlad	r2, r2, r3, sl
 80045fa:	4b26      	ldr	r3, [pc, #152]	; (8004694 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80045fc:	fb2e 2603 	smlad	r6, lr, r3, r2
 8004600:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8004604:	eb0a 020c 	add.w	r2, sl, ip
 8004608:	9c04      	ldr	r4, [sp, #16]
 800460a:	9903      	ldr	r1, [sp, #12]
 800460c:	eba2 0208 	sub.w	r2, r2, r8
 8004610:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8004614:	fba2 2304 	umull	r2, r3, r2, r4
 8004618:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800461c:	fb04 3309 	mla	r3, r4, r9, r3
 8004620:	f143 0300 	adc.w	r3, r3, #0
 8004624:	02da      	lsls	r2, r3, #11
 8004626:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800462a:	f04f 0900 	mov.w	r9, #0
 800462e:	fbc1 8902 	smlal	r8, r9, r1, r2
 8004632:	9902      	ldr	r1, [sp, #8]
 8004634:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8004638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800463c:	f302 020f 	ssat	r2, #16, r2
 8004640:	9b05      	ldr	r3, [sp, #20]
 8004642:	f821 2b02 	strh.w	r2, [r1], #2
 8004646:	4299      	cmp	r1, r3
 8004648:	9102      	str	r1, [sp, #8]
 800464a:	46d0      	mov	r8, sl
 800464c:	f47f af64 	bne.w	8004518 <D64_1CH_HTONS_VOL_HP+0x38>
 8004650:	9a07      	ldr	r2, [sp, #28]
 8004652:	9901      	ldr	r1, [sp, #4]
 8004654:	60d1      	str	r1, [r2, #12]
 8004656:	9906      	ldr	r1, [sp, #24]
 8004658:	6096      	str	r6, [r2, #8]
 800465a:	2000      	movs	r0, #0
 800465c:	61d5      	str	r5, [r2, #28]
 800465e:	f8c2 c010 	str.w	ip, [r2, #16]
 8004662:	f8c2 a014 	str.w	sl, [r2, #20]
 8004666:	6191      	str	r1, [r2, #24]
 8004668:	b009      	add	sp, #36	; 0x24
 800466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800466e:	46c2      	mov	sl, r8
 8004670:	4622      	mov	r2, r4
 8004672:	e7ee      	b.n	8004652 <D64_1CH_HTONS_VOL_HP+0x172>
 8004674:	2000000c 	.word	0x2000000c
 8004678:	001c0015 	.word	0x001c0015
 800467c:	000f000a 	.word	0x000f000a
 8004680:	00060003 	.word	0x00060003
 8004684:	0024002a 	.word	0x0024002a
 8004688:	002e0030 	.word	0x002e0030
 800468c:	00030006 	.word	0x00030006
 8004690:	000a000f 	.word	0x000a000f
 8004694:	0015001c 	.word	0x0015001c

08004698 <D80_1CH_HTONS_VOL_HP>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	4613      	mov	r3, r2
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	4686      	mov	lr, r0
 80046a2:	6918      	ldr	r0, [r3, #16]
 80046a4:	9000      	str	r0, [sp, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	461c      	mov	r4, r3
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	6983      	ldr	r3, [r0, #24]
 80046b0:	9306      	str	r3, [sp, #24]
 80046b2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80046b6:	69c3      	ldr	r3, [r0, #28]
 80046b8:	68c0      	ldr	r0, [r0, #12]
 80046ba:	9207      	str	r2, [sp, #28]
 80046bc:	9001      	str	r0, [sp, #4]
 80046be:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80046c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80046c2:	9003      	str	r0, [sp, #12]
 80046c4:	6a20      	ldr	r0, [r4, #32]
 80046c6:	9004      	str	r0, [sp, #16]
 80046c8:	2a00      	cmp	r2, #0
 80046ca:	f000 80d2 	beq.w	8004872 <D80_1CH_HTONS_VOL_HP+0x1da>
 80046ce:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80046d2:	4869      	ldr	r0, [pc, #420]	; (8004878 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80046d4:	9205      	str	r2, [sp, #20]
 80046d6:	461c      	mov	r4, r3
 80046d8:	f8de 5000 	ldr.w	r5, [lr]
 80046dc:	f8de 2004 	ldr.w	r2, [lr, #4]
 80046e0:	f8de 3008 	ldr.w	r3, [lr, #8]
 80046e4:	f10e 0e0a 	add.w	lr, lr, #10
 80046e8:	ba6d      	rev16	r5, r5
 80046ea:	ba52      	rev16	r2, r2
 80046ec:	fa93 fb93 	rev16.w	fp, r3
 80046f0:	b2ee      	uxtb	r6, r5
 80046f2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80046f6:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80046fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80046fe:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8004702:	eb04 0a07 	add.w	sl, r4, r7
 8004706:	0e2d      	lsrs	r5, r5, #24
 8004708:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800470c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8004710:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8004714:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8004718:	b2d5      	uxtb	r5, r2
 800471a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800471e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8004722:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8004726:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800472a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800472e:	0e12      	lsrs	r2, r2, #24
 8004730:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8004734:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8004738:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800473c:	fa5f f48b 	uxtb.w	r4, fp
 8004740:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004744:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004748:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800474c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8004750:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8004754:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004758:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800475c:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8004760:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004764:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8004768:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800476c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004770:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004774:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004778:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800477c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004780:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8004784:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004788:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800478c:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8004790:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004794:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8004798:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800479c:	ea4f 249b 	mov.w	r4, fp, lsr #10
 80047a0:	4d36      	ldr	r5, [pc, #216]	; (800487c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80047a2:	9f01      	ldr	r7, [sp, #4]
 80047a4:	fb23 7505 	smlad	r5, r3, r5, r7
 80047a8:	4f35      	ldr	r7, [pc, #212]	; (8004880 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80047aa:	fb29 5507 	smlad	r5, r9, r7, r5
 80047ae:	4f35      	ldr	r7, [pc, #212]	; (8004884 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80047b0:	fb28 5507 	smlad	r5, r8, r7, r5
 80047b4:	4f34      	ldr	r7, [pc, #208]	; (8004888 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80047b6:	fb22 5507 	smlad	r5, r2, r7, r5
 80047ba:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 80047be:	fb26 5b0a 	smlad	fp, r6, sl, r5
 80047c2:	4d32      	ldr	r5, [pc, #200]	; (800488c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80047c4:	fb23 cc05 	smlad	ip, r3, r5, ip
 80047c8:	4d31      	ldr	r5, [pc, #196]	; (8004890 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80047ca:	fb29 cc05 	smlad	ip, r9, r5, ip
 80047ce:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 80047d2:	fb28 c505 	smlad	r5, r8, r5, ip
 80047d6:	4f2f      	ldr	r7, [pc, #188]	; (8004894 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80047d8:	fb22 5507 	smlad	r5, r2, r7, r5
 80047dc:	4f2e      	ldr	r7, [pc, #184]	; (8004898 <D80_1CH_HTONS_VOL_HP+0x200>)
 80047de:	fb26 5507 	smlad	r5, r6, r7, r5
 80047e2:	f04f 0a01 	mov.w	sl, #1
 80047e6:	9501      	str	r5, [sp, #4]
 80047e8:	fb23 fa0a 	smuad	sl, r3, sl
 80047ec:	4b2b      	ldr	r3, [pc, #172]	; (800489c <D80_1CH_HTONS_VOL_HP+0x204>)
 80047ee:	fb29 a903 	smlad	r9, r9, r3, sl
 80047f2:	4d2b      	ldr	r5, [pc, #172]	; (80048a0 <D80_1CH_HTONS_VOL_HP+0x208>)
 80047f4:	fb28 9805 	smlad	r8, r8, r5, r9
 80047f8:	4d2a      	ldr	r5, [pc, #168]	; (80048a4 <D80_1CH_HTONS_VOL_HP+0x20c>)
 80047fa:	fb22 8205 	smlad	r2, r2, r5, r8
 80047fe:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <D80_1CH_HTONS_VOL_HP+0x210>)
 8004800:	fb26 2c03 	smlad	ip, r6, r3, r2
 8004804:	9b00      	ldr	r3, [sp, #0]
 8004806:	9d04      	ldr	r5, [sp, #16]
 8004808:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800480c:	4453      	add	r3, sl
 800480e:	461a      	mov	r2, r3
 8004810:	9b02      	ldr	r3, [sp, #8]
 8004812:	f8cd a008 	str.w	sl, [sp, #8]
 8004816:	1ad2      	subs	r2, r2, r3
 8004818:	17d7      	asrs	r7, r2, #31
 800481a:	fba2 2305 	umull	r2, r3, r2, r5
 800481e:	fb05 3307 	mla	r3, r5, r7, r3
 8004822:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004826:	f143 0300 	adc.w	r3, r3, #0
 800482a:	9d03      	ldr	r5, [sp, #12]
 800482c:	029a      	lsls	r2, r3, #10
 800482e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004832:	2700      	movs	r7, #0
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	fbc5 6702 	smlal	r6, r7, r5, r2
 800483a:	10ba      	asrs	r2, r7, #2
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	f302 020f 	ssat	r2, #16, r2
 8004842:	9b05      	ldr	r3, [sp, #20]
 8004844:	f821 2b02 	strh.w	r2, [r1], #2
 8004848:	4299      	cmp	r1, r3
 800484a:	f47f af45 	bne.w	80046d8 <D80_1CH_HTONS_VOL_HP+0x40>
 800484e:	4623      	mov	r3, r4
 8004850:	9907      	ldr	r1, [sp, #28]
 8004852:	9801      	ldr	r0, [sp, #4]
 8004854:	60c8      	str	r0, [r1, #12]
 8004856:	9a00      	ldr	r2, [sp, #0]
 8004858:	f8c1 c008 	str.w	ip, [r1, #8]
 800485c:	4608      	mov	r0, r1
 800485e:	61cb      	str	r3, [r1, #28]
 8004860:	610a      	str	r2, [r1, #16]
 8004862:	f8c1 a014 	str.w	sl, [r1, #20]
 8004866:	9906      	ldr	r1, [sp, #24]
 8004868:	6181      	str	r1, [r0, #24]
 800486a:	2000      	movs	r0, #0
 800486c:	b009      	add	sp, #36	; 0x24
 800486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004872:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004876:	e7eb      	b.n	8004850 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8004878:	2000000c 	.word	0x2000000c
 800487c:	002d0024 	.word	0x002d0024
 8004880:	001c0015 	.word	0x001c0015
 8004884:	000f000a 	.word	0x000f000a
 8004888:	00060003 	.word	0x00060003
 800488c:	0037003f 	.word	0x0037003f
 8004890:	00450049 	.word	0x00450049
 8004894:	00490045 	.word	0x00490045
 8004898:	003f0037 	.word	0x003f0037
 800489c:	00030006 	.word	0x00030006
 80048a0:	000a000f 	.word	0x000a000f
 80048a4:	0015001c 	.word	0x0015001c
 80048a8:	0024002d 	.word	0x0024002d

080048ac <D128_1CH_HTONS_VOL_HP>:
 80048ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	b093      	sub	sp, #76	; 0x4c
 80048b2:	4614      	mov	r4, r2
 80048b4:	9211      	str	r2, [sp, #68]	; 0x44
 80048b6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80048b8:	6912      	ldr	r2, [r2, #16]
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	4622      	mov	r2, r4
 80048be:	4615      	mov	r5, r2
 80048c0:	6964      	ldr	r4, [r4, #20]
 80048c2:	9406      	str	r4, [sp, #24]
 80048c4:	4614      	mov	r4, r2
 80048c6:	6992      	ldr	r2, [r2, #24]
 80048c8:	9210      	str	r2, [sp, #64]	; 0x40
 80048ca:	68ea      	ldr	r2, [r5, #12]
 80048cc:	9204      	str	r2, [sp, #16]
 80048ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80048d0:	69e6      	ldr	r6, [r4, #28]
 80048d2:	920d      	str	r2, [sp, #52]	; 0x34
 80048d4:	68a4      	ldr	r4, [r4, #8]
 80048d6:	6a2a      	ldr	r2, [r5, #32]
 80048d8:	9405      	str	r4, [sp, #20]
 80048da:	920e      	str	r2, [sp, #56]	; 0x38
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8145 	beq.w	8004b6c <D128_1CH_HTONS_VOL_HP+0x2c0>
 80048e2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80048e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80048e8:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8004bc8 <D128_1CH_HTONS_VOL_HP+0x31c>
 80048ec:	9107      	str	r1, [sp, #28]
 80048ee:	f100 0310 	add.w	r3, r0, #16
 80048f2:	4699      	mov	r9, r3
 80048f4:	f1a9 0110 	sub.w	r1, r9, #16
 80048f8:	c90e      	ldmia	r1, {r1, r2, r3}
 80048fa:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80048fe:	ba49      	rev16	r1, r1
 8004900:	ba52      	rev16	r2, r2
 8004902:	ba5b      	rev16	r3, r3
 8004904:	fa90 fa90 	rev16.w	sl, r0
 8004908:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800490c:	b2cc      	uxtb	r4, r1
 800490e:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8004912:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8004916:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800491a:	0e09      	lsrs	r1, r1, #24
 800491c:	4426      	add	r6, r4
 800491e:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004922:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8004926:	b2d0      	uxtb	r0, r2
 8004928:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800492c:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8004930:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004934:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004938:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800493c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004940:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004944:	0e12      	lsrs	r2, r2, #24
 8004946:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800494a:	9701      	str	r7, [sp, #4]
 800494c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8004950:	4627      	mov	r7, r4
 8004952:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8004956:	9702      	str	r7, [sp, #8]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800495e:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8004962:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8004966:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800496a:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800496e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004972:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004976:	0e1b      	lsrs	r3, r3, #24
 8004978:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800497c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8004980:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8004984:	fa5f f38a 	uxtb.w	r3, sl
 8004988:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800498c:	960a      	str	r6, [sp, #40]	; 0x28
 800498e:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004992:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8004996:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800499a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800499e:	950b      	str	r5, [sp, #44]	; 0x2c
 80049a0:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80049a4:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80049a8:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80049ac:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80049b0:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80049b4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80049b8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80049bc:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80049c0:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80049c4:	9308      	str	r3, [sp, #32]
 80049c6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80049d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80049d4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80049d8:	9b02      	ldr	r3, [sp, #8]
 80049da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049de:	9302      	str	r3, [sp, #8]
 80049e0:	9b08      	ldr	r3, [sp, #32]
 80049e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e6:	9308      	str	r3, [sp, #32]
 80049e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ea:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80049ee:	950c      	str	r5, [sp, #48]	; 0x30
 80049f0:	461d      	mov	r5, r3
 80049f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80049f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80049fc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8004a00:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	9b02      	ldr	r3, [sp, #8]
 8004a08:	9202      	str	r2, [sp, #8]
 8004a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a0e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004a12:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004a16:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004a1a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004a1e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8004a22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004a26:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8004a2a:	9b08      	ldr	r3, [sp, #32]
 8004a2c:	9f01      	ldr	r7, [sp, #4]
 8004a2e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004a32:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004a36:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004a3a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004a3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004a42:	46be      	mov	lr, r7
 8004a44:	0a96      	lsrs	r6, r2, #10
 8004a46:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004a4a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8004a4e:	4f49      	ldr	r7, [pc, #292]	; (8004b74 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8004a50:	9a04      	ldr	r2, [sp, #16]
 8004a52:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8004a56:	4a48      	ldr	r2, [pc, #288]	; (8004b78 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8004a58:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004a5c:	4a47      	ldr	r2, [pc, #284]	; (8004b7c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8004a5e:	fb21 ee02 	smlad	lr, r1, r2, lr
 8004a62:	4a47      	ldr	r2, [pc, #284]	; (8004b80 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8004a64:	fb24 ee02 	smlad	lr, r4, r2, lr
 8004a68:	4a46      	ldr	r2, [pc, #280]	; (8004b84 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8004a6a:	9f02      	ldr	r7, [sp, #8]
 8004a6c:	fb27 ee02 	smlad	lr, r7, r2, lr
 8004a70:	4a45      	ldr	r2, [pc, #276]	; (8004b88 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8004a72:	fb20 ee02 	smlad	lr, r0, r2, lr
 8004a76:	4a45      	ldr	r2, [pc, #276]	; (8004b8c <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8004a78:	fb23 e702 	smlad	r7, r3, r2, lr
 8004a7c:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8004a80:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8004a84:	9f01      	ldr	r7, [sp, #4]
 8004a86:	4a42      	ldr	r2, [pc, #264]	; (8004b90 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8004a88:	46bc      	mov	ip, r7
 8004a8a:	9f05      	ldr	r7, [sp, #20]
 8004a8c:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8004a90:	4a40      	ldr	r2, [pc, #256]	; (8004b94 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8004a92:	fb2a cc02 	smlad	ip, sl, r2, ip
 8004a96:	4f40      	ldr	r7, [pc, #256]	; (8004b98 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8004a98:	fb21 cc07 	smlad	ip, r1, r7, ip
 8004a9c:	4f3f      	ldr	r7, [pc, #252]	; (8004b9c <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8004a9e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8004aa2:	4f3f      	ldr	r7, [pc, #252]	; (8004ba0 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8004aa4:	9a02      	ldr	r2, [sp, #8]
 8004aa6:	fb22 cc07 	smlad	ip, r2, r7, ip
 8004aaa:	4f3e      	ldr	r7, [pc, #248]	; (8004ba4 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8004aac:	fb20 cc07 	smlad	ip, r0, r7, ip
 8004ab0:	4f3d      	ldr	r7, [pc, #244]	; (8004ba8 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8004ab2:	fb23 c707 	smlad	r7, r3, r7, ip
 8004ab6:	f8df c114 	ldr.w	ip, [pc, #276]	; 8004bcc <D128_1CH_HTONS_VOL_HP+0x320>
 8004aba:	fb25 720c 	smlad	r2, r5, ip, r7
 8004abe:	f04f 0b01 	mov.w	fp, #1
 8004ac2:	9204      	str	r2, [sp, #16]
 8004ac4:	9f01      	ldr	r7, [sp, #4]
 8004ac6:	fb27 fb0b 	smuad	fp, r7, fp
 8004aca:	4f38      	ldr	r7, [pc, #224]	; (8004bac <D128_1CH_HTONS_VOL_HP+0x300>)
 8004acc:	fb2a ba07 	smlad	sl, sl, r7, fp
 8004ad0:	4f37      	ldr	r7, [pc, #220]	; (8004bb0 <D128_1CH_HTONS_VOL_HP+0x304>)
 8004ad2:	fb21 aa07 	smlad	sl, r1, r7, sl
 8004ad6:	4f37      	ldr	r7, [pc, #220]	; (8004bb4 <D128_1CH_HTONS_VOL_HP+0x308>)
 8004ad8:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004adc:	4f36      	ldr	r7, [pc, #216]	; (8004bb8 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8004ade:	9a02      	ldr	r2, [sp, #8]
 8004ae0:	fb22 a707 	smlad	r7, r2, r7, sl
 8004ae4:	4a35      	ldr	r2, [pc, #212]	; (8004bbc <D128_1CH_HTONS_VOL_HP+0x310>)
 8004ae6:	fb20 7702 	smlad	r7, r0, r2, r7
 8004aea:	4a35      	ldr	r2, [pc, #212]	; (8004bc0 <D128_1CH_HTONS_VOL_HP+0x314>)
 8004aec:	fb23 7702 	smlad	r7, r3, r2, r7
 8004af0:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <D128_1CH_HTONS_VOL_HP+0x318>)
 8004af2:	fb25 7303 	smlad	r3, r5, r3, r7
 8004af6:	9305      	str	r3, [sp, #20]
 8004af8:	9b03      	ldr	r3, [sp, #12]
 8004afa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004afc:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8004b00:	4473      	add	r3, lr
 8004b02:	461a      	mov	r2, r3
 8004b04:	9b06      	ldr	r3, [sp, #24]
 8004b06:	f8cd e018 	str.w	lr, [sp, #24]
 8004b0a:	1ad2      	subs	r2, r2, r3
 8004b0c:	17d1      	asrs	r1, r2, #31
 8004b0e:	fba2 2304 	umull	r2, r3, r2, r4
 8004b12:	fb04 3301 	mla	r3, r4, r1, r3
 8004b16:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004b1a:	f143 0300 	adc.w	r3, r3, #0
 8004b1e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004b26:	2100      	movs	r1, #0
 8004b28:	fbc4 0102 	smlal	r0, r1, r4, r2
 8004b2c:	108a      	asrs	r2, r1, #2
 8004b2e:	9907      	ldr	r1, [sp, #28]
 8004b30:	f302 020f 	ssat	r2, #16, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	f821 2b02 	strh.w	r2, [r1], #2
 8004b3a:	9303      	str	r3, [sp, #12]
 8004b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b3e:	9107      	str	r1, [sp, #28]
 8004b40:	4299      	cmp	r1, r3
 8004b42:	f109 0910 	add.w	r9, r9, #16
 8004b46:	f47f aed5 	bne.w	80048f4 <D128_1CH_HTONS_VOL_HP+0x48>
 8004b4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004b4c:	9905      	ldr	r1, [sp, #20]
 8004b4e:	6091      	str	r1, [r2, #8]
 8004b50:	9904      	ldr	r1, [sp, #16]
 8004b52:	60d1      	str	r1, [r2, #12]
 8004b54:	4613      	mov	r3, r2
 8004b56:	61d6      	str	r6, [r2, #28]
 8004b58:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004b5a:	9a03      	ldr	r2, [sp, #12]
 8004b5c:	611a      	str	r2, [r3, #16]
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f8c3 e014 	str.w	lr, [r3, #20]
 8004b64:	6199      	str	r1, [r3, #24]
 8004b66:	b013      	add	sp, #76	; 0x4c
 8004b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8004b70:	e7eb      	b.n	8004b4a <D128_1CH_HTONS_VOL_HP+0x29e>
 8004b72:	bf00      	nop
 8004b74:	00780069 	.word	0x00780069
 8004b78:	005b004e 	.word	0x005b004e
 8004b7c:	00420037 	.word	0x00420037
 8004b80:	002d0024 	.word	0x002d0024
 8004b84:	001c0015 	.word	0x001c0015
 8004b88:	000f000a 	.word	0x000f000a
 8004b8c:	00060003 	.word	0x00060003
 8004b90:	00880096 	.word	0x00880096
 8004b94:	00a200ac 	.word	0x00a200ac
 8004b98:	00b400ba 	.word	0x00b400ba
 8004b9c:	00be00c0 	.word	0x00be00c0
 8004ba0:	00c000be 	.word	0x00c000be
 8004ba4:	00ba00b4 	.word	0x00ba00b4
 8004ba8:	00ac00a2 	.word	0x00ac00a2
 8004bac:	00030006 	.word	0x00030006
 8004bb0:	000a000f 	.word	0x000a000f
 8004bb4:	0015001c 	.word	0x0015001c
 8004bb8:	0024002d 	.word	0x0024002d
 8004bbc:	00370042 	.word	0x00370042
 8004bc0:	004e005b 	.word	0x004e005b
 8004bc4:	00690078 	.word	0x00690078
 8004bc8:	2000000c 	.word	0x2000000c
 8004bcc:	00960088 	.word	0x00960088

08004bd0 <PDM_Filter_Init>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	300c      	adds	r0, #12
 8004bda:	f000 fa07 	bl	8004fec <memset>
 8004bde:	493b      	ldr	r1, [pc, #236]	; (8004ccc <PDM_Filter_Init+0xfc>)
 8004be0:	483b      	ldr	r0, [pc, #236]	; (8004cd0 <PDM_Filter_Init+0x100>)
 8004be2:	f000 f98d 	bl	8004f00 <CRC_Lock>
 8004be6:	8822      	ldrh	r2, [r4, #0]
 8004be8:	8963      	ldrh	r3, [r4, #10]
 8004bea:	4938      	ldr	r1, [pc, #224]	; (8004ccc <PDM_Filter_Init+0xfc>)
 8004bec:	8925      	ldrh	r5, [r4, #8]
 8004bee:	86a3      	strh	r3, [r4, #52]	; 0x34
 8004bf0:	2801      	cmp	r0, #1
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	bf18      	it	ne
 8004bf8:	2100      	movne	r1, #0
 8004bfa:	2a01      	cmp	r2, #1
 8004bfc:	6461      	str	r1, [r4, #68]	; 0x44
 8004bfe:	86e5      	strh	r5, [r4, #54]	; 0x36
 8004c00:	61a3      	str	r3, [r4, #24]
 8004c02:	6123      	str	r3, [r4, #16]
 8004c04:	6163      	str	r3, [r4, #20]
 8004c06:	60e3      	str	r3, [r4, #12]
 8004c08:	6263      	str	r3, [r4, #36]	; 0x24
 8004c0a:	61e3      	str	r3, [r4, #28]
 8004c0c:	6223      	str	r3, [r4, #32]
 8004c0e:	6423      	str	r3, [r4, #64]	; 0x40
 8004c10:	d918      	bls.n	8004c44 <PDM_Filter_Init+0x74>
 8004c12:	2003      	movs	r0, #3
 8004c14:	2302      	movs	r3, #2
 8004c16:	8862      	ldrh	r2, [r4, #2]
 8004c18:	2a01      	cmp	r2, #1
 8004c1a:	d91d      	bls.n	8004c58 <PDM_Filter_Init+0x88>
 8004c1c:	2140      	movs	r1, #64	; 0x40
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004c22:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8004c26:	6862      	ldr	r2, [r4, #4]
 8004c28:	bf04      	itt	eq
 8004c2a:	6421      	streq	r1, [r4, #64]	; 0x40
 8004c2c:	460b      	moveq	r3, r1
 8004c2e:	b11a      	cbz	r2, 8004c38 <PDM_Filter_Init+0x68>
 8004c30:	f043 0310 	orr.w	r3, r3, #16
 8004c34:	6423      	str	r3, [r4, #64]	; 0x40
 8004c36:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004c38:	2200      	movs	r2, #0
 8004c3a:	8722      	strh	r2, [r4, #56]	; 0x38
 8004c3c:	b908      	cbnz	r0, 8004c42 <PDM_Filter_Init+0x72>
 8004c3e:	3380      	adds	r3, #128	; 0x80
 8004c40:	6423      	str	r3, [r4, #64]	; 0x40
 8004c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c44:	4d23      	ldr	r5, [pc, #140]	; (8004cd4 <PDM_Filter_Init+0x104>)
 8004c46:	d010      	beq.n	8004c6a <PDM_Filter_Init+0x9a>
 8004c48:	782a      	ldrb	r2, [r5, #0]
 8004c4a:	2a01      	cmp	r2, #1
 8004c4c:	d027      	beq.n	8004c9e <PDM_Filter_Init+0xce>
 8004c4e:	8862      	ldrh	r2, [r4, #2]
 8004c50:	2a01      	cmp	r2, #1
 8004c52:	f04f 0001 	mov.w	r0, #1
 8004c56:	d8e1      	bhi.n	8004c1c <PDM_Filter_Init+0x4c>
 8004c58:	d001      	beq.n	8004c5e <PDM_Filter_Init+0x8e>
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	e7de      	b.n	8004c1c <PDM_Filter_Init+0x4c>
 8004c5e:	2220      	movs	r2, #32
 8004c60:	4618      	mov	r0, r3
 8004c62:	6422      	str	r2, [r4, #64]	; 0x40
 8004c64:	4613      	mov	r3, r2
 8004c66:	2160      	movs	r1, #96	; 0x60
 8004c68:	e7da      	b.n	8004c20 <PDM_Filter_Init+0x50>
 8004c6a:	7829      	ldrb	r1, [r5, #0]
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d1ee      	bne.n	8004c4e <PDM_Filter_Init+0x7e>
 8004c70:	4919      	ldr	r1, [pc, #100]	; (8004cd8 <PDM_Filter_Init+0x108>)
 8004c72:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8004ce0 <PDM_Filter_Init+0x110>
 8004c76:	4f19      	ldr	r7, [pc, #100]	; (8004cdc <PDM_Filter_Init+0x10c>)
 8004c78:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8004c7c:	684a      	ldr	r2, [r1, #4]
 8004c7e:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8004c82:	ea02 0007 	and.w	r0, r2, r7
 8004c86:	4303      	orrs	r3, r0
 8004c88:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f841 3f04 	str.w	r3, [r1, #4]!
 8004c92:	428e      	cmp	r6, r1
 8004c94:	d1f2      	bne.n	8004c7c <PDM_Filter_Init+0xac>
 8004c96:	2001      	movs	r0, #1
 8004c98:	7028      	strb	r0, [r5, #0]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e7bb      	b.n	8004c16 <PDM_Filter_Init+0x46>
 8004c9e:	490e      	ldr	r1, [pc, #56]	; (8004cd8 <PDM_Filter_Init+0x108>)
 8004ca0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8004ce0 <PDM_Filter_Init+0x110>
 8004ca4:	4f0d      	ldr	r7, [pc, #52]	; (8004cdc <PDM_Filter_Init+0x10c>)
 8004ca6:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8004caa:	684a      	ldr	r2, [r1, #4]
 8004cac:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8004cb0:	ea02 0007 	and.w	r0, r2, r7
 8004cb4:	4303      	orrs	r3, r0
 8004cb6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8004cba:	4413      	add	r3, r2
 8004cbc:	f841 3f04 	str.w	r3, [r1, #4]!
 8004cc0:	428e      	cmp	r6, r1
 8004cc2:	d1f2      	bne.n	8004caa <PDM_Filter_Init+0xda>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	702b      	strb	r3, [r5, #0]
 8004cc8:	e7c1      	b.n	8004c4e <PDM_Filter_Init+0x7e>
 8004cca:	bf00      	nop
 8004ccc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004cd0:	f407a5c2 	.word	0xf407a5c2
 8004cd4:	200004ed 	.word	0x200004ed
 8004cd8:	20000008 	.word	0x20000008
 8004cdc:	000ffc00 	.word	0x000ffc00
 8004ce0:	3ff00000 	.word	0x3ff00000

08004ce4 <PDM_Filter_setConfig>:
 8004ce4:	4b66      	ldr	r3, [pc, #408]	; (8004e80 <PDM_Filter_setConfig+0x19c>)
 8004ce6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <PDM_Filter_setConfig+0xc>
 8004cec:	2004      	movs	r0, #4
 8004cee:	4770      	bx	lr
 8004cf0:	b530      	push	{r4, r5, lr}
 8004cf2:	880a      	ldrh	r2, [r1, #0]
 8004cf4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004cf6:	ed2d 8b04 	vpush	{d8-d9}
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	1e51      	subs	r1, r2, #1
 8004d00:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8004d04:	2906      	cmp	r1, #6
 8004d06:	b083      	sub	sp, #12
 8004d08:	6420      	str	r0, [r4, #64]	; 0x40
 8004d0a:	d91a      	bls.n	8004d42 <PDM_Filter_setConfig+0x5e>
 8004d0c:	2008      	movs	r0, #8
 8004d0e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8004d12:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004d16:	4299      	cmp	r1, r3
 8004d18:	d07e      	beq.n	8004e18 <PDM_Filter_setConfig+0x134>
 8004d1a:	f113 0f0c 	cmn.w	r3, #12
 8004d1e:	da2a      	bge.n	8004d76 <PDM_Filter_setConfig+0x92>
 8004d20:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8004d24:	3040      	adds	r0, #64	; 0x40
 8004d26:	80ab      	strh	r3, [r5, #4]
 8004d28:	8622      	strh	r2, [r4, #48]	; 0x30
 8004d2a:	886b      	ldrh	r3, [r5, #2]
 8004d2c:	8663      	strh	r3, [r4, #50]	; 0x32
 8004d2e:	b920      	cbnz	r0, 8004d3a <PDM_Filter_setConfig+0x56>
 8004d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d36:	6423      	str	r3, [r4, #64]	; 0x40
 8004d38:	2000      	movs	r0, #0
 8004d3a:	b003      	add	sp, #12
 8004d3c:	ecbd 8b04 	vpop	{d8-d9}
 8004d40:	bd30      	pop	{r4, r5, pc}
 8004d42:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8004d44:	4291      	cmp	r1, r2
 8004d46:	d06c      	beq.n	8004e22 <PDM_Filter_setConfig+0x13e>
 8004d48:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8004d56:	6423      	str	r3, [r4, #64]	; 0x40
 8004d58:	2970      	cmp	r1, #112	; 0x70
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d62:	d066      	beq.n	8004e32 <PDM_Filter_setConfig+0x14e>
 8004d64:	2b06      	cmp	r3, #6
 8004d66:	f200 8089 	bhi.w	8004e7c <PDM_Filter_setConfig+0x198>
 8004d6a:	e8df f003 	tbb	[pc, r3]
 8004d6e:	4f52      	.short	0x4f52
 8004d70:	3d43494c 	.word	0x3d43494c
 8004d74:	46          	.byte	0x46
 8004d75:	00          	.byte	0x00
 8004d76:	2b33      	cmp	r3, #51	; 0x33
 8004d78:	dc32      	bgt.n	8004de0 <PDM_Filter_setConfig+0xfc>
 8004d7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d7c:	f002 020f 	and.w	r2, r2, #15
 8004d80:	3a01      	subs	r2, #1
 8004d82:	2a06      	cmp	r2, #6
 8004d84:	d872      	bhi.n	8004e6c <PDM_Filter_setConfig+0x188>
 8004d86:	493f      	ldr	r1, [pc, #252]	; (8004e84 <PDM_Filter_setConfig+0x1a0>)
 8004d88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004d8c:	ed92 9a00 	vldr	s18, [r2]
 8004d90:	ed92 8a07 	vldr	s16, [r2, #28]
 8004d94:	9001      	str	r0, [sp, #4]
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d9e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004da2:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8004da6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004daa:	f000 f94d 	bl	8005048 <powf>
 8004dae:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004e88 <PDM_Filter_setConfig+0x1a4>
 8004db2:	eef0 8a40 	vmov.f32	s17, s0
 8004db6:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8004dba:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004dbe:	f000 f943 	bl	8005048 <powf>
 8004dc2:	ee28 8a28 	vmul.f32	s16, s16, s17
 8004dc6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004dca:	f000 f917 	bl	8004ffc <roundf>
 8004dce:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8004dd2:	88ab      	ldrh	r3, [r5, #4]
 8004dd4:	882a      	ldrh	r2, [r5, #0]
 8004dd6:	9801      	ldr	r0, [sp, #4]
 8004dd8:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8004ddc:	8723      	strh	r3, [r4, #56]	; 0x38
 8004dde:	e7a3      	b.n	8004d28 <PDM_Filter_setConfig+0x44>
 8004de0:	2333      	movs	r3, #51	; 0x33
 8004de2:	3040      	adds	r0, #64	; 0x40
 8004de4:	80ab      	strh	r3, [r5, #4]
 8004de6:	e79f      	b.n	8004d28 <PDM_Filter_setConfig+0x44>
 8004de8:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <PDM_Filter_setConfig+0x1a8>)
 8004dea:	64a3      	str	r3, [r4, #72]	; 0x48
 8004dec:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004df0:	2000      	movs	r0, #0
 8004df2:	e792      	b.n	8004d1a <PDM_Filter_setConfig+0x36>
 8004df4:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <PDM_Filter_setConfig+0x1ac>)
 8004df6:	64a3      	str	r3, [r4, #72]	; 0x48
 8004df8:	e7f8      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004dfa:	4b26      	ldr	r3, [pc, #152]	; (8004e94 <PDM_Filter_setConfig+0x1b0>)
 8004dfc:	64a3      	str	r3, [r4, #72]	; 0x48
 8004dfe:	e7f5      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <PDM_Filter_setConfig+0x1b4>)
 8004e02:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e04:	e7f2      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e06:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <PDM_Filter_setConfig+0x1b8>)
 8004e08:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e0a:	e7ef      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e0c:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <PDM_Filter_setConfig+0x1bc>)
 8004e0e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e10:	e7ec      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e12:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <PDM_Filter_setConfig+0x1c0>)
 8004e14:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e16:	e7e9      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e18:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8004e1a:	4291      	cmp	r1, r2
 8004e1c:	f47f af7d 	bne.w	8004d1a <PDM_Filter_setConfig+0x36>
 8004e20:	e783      	b.n	8004d2a <PDM_Filter_setConfig+0x46>
 8004e22:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004e26:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8004e2a:	4299      	cmp	r1, r3
 8004e2c:	d023      	beq.n	8004e76 <PDM_Filter_setConfig+0x192>
 8004e2e:	2000      	movs	r0, #0
 8004e30:	e773      	b.n	8004d1a <PDM_Filter_setConfig+0x36>
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d822      	bhi.n	8004e7c <PDM_Filter_setConfig+0x198>
 8004e36:	e8df f003 	tbb	[pc, r3]
 8004e3a:	1316      	.short	0x1316
 8004e3c:	070a0d10 	.word	0x070a0d10
 8004e40:	04          	.byte	0x04
 8004e41:	00          	.byte	0x00
 8004e42:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <PDM_Filter_setConfig+0x1c4>)
 8004e44:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e46:	e7d1      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e48:	4b18      	ldr	r3, [pc, #96]	; (8004eac <PDM_Filter_setConfig+0x1c8>)
 8004e4a:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e4c:	e7ce      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e4e:	4b18      	ldr	r3, [pc, #96]	; (8004eb0 <PDM_Filter_setConfig+0x1cc>)
 8004e50:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e52:	e7cb      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <PDM_Filter_setConfig+0x1d0>)
 8004e56:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e58:	e7c8      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e5a:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <PDM_Filter_setConfig+0x1d4>)
 8004e5c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e5e:	e7c5      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e60:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <PDM_Filter_setConfig+0x1d8>)
 8004e62:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e64:	e7c2      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <PDM_Filter_setConfig+0x1dc>)
 8004e68:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e6a:	e7bf      	b.n	8004dec <PDM_Filter_setConfig+0x108>
 8004e6c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8004ec4 <PDM_Filter_setConfig+0x1e0>
 8004e70:	eeb0 9a48 	vmov.f32	s18, s16
 8004e74:	e78e      	b.n	8004d94 <PDM_Filter_setConfig+0xb0>
 8004e76:	886b      	ldrh	r3, [r5, #2]
 8004e78:	8663      	strh	r3, [r4, #50]	; 0x32
 8004e7a:	e759      	b.n	8004d30 <PDM_Filter_setConfig+0x4c>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e746      	b.n	8004d0e <PDM_Filter_setConfig+0x2a>
 8004e80:	b5e8b5cd 	.word	0xb5e8b5cd
 8004e84:	08005908 	.word	0x08005908
 8004e88:	42000000 	.word	0x42000000
 8004e8c:	08003251 	.word	0x08003251
 8004e90:	08003131 	.word	0x08003131
 8004e94:	080033e1 	.word	0x080033e1
 8004e98:	08003c25 	.word	0x08003c25
 8004e9c:	08003985 	.word	0x08003985
 8004ea0:	08003765 	.word	0x08003765
 8004ea4:	08003579 	.word	0x08003579
 8004ea8:	08004231 	.word	0x08004231
 8004eac:	080040f9 	.word	0x080040f9
 8004eb0:	08004015 	.word	0x08004015
 8004eb4:	080048ad 	.word	0x080048ad
 8004eb8:	08004699 	.word	0x08004699
 8004ebc:	080044e1 	.word	0x080044e1
 8004ec0:	08004375 	.word	0x08004375
 8004ec4:	00000000 	.word	0x00000000

08004ec8 <PDM_Filter>:
 8004ec8:	b410      	push	{r4}
 8004eca:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <PDM_Filter+0x34>)
 8004ecc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004ece:	429c      	cmp	r4, r3
 8004ed0:	d003      	beq.n	8004eda <PDM_Filter+0x12>
 8004ed2:	2004      	movs	r0, #4
 8004ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004edc:	05dc      	lsls	r4, r3, #23
 8004ede:	d407      	bmi.n	8004ef0 <PDM_Filter+0x28>
 8004ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ee4:	bf14      	ite	ne
 8004ee6:	2020      	movne	r0, #32
 8004ee8:	2030      	moveq	r0, #48	; 0x30
 8004eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ef6:	320c      	adds	r2, #12
 8004ef8:	4718      	bx	r3
 8004efa:	bf00      	nop
 8004efc:	b5e8b5cd 	.word	0xb5e8b5cd

08004f00 <CRC_Lock>:
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <CRC_Lock+0x60>)
 8004f02:	6813      	ldr	r3, [r2, #0]
 8004f04:	b410      	push	{r4}
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	4c16      	ldr	r4, [pc, #88]	; (8004f64 <CRC_Lock+0x64>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	b933      	cbnz	r3, 8004f20 <CRC_Lock+0x20>
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <CRC_Lock+0x68>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004f1e:	d00f      	beq.n	8004f40 <CRC_Lock+0x40>
 8004f20:	4a12      	ldr	r2, [pc, #72]	; (8004f6c <CRC_Lock+0x6c>)
 8004f22:	2301      	movs	r3, #1
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1fc      	bne.n	8004f26 <CRC_Lock+0x26>
 8004f2c:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <CRC_Lock+0x70>)
 8004f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f32:	6018      	str	r0, [r3, #0]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	1a08      	subs	r0, r1, r0
 8004f38:	fab0 f080 	clz	r0, r0
 8004f3c:	0940      	lsrs	r0, r0, #5
 8004f3e:	4770      	bx	lr
 8004f40:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <CRC_Lock+0x74>)
 8004f42:	2301      	movs	r3, #1
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1fc      	bne.n	8004f46 <CRC_Lock+0x46>
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <CRC_Lock+0x78>)
 8004f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f52:	6018      	str	r0, [r3, #0]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	1a40      	subs	r0, r0, r1
 8004f58:	fab0 f080 	clz	r0, r0
 8004f5c:	0940      	lsrs	r0, r0, #5
 8004f5e:	4770      	bx	lr
 8004f60:	e0002000 	.word	0xe0002000
 8004f64:	e0042000 	.word	0xe0042000
 8004f68:	5c001000 	.word	0x5c001000
 8004f6c:	40023008 	.word	0x40023008
 8004f70:	40023000 	.word	0x40023000
 8004f74:	58024c08 	.word	0x58024c08
 8004f78:	58024c00 	.word	0x58024c00

08004f7c <__errno>:
 8004f7c:	4b01      	ldr	r3, [pc, #4]	; (8004f84 <__errno+0x8>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000040c 	.word	0x2000040c

08004f88 <__libc_init_array>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	4d0d      	ldr	r5, [pc, #52]	; (8004fc0 <__libc_init_array+0x38>)
 8004f8c:	4c0d      	ldr	r4, [pc, #52]	; (8004fc4 <__libc_init_array+0x3c>)
 8004f8e:	1b64      	subs	r4, r4, r5
 8004f90:	10a4      	asrs	r4, r4, #2
 8004f92:	2600      	movs	r6, #0
 8004f94:	42a6      	cmp	r6, r4
 8004f96:	d109      	bne.n	8004fac <__libc_init_array+0x24>
 8004f98:	4d0b      	ldr	r5, [pc, #44]	; (8004fc8 <__libc_init_array+0x40>)
 8004f9a:	4c0c      	ldr	r4, [pc, #48]	; (8004fcc <__libc_init_array+0x44>)
 8004f9c:	f000 fc98 	bl	80058d0 <_init>
 8004fa0:	1b64      	subs	r4, r4, r5
 8004fa2:	10a4      	asrs	r4, r4, #2
 8004fa4:	2600      	movs	r6, #0
 8004fa6:	42a6      	cmp	r6, r4
 8004fa8:	d105      	bne.n	8004fb6 <__libc_init_array+0x2e>
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb0:	4798      	blx	r3
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7ee      	b.n	8004f94 <__libc_init_array+0xc>
 8004fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fba:	4798      	blx	r3
 8004fbc:	3601      	adds	r6, #1
 8004fbe:	e7f2      	b.n	8004fa6 <__libc_init_array+0x1e>
 8004fc0:	0800596c 	.word	0x0800596c
 8004fc4:	0800596c 	.word	0x0800596c
 8004fc8:	0800596c 	.word	0x0800596c
 8004fcc:	08005970 	.word	0x08005970

08004fd0 <memcpy>:
 8004fd0:	440a      	add	r2, r1
 8004fd2:	4291      	cmp	r1, r2
 8004fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd8:	d100      	bne.n	8004fdc <memcpy+0xc>
 8004fda:	4770      	bx	lr
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe6:	4291      	cmp	r1, r2
 8004fe8:	d1f9      	bne.n	8004fde <memcpy+0xe>
 8004fea:	bd10      	pop	{r4, pc}

08004fec <memset>:
 8004fec:	4402      	add	r2, r0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <memset+0xa>
 8004ff4:	4770      	bx	lr
 8004ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffa:	e7f9      	b.n	8004ff0 <memset+0x4>

08004ffc <roundf>:
 8004ffc:	ee10 0a10 	vmov	r0, s0
 8005000:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005004:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8005008:	2a16      	cmp	r2, #22
 800500a:	dc15      	bgt.n	8005038 <roundf+0x3c>
 800500c:	2a00      	cmp	r2, #0
 800500e:	da08      	bge.n	8005022 <roundf+0x26>
 8005010:	3201      	adds	r2, #1
 8005012:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005016:	d101      	bne.n	800501c <roundf+0x20>
 8005018:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800501c:	ee00 3a10 	vmov	s0, r3
 8005020:	4770      	bx	lr
 8005022:	4908      	ldr	r1, [pc, #32]	; (8005044 <roundf+0x48>)
 8005024:	4111      	asrs	r1, r2
 8005026:	4208      	tst	r0, r1
 8005028:	d0fa      	beq.n	8005020 <roundf+0x24>
 800502a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800502e:	4113      	asrs	r3, r2
 8005030:	4403      	add	r3, r0
 8005032:	ea23 0301 	bic.w	r3, r3, r1
 8005036:	e7f1      	b.n	800501c <roundf+0x20>
 8005038:	2a80      	cmp	r2, #128	; 0x80
 800503a:	d1f1      	bne.n	8005020 <roundf+0x24>
 800503c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	007fffff 	.word	0x007fffff

08005048 <powf>:
 8005048:	b508      	push	{r3, lr}
 800504a:	ed2d 8b04 	vpush	{d8-d9}
 800504e:	eeb0 9a40 	vmov.f32	s18, s0
 8005052:	eef0 8a60 	vmov.f32	s17, s1
 8005056:	f000 f88f 	bl	8005178 <__ieee754_powf>
 800505a:	4b43      	ldr	r3, [pc, #268]	; (8005168 <powf+0x120>)
 800505c:	f993 3000 	ldrsb.w	r3, [r3]
 8005060:	3301      	adds	r3, #1
 8005062:	eeb0 8a40 	vmov.f32	s16, s0
 8005066:	d012      	beq.n	800508e <powf+0x46>
 8005068:	eef4 8a68 	vcmp.f32	s17, s17
 800506c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005070:	d60d      	bvs.n	800508e <powf+0x46>
 8005072:	eeb4 9a49 	vcmp.f32	s18, s18
 8005076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507a:	d70d      	bvc.n	8005098 <powf+0x50>
 800507c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005088:	bf08      	it	eq
 800508a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800508e:	eeb0 0a48 	vmov.f32	s0, s16
 8005092:	ecbd 8b04 	vpop	{d8-d9}
 8005096:	bd08      	pop	{r3, pc}
 8005098:	eddf 9a34 	vldr	s19, [pc, #208]	; 800516c <powf+0x124>
 800509c:	eeb4 9a69 	vcmp.f32	s18, s19
 80050a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a4:	d116      	bne.n	80050d4 <powf+0x8c>
 80050a6:	eef4 8a69 	vcmp.f32	s17, s19
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	d057      	beq.n	8005160 <powf+0x118>
 80050b0:	eeb0 0a68 	vmov.f32	s0, s17
 80050b4:	f000 fb2a 	bl	800570c <finitef>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d0e8      	beq.n	800508e <powf+0x46>
 80050bc:	eef4 8ae9 	vcmpe.f32	s17, s19
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	d5e3      	bpl.n	800508e <powf+0x46>
 80050c6:	f7ff ff59 	bl	8004f7c <__errno>
 80050ca:	2321      	movs	r3, #33	; 0x21
 80050cc:	6003      	str	r3, [r0, #0]
 80050ce:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8005170 <powf+0x128>
 80050d2:	e7dc      	b.n	800508e <powf+0x46>
 80050d4:	f000 fb1a 	bl	800570c <finitef>
 80050d8:	bb50      	cbnz	r0, 8005130 <powf+0xe8>
 80050da:	eeb0 0a49 	vmov.f32	s0, s18
 80050de:	f000 fb15 	bl	800570c <finitef>
 80050e2:	b328      	cbz	r0, 8005130 <powf+0xe8>
 80050e4:	eeb0 0a68 	vmov.f32	s0, s17
 80050e8:	f000 fb10 	bl	800570c <finitef>
 80050ec:	b300      	cbz	r0, 8005130 <powf+0xe8>
 80050ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80050f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f6:	d706      	bvc.n	8005106 <powf+0xbe>
 80050f8:	f7ff ff40 	bl	8004f7c <__errno>
 80050fc:	2321      	movs	r3, #33	; 0x21
 80050fe:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8005102:	6003      	str	r3, [r0, #0]
 8005104:	e7c3      	b.n	800508e <powf+0x46>
 8005106:	f7ff ff39 	bl	8004f7c <__errno>
 800510a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800510e:	2322      	movs	r3, #34	; 0x22
 8005110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	d508      	bpl.n	800512a <powf+0xe2>
 8005118:	eeb0 0a68 	vmov.f32	s0, s17
 800511c:	f000 fb0a 	bl	8005734 <rintf>
 8005120:	eeb4 0a68 	vcmp.f32	s0, s17
 8005124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005128:	d1d1      	bne.n	80050ce <powf+0x86>
 800512a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8005174 <powf+0x12c>
 800512e:	e7ae      	b.n	800508e <powf+0x46>
 8005130:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005138:	d1a9      	bne.n	800508e <powf+0x46>
 800513a:	eeb0 0a49 	vmov.f32	s0, s18
 800513e:	f000 fae5 	bl	800570c <finitef>
 8005142:	2800      	cmp	r0, #0
 8005144:	d0a3      	beq.n	800508e <powf+0x46>
 8005146:	eeb0 0a68 	vmov.f32	s0, s17
 800514a:	f000 fadf 	bl	800570c <finitef>
 800514e:	2800      	cmp	r0, #0
 8005150:	d09d      	beq.n	800508e <powf+0x46>
 8005152:	f7ff ff13 	bl	8004f7c <__errno>
 8005156:	2322      	movs	r3, #34	; 0x22
 8005158:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800516c <powf+0x124>
 800515c:	6003      	str	r3, [r0, #0]
 800515e:	e796      	b.n	800508e <powf+0x46>
 8005160:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005164:	e793      	b.n	800508e <powf+0x46>
 8005166:	bf00      	nop
 8005168:	20000470 	.word	0x20000470
 800516c:	00000000 	.word	0x00000000
 8005170:	ff800000 	.word	0xff800000
 8005174:	7f800000 	.word	0x7f800000

08005178 <__ieee754_powf>:
 8005178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517c:	ee10 5a90 	vmov	r5, s1
 8005180:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8005184:	ed2d 8b02 	vpush	{d8}
 8005188:	eeb0 8a40 	vmov.f32	s16, s0
 800518c:	eef0 8a60 	vmov.f32	s17, s1
 8005190:	f000 8291 	beq.w	80056b6 <__ieee754_powf+0x53e>
 8005194:	ee10 8a10 	vmov	r8, s0
 8005198:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800519c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80051a0:	dc06      	bgt.n	80051b0 <__ieee754_powf+0x38>
 80051a2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80051a6:	dd0a      	ble.n	80051be <__ieee754_powf+0x46>
 80051a8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80051ac:	f000 8283 	beq.w	80056b6 <__ieee754_powf+0x53e>
 80051b0:	ecbd 8b02 	vpop	{d8}
 80051b4:	48d8      	ldr	r0, [pc, #864]	; (8005518 <__ieee754_powf+0x3a0>)
 80051b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ba:	f000 bab5 	b.w	8005728 <nanf>
 80051be:	f1b8 0f00 	cmp.w	r8, #0
 80051c2:	da1f      	bge.n	8005204 <__ieee754_powf+0x8c>
 80051c4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80051c8:	da2e      	bge.n	8005228 <__ieee754_powf+0xb0>
 80051ca:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80051ce:	f2c0 827b 	blt.w	80056c8 <__ieee754_powf+0x550>
 80051d2:	15fb      	asrs	r3, r7, #23
 80051d4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80051d8:	fa47 f603 	asr.w	r6, r7, r3
 80051dc:	fa06 f303 	lsl.w	r3, r6, r3
 80051e0:	42bb      	cmp	r3, r7
 80051e2:	f040 8271 	bne.w	80056c8 <__ieee754_powf+0x550>
 80051e6:	f006 0601 	and.w	r6, r6, #1
 80051ea:	f1c6 0602 	rsb	r6, r6, #2
 80051ee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80051f2:	d120      	bne.n	8005236 <__ieee754_powf+0xbe>
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	f280 8264 	bge.w	80056c2 <__ieee754_powf+0x54a>
 80051fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80051fe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005202:	e00d      	b.n	8005220 <__ieee754_powf+0xa8>
 8005204:	2600      	movs	r6, #0
 8005206:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800520a:	d1f0      	bne.n	80051ee <__ieee754_powf+0x76>
 800520c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005210:	f000 8251 	beq.w	80056b6 <__ieee754_powf+0x53e>
 8005214:	dd0a      	ble.n	800522c <__ieee754_powf+0xb4>
 8005216:	2d00      	cmp	r5, #0
 8005218:	f280 8250 	bge.w	80056bc <__ieee754_powf+0x544>
 800521c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800551c <__ieee754_powf+0x3a4>
 8005220:	ecbd 8b02 	vpop	{d8}
 8005224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005228:	2602      	movs	r6, #2
 800522a:	e7ec      	b.n	8005206 <__ieee754_powf+0x8e>
 800522c:	2d00      	cmp	r5, #0
 800522e:	daf5      	bge.n	800521c <__ieee754_powf+0xa4>
 8005230:	eeb1 0a68 	vneg.f32	s0, s17
 8005234:	e7f4      	b.n	8005220 <__ieee754_powf+0xa8>
 8005236:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800523a:	d102      	bne.n	8005242 <__ieee754_powf+0xca>
 800523c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005240:	e7ee      	b.n	8005220 <__ieee754_powf+0xa8>
 8005242:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8005246:	eeb0 0a48 	vmov.f32	s0, s16
 800524a:	d108      	bne.n	800525e <__ieee754_powf+0xe6>
 800524c:	f1b8 0f00 	cmp.w	r8, #0
 8005250:	db05      	blt.n	800525e <__ieee754_powf+0xe6>
 8005252:	ecbd 8b02 	vpop	{d8}
 8005256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525a:	f000 ba4d 	b.w	80056f8 <__ieee754_sqrtf>
 800525e:	f000 fa4e 	bl	80056fe <fabsf>
 8005262:	b124      	cbz	r4, 800526e <__ieee754_powf+0xf6>
 8005264:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005268:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800526c:	d117      	bne.n	800529e <__ieee754_powf+0x126>
 800526e:	2d00      	cmp	r5, #0
 8005270:	bfbc      	itt	lt
 8005272:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8005276:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800527a:	f1b8 0f00 	cmp.w	r8, #0
 800527e:	dacf      	bge.n	8005220 <__ieee754_powf+0xa8>
 8005280:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8005284:	ea54 0306 	orrs.w	r3, r4, r6
 8005288:	d104      	bne.n	8005294 <__ieee754_powf+0x11c>
 800528a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800528e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005292:	e7c5      	b.n	8005220 <__ieee754_powf+0xa8>
 8005294:	2e01      	cmp	r6, #1
 8005296:	d1c3      	bne.n	8005220 <__ieee754_powf+0xa8>
 8005298:	eeb1 0a40 	vneg.f32	s0, s0
 800529c:	e7c0      	b.n	8005220 <__ieee754_powf+0xa8>
 800529e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80052a2:	3801      	subs	r0, #1
 80052a4:	ea56 0300 	orrs.w	r3, r6, r0
 80052a8:	d104      	bne.n	80052b4 <__ieee754_powf+0x13c>
 80052aa:	ee38 8a48 	vsub.f32	s16, s16, s16
 80052ae:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80052b2:	e7b5      	b.n	8005220 <__ieee754_powf+0xa8>
 80052b4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80052b8:	dd6b      	ble.n	8005392 <__ieee754_powf+0x21a>
 80052ba:	4b99      	ldr	r3, [pc, #612]	; (8005520 <__ieee754_powf+0x3a8>)
 80052bc:	429c      	cmp	r4, r3
 80052be:	dc06      	bgt.n	80052ce <__ieee754_powf+0x156>
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	daab      	bge.n	800521c <__ieee754_powf+0xa4>
 80052c4:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8005524 <__ieee754_powf+0x3ac>
 80052c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80052cc:	e7a8      	b.n	8005220 <__ieee754_powf+0xa8>
 80052ce:	4b96      	ldr	r3, [pc, #600]	; (8005528 <__ieee754_powf+0x3b0>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	dd02      	ble.n	80052da <__ieee754_powf+0x162>
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	dcf5      	bgt.n	80052c4 <__ieee754_powf+0x14c>
 80052d8:	e7a0      	b.n	800521c <__ieee754_powf+0xa4>
 80052da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80052de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80052e2:	eddf 6a92 	vldr	s13, [pc, #584]	; 800552c <__ieee754_powf+0x3b4>
 80052e6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80052ea:	eee0 6a67 	vfms.f32	s13, s0, s15
 80052ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80052f2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80052f6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80052fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fe:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005530 <__ieee754_powf+0x3b8>
 8005302:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8005306:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005534 <__ieee754_powf+0x3bc>
 800530a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800530e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005538 <__ieee754_powf+0x3c0>
 8005312:	eef0 6a67 	vmov.f32	s13, s15
 8005316:	eee0 6a07 	vfma.f32	s13, s0, s14
 800531a:	ee16 3a90 	vmov	r3, s13
 800531e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005322:	f023 030f 	bic.w	r3, r3, #15
 8005326:	ee00 3a90 	vmov	s1, r3
 800532a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800532e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005332:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8005336:	f025 050f 	bic.w	r5, r5, #15
 800533a:	ee07 5a10 	vmov	s14, r5
 800533e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005342:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800534e:	3e01      	subs	r6, #1
 8005350:	ea56 0200 	orrs.w	r2, r6, r0
 8005354:	ee07 5a10 	vmov	s14, r5
 8005358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800535c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005360:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005364:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005368:	ee17 4a10 	vmov	r4, s14
 800536c:	bf08      	it	eq
 800536e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8005372:	2c00      	cmp	r4, #0
 8005374:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005378:	f340 8184 	ble.w	8005684 <__ieee754_powf+0x50c>
 800537c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005380:	f340 80fc 	ble.w	800557c <__ieee754_powf+0x404>
 8005384:	eddf 7a67 	vldr	s15, [pc, #412]	; 8005524 <__ieee754_powf+0x3ac>
 8005388:	ee28 0a27 	vmul.f32	s0, s16, s15
 800538c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005390:	e746      	b.n	8005220 <__ieee754_powf+0xa8>
 8005392:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8005396:	bf01      	itttt	eq
 8005398:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800553c <__ieee754_powf+0x3c4>
 800539c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80053a0:	f06f 0217 	mvneq.w	r2, #23
 80053a4:	ee17 4a90 	vmoveq	r4, s15
 80053a8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80053ac:	bf18      	it	ne
 80053ae:	2200      	movne	r2, #0
 80053b0:	3b7f      	subs	r3, #127	; 0x7f
 80053b2:	4413      	add	r3, r2
 80053b4:	4a62      	ldr	r2, [pc, #392]	; (8005540 <__ieee754_powf+0x3c8>)
 80053b6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80053ba:	4294      	cmp	r4, r2
 80053bc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80053c0:	dd06      	ble.n	80053d0 <__ieee754_powf+0x258>
 80053c2:	4a60      	ldr	r2, [pc, #384]	; (8005544 <__ieee754_powf+0x3cc>)
 80053c4:	4294      	cmp	r4, r2
 80053c6:	f340 80a4 	ble.w	8005512 <__ieee754_powf+0x39a>
 80053ca:	3301      	adds	r3, #1
 80053cc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80053d0:	2400      	movs	r4, #0
 80053d2:	4a5d      	ldr	r2, [pc, #372]	; (8005548 <__ieee754_powf+0x3d0>)
 80053d4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80053d8:	ee07 1a90 	vmov	s15, r1
 80053dc:	ed92 7a00 	vldr	s14, [r2]
 80053e0:	4a5a      	ldr	r2, [pc, #360]	; (800554c <__ieee754_powf+0x3d4>)
 80053e2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80053e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80053ea:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80053ee:	1049      	asrs	r1, r1, #1
 80053f0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80053f4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80053f8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80053fc:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8005400:	ee06 1a10 	vmov	s12, r1
 8005404:	ee65 4a26 	vmul.f32	s9, s10, s13
 8005408:	ee36 7a47 	vsub.f32	s14, s12, s14
 800540c:	ee14 7a90 	vmov	r7, s9
 8005410:	4017      	ands	r7, r2
 8005412:	ee05 7a90 	vmov	s11, r7
 8005416:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800541a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800541e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005550 <__ieee754_powf+0x3d8>
 8005422:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8005426:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800542a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800542e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8005554 <__ieee754_powf+0x3dc>
 8005432:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8005436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005558 <__ieee754_powf+0x3e0>
 800543a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800543e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800552c <__ieee754_powf+0x3b4>
 8005442:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005446:	eddf 6a45 	vldr	s13, [pc, #276]	; 800555c <__ieee754_powf+0x3e4>
 800544a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800544e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8005560 <__ieee754_powf+0x3e8>
 8005452:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005456:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800545a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800545e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005462:	eee5 6a07 	vfma.f32	s13, s10, s14
 8005466:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800546a:	eef0 7a45 	vmov.f32	s15, s10
 800546e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee17 1a90 	vmov	r1, s15
 800547a:	4011      	ands	r1, r2
 800547c:	ee07 1a90 	vmov	s15, r1
 8005480:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8005484:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8005488:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800548c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005490:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005494:	eeb0 6a47 	vmov.f32	s12, s14
 8005498:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800549c:	ee16 1a10 	vmov	r1, s12
 80054a0:	4011      	ands	r1, r2
 80054a2:	ee06 1a90 	vmov	s13, r1
 80054a6:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80054aa:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005564 <__ieee754_powf+0x3ec>
 80054ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005568 <__ieee754_powf+0x3f0>
 80054b2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80054b6:	ee06 1a10 	vmov	s12, r1
 80054ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054be:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800556c <__ieee754_powf+0x3f4>
 80054c2:	492b      	ldr	r1, [pc, #172]	; (8005570 <__ieee754_powf+0x3f8>)
 80054c4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80054c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80054cc:	edd1 7a00 	vldr	s15, [r1]
 80054d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054d4:	ee07 3a90 	vmov	s15, r3
 80054d8:	4b26      	ldr	r3, [pc, #152]	; (8005574 <__ieee754_powf+0x3fc>)
 80054da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80054de:	eef0 7a47 	vmov.f32	s15, s14
 80054e2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80054e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80054ea:	edd4 0a00 	vldr	s1, [r4]
 80054ee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee17 3a90 	vmov	r3, s15
 80054fa:	4013      	ands	r3, r2
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8005504:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8005508:	eee6 6a65 	vfms.f32	s13, s12, s11
 800550c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005510:	e70f      	b.n	8005332 <__ieee754_powf+0x1ba>
 8005512:	2401      	movs	r4, #1
 8005514:	e75d      	b.n	80053d2 <__ieee754_powf+0x25a>
 8005516:	bf00      	nop
 8005518:	08005940 	.word	0x08005940
 800551c:	00000000 	.word	0x00000000
 8005520:	3f7ffff7 	.word	0x3f7ffff7
 8005524:	7149f2ca 	.word	0x7149f2ca
 8005528:	3f800007 	.word	0x3f800007
 800552c:	3eaaaaab 	.word	0x3eaaaaab
 8005530:	3fb8aa3b 	.word	0x3fb8aa3b
 8005534:	36eca570 	.word	0x36eca570
 8005538:	3fb8aa00 	.word	0x3fb8aa00
 800553c:	4b800000 	.word	0x4b800000
 8005540:	001cc471 	.word	0x001cc471
 8005544:	005db3d6 	.word	0x005db3d6
 8005548:	08005944 	.word	0x08005944
 800554c:	fffff000 	.word	0xfffff000
 8005550:	3e6c3255 	.word	0x3e6c3255
 8005554:	3e53f142 	.word	0x3e53f142
 8005558:	3e8ba305 	.word	0x3e8ba305
 800555c:	3edb6db7 	.word	0x3edb6db7
 8005560:	3f19999a 	.word	0x3f19999a
 8005564:	3f76384f 	.word	0x3f76384f
 8005568:	3f763800 	.word	0x3f763800
 800556c:	369dc3a0 	.word	0x369dc3a0
 8005570:	08005954 	.word	0x08005954
 8005574:	0800594c 	.word	0x0800594c
 8005578:	3338aa3c 	.word	0x3338aa3c
 800557c:	f040 8092 	bne.w	80056a4 <__ieee754_powf+0x52c>
 8005580:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005578 <__ieee754_powf+0x400>
 8005584:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005588:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800558c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005594:	f73f aef6 	bgt.w	8005384 <__ieee754_powf+0x20c>
 8005598:	15db      	asrs	r3, r3, #23
 800559a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800559e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80055a2:	4103      	asrs	r3, r0
 80055a4:	4423      	add	r3, r4
 80055a6:	4949      	ldr	r1, [pc, #292]	; (80056cc <__ieee754_powf+0x554>)
 80055a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80055ac:	3a7f      	subs	r2, #127	; 0x7f
 80055ae:	4111      	asrs	r1, r2
 80055b0:	ea23 0101 	bic.w	r1, r3, r1
 80055b4:	ee07 1a10 	vmov	s14, r1
 80055b8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80055bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80055c0:	f1c2 0217 	rsb	r2, r2, #23
 80055c4:	4110      	asrs	r0, r2
 80055c6:	2c00      	cmp	r4, #0
 80055c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055cc:	bfb8      	it	lt
 80055ce:	4240      	neglt	r0, r0
 80055d0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80055d4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80056d0 <__ieee754_powf+0x558>
 80055d8:	ee17 3a10 	vmov	r3, s14
 80055dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80055e0:	f023 030f 	bic.w	r3, r3, #15
 80055e4:	ee07 3a10 	vmov	s14, r3
 80055e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ec:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80055f0:	eddf 7a38 	vldr	s15, [pc, #224]	; 80056d4 <__ieee754_powf+0x55c>
 80055f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80055fc:	eddf 6a36 	vldr	s13, [pc, #216]	; 80056d8 <__ieee754_powf+0x560>
 8005600:	eeb0 0a67 	vmov.f32	s0, s15
 8005604:	eea7 0a26 	vfma.f32	s0, s14, s13
 8005608:	eeb0 6a40 	vmov.f32	s12, s0
 800560c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005610:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005614:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005618:	eddf 6a30 	vldr	s13, [pc, #192]	; 80056dc <__ieee754_powf+0x564>
 800561c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80056e0 <__ieee754_powf+0x568>
 8005620:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005624:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80056e4 <__ieee754_powf+0x56c>
 8005628:	eee6 6a07 	vfma.f32	s13, s12, s14
 800562c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80056e8 <__ieee754_powf+0x570>
 8005630:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005634:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80056ec <__ieee754_powf+0x574>
 8005638:	eee6 6a07 	vfma.f32	s13, s12, s14
 800563c:	eeb0 6a40 	vmov.f32	s12, s0
 8005640:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005644:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005648:	eeb0 7a46 	vmov.f32	s14, s12
 800564c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005650:	ee20 6a06 	vmul.f32	s12, s0, s12
 8005654:	eee0 7a27 	vfma.f32	s15, s0, s15
 8005658:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800565c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005660:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005664:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005668:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800566c:	ee10 3a10 	vmov	r3, s0
 8005670:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005678:	da1a      	bge.n	80056b0 <__ieee754_powf+0x538>
 800567a:	f000 f8b7 	bl	80057ec <scalbnf>
 800567e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005682:	e5cd      	b.n	8005220 <__ieee754_powf+0xa8>
 8005684:	4a1a      	ldr	r2, [pc, #104]	; (80056f0 <__ieee754_powf+0x578>)
 8005686:	4293      	cmp	r3, r2
 8005688:	dd02      	ble.n	8005690 <__ieee754_powf+0x518>
 800568a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80056f4 <__ieee754_powf+0x57c>
 800568e:	e67b      	b.n	8005388 <__ieee754_powf+0x210>
 8005690:	d108      	bne.n	80056a4 <__ieee754_powf+0x52c>
 8005692:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005696:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800569a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569e:	f6ff af7b 	blt.w	8005598 <__ieee754_powf+0x420>
 80056a2:	e7f2      	b.n	800568a <__ieee754_powf+0x512>
 80056a4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80056a8:	f73f af76 	bgt.w	8005598 <__ieee754_powf+0x420>
 80056ac:	2000      	movs	r0, #0
 80056ae:	e78f      	b.n	80055d0 <__ieee754_powf+0x458>
 80056b0:	ee00 3a10 	vmov	s0, r3
 80056b4:	e7e3      	b.n	800567e <__ieee754_powf+0x506>
 80056b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80056ba:	e5b1      	b.n	8005220 <__ieee754_powf+0xa8>
 80056bc:	eeb0 0a68 	vmov.f32	s0, s17
 80056c0:	e5ae      	b.n	8005220 <__ieee754_powf+0xa8>
 80056c2:	eeb0 0a48 	vmov.f32	s0, s16
 80056c6:	e5ab      	b.n	8005220 <__ieee754_powf+0xa8>
 80056c8:	2600      	movs	r6, #0
 80056ca:	e590      	b.n	80051ee <__ieee754_powf+0x76>
 80056cc:	007fffff 	.word	0x007fffff
 80056d0:	3f317218 	.word	0x3f317218
 80056d4:	35bfbe8c 	.word	0x35bfbe8c
 80056d8:	3f317200 	.word	0x3f317200
 80056dc:	3331bb4c 	.word	0x3331bb4c
 80056e0:	b5ddea0e 	.word	0xb5ddea0e
 80056e4:	388ab355 	.word	0x388ab355
 80056e8:	bb360b61 	.word	0xbb360b61
 80056ec:	3e2aaaab 	.word	0x3e2aaaab
 80056f0:	43160000 	.word	0x43160000
 80056f4:	0da24260 	.word	0x0da24260

080056f8 <__ieee754_sqrtf>:
 80056f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80056fc:	4770      	bx	lr

080056fe <fabsf>:
 80056fe:	ee10 3a10 	vmov	r3, s0
 8005702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005706:	ee00 3a10 	vmov	s0, r3
 800570a:	4770      	bx	lr

0800570c <finitef>:
 800570c:	b082      	sub	sp, #8
 800570e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005712:	9801      	ldr	r0, [sp, #4]
 8005714:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005718:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800571c:	bfac      	ite	ge
 800571e:	2000      	movge	r0, #0
 8005720:	2001      	movlt	r0, #1
 8005722:	b002      	add	sp, #8
 8005724:	4770      	bx	lr
	...

08005728 <nanf>:
 8005728:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005730 <nanf+0x8>
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	7fc00000 	.word	0x7fc00000

08005734 <rintf>:
 8005734:	ee10 2a10 	vmov	r2, s0
 8005738:	b513      	push	{r0, r1, r4, lr}
 800573a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800573e:	397f      	subs	r1, #127	; 0x7f
 8005740:	2916      	cmp	r1, #22
 8005742:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005746:	dc47      	bgt.n	80057d8 <rintf+0xa4>
 8005748:	b32b      	cbz	r3, 8005796 <rintf+0x62>
 800574a:	2900      	cmp	r1, #0
 800574c:	ee10 3a10 	vmov	r3, s0
 8005750:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8005754:	da21      	bge.n	800579a <rintf+0x66>
 8005756:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800575a:	425b      	negs	r3, r3
 800575c:	4921      	ldr	r1, [pc, #132]	; (80057e4 <rintf+0xb0>)
 800575e:	0a5b      	lsrs	r3, r3, #9
 8005760:	0d12      	lsrs	r2, r2, #20
 8005762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005766:	0512      	lsls	r2, r2, #20
 8005768:	4313      	orrs	r3, r2
 800576a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	edd1 6a00 	vldr	s13, [r1]
 8005776:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800577a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800577e:	eddd 7a01 	vldr	s15, [sp, #4]
 8005782:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005786:	ee17 3a90 	vmov	r3, s15
 800578a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800578e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8005792:	ee00 3a10 	vmov	s0, r3
 8005796:	b002      	add	sp, #8
 8005798:	bd10      	pop	{r4, pc}
 800579a:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <rintf+0xb4>)
 800579c:	410a      	asrs	r2, r1
 800579e:	4213      	tst	r3, r2
 80057a0:	d0f9      	beq.n	8005796 <rintf+0x62>
 80057a2:	0854      	lsrs	r4, r2, #1
 80057a4:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80057a8:	d006      	beq.n	80057b8 <rintf+0x84>
 80057aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80057ae:	ea23 0304 	bic.w	r3, r3, r4
 80057b2:	fa42 f101 	asr.w	r1, r2, r1
 80057b6:	430b      	orrs	r3, r1
 80057b8:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <rintf+0xb0>)
 80057ba:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80057be:	ed90 7a00 	vldr	s14, [r0]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ca:	edcd 7a01 	vstr	s15, [sp, #4]
 80057ce:	ed9d 0a01 	vldr	s0, [sp, #4]
 80057d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80057d6:	e7de      	b.n	8005796 <rintf+0x62>
 80057d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80057dc:	d3db      	bcc.n	8005796 <rintf+0x62>
 80057de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80057e2:	e7d8      	b.n	8005796 <rintf+0x62>
 80057e4:	0800595c 	.word	0x0800595c
 80057e8:	007fffff 	.word	0x007fffff

080057ec <scalbnf>:
 80057ec:	ee10 3a10 	vmov	r3, s0
 80057f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80057f4:	d025      	beq.n	8005842 <scalbnf+0x56>
 80057f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80057fa:	d302      	bcc.n	8005802 <scalbnf+0x16>
 80057fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005800:	4770      	bx	lr
 8005802:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005806:	d122      	bne.n	800584e <scalbnf+0x62>
 8005808:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <scalbnf+0xc8>)
 800580a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80058b8 <scalbnf+0xcc>
 800580e:	4298      	cmp	r0, r3
 8005810:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005814:	db16      	blt.n	8005844 <scalbnf+0x58>
 8005816:	ee10 3a10 	vmov	r3, s0
 800581a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800581e:	3a19      	subs	r2, #25
 8005820:	4402      	add	r2, r0
 8005822:	2afe      	cmp	r2, #254	; 0xfe
 8005824:	dd15      	ble.n	8005852 <scalbnf+0x66>
 8005826:	ee10 3a10 	vmov	r3, s0
 800582a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80058bc <scalbnf+0xd0>
 800582e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80058c0 <scalbnf+0xd4>
 8005832:	2b00      	cmp	r3, #0
 8005834:	eeb0 7a67 	vmov.f32	s14, s15
 8005838:	bfb8      	it	lt
 800583a:	eef0 7a66 	vmovlt.f32	s15, s13
 800583e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005842:	4770      	bx	lr
 8005844:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80058c4 <scalbnf+0xd8>
 8005848:	ee20 0a27 	vmul.f32	s0, s0, s15
 800584c:	4770      	bx	lr
 800584e:	0dd2      	lsrs	r2, r2, #23
 8005850:	e7e6      	b.n	8005820 <scalbnf+0x34>
 8005852:	2a00      	cmp	r2, #0
 8005854:	dd06      	ble.n	8005864 <scalbnf+0x78>
 8005856:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800585a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800585e:	ee00 3a10 	vmov	s0, r3
 8005862:	4770      	bx	lr
 8005864:	f112 0f16 	cmn.w	r2, #22
 8005868:	da1a      	bge.n	80058a0 <scalbnf+0xb4>
 800586a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800586e:	4298      	cmp	r0, r3
 8005870:	ee10 3a10 	vmov	r3, s0
 8005874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005878:	dd0a      	ble.n	8005890 <scalbnf+0xa4>
 800587a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80058bc <scalbnf+0xd0>
 800587e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80058c0 <scalbnf+0xd4>
 8005882:	eef0 7a40 	vmov.f32	s15, s0
 8005886:	2b00      	cmp	r3, #0
 8005888:	bf18      	it	ne
 800588a:	eeb0 0a47 	vmovne.f32	s0, s14
 800588e:	e7db      	b.n	8005848 <scalbnf+0x5c>
 8005890:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80058c4 <scalbnf+0xd8>
 8005894:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80058c8 <scalbnf+0xdc>
 8005898:	eef0 7a40 	vmov.f32	s15, s0
 800589c:	2b00      	cmp	r3, #0
 800589e:	e7f3      	b.n	8005888 <scalbnf+0x9c>
 80058a0:	3219      	adds	r2, #25
 80058a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80058a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80058aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 80058cc <scalbnf+0xe0>
 80058ae:	ee07 3a10 	vmov	s14, r3
 80058b2:	e7c4      	b.n	800583e <scalbnf+0x52>
 80058b4:	ffff3cb0 	.word	0xffff3cb0
 80058b8:	4c000000 	.word	0x4c000000
 80058bc:	7149f2ca 	.word	0x7149f2ca
 80058c0:	f149f2ca 	.word	0xf149f2ca
 80058c4:	0da24260 	.word	0x0da24260
 80058c8:	8da24260 	.word	0x8da24260
 80058cc:	33000000 	.word	0x33000000

080058d0 <_init>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	bf00      	nop
 80058d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d6:	bc08      	pop	{r3}
 80058d8:	469e      	mov	lr, r3
 80058da:	4770      	bx	lr

080058dc <_fini>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr
